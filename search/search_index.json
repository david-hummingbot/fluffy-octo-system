{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+","tags":false},"docs":[{"location":"","text":"<p>Welcome to the official documentation for Hummingbot!</p> <p>Hummingbot is an open source framework that helps you build crypto trading bots that run on both centralized exchanges (CEX), as well as decentralized exchanges (DEX) on various blockchain networks. Our codebase is free and publicly available on Github under the Apache 2.0 open source license.</p> <p>Help us democratize high-frequency trading and provide free access to sophisticated algorithms and tooling to everyone!!</p>","title":"Hummingbot Documentation"},{"location":"#getting-started","text":"<p>New to Hummingbot? Start here!</p> <ul> <li>Quickstart: Coming soon!</li> <li>Installation: Install Hummingbot on various platforms</li> <li>Basic Operations: Basic commands and actions in Hummingbot</li> </ul>","title":"\ud83d\udc24 Getting started"},{"location":"#learn-with-botcamp","text":"<p>\u2b50 If you'd like to learn algo trading with Hummingbot, check out Hummingbot Botcamp, an intensive, small-batch bootcamp that teaches you how to build your own custom trading bot in only 6 weeks. Each cohort of Botcamp culminates in a Demo Day where students present their custom scripts and compete for HBOT rewards and the glory of victory!</p> <p>Many of the sample scripts in the <code>/scripts/</code> folder were contributed by Botcamp students.</p>","title":"\ud83c\udf93 Learn with Botcamp"},{"location":"#hummingbot-components","text":"<p>Hummingbot architecture features modular components that can be maintained and extended by individual community members:</p> <ul> <li>Strategies: Configurable templates for various algorithmic trading strategies</li> <li>Scripts: Simple, single-file versions of strategies in pure Python</li> <li>Exchanges: Connectors to various centralized exchanges (CEX) and decentralized exchanges (DEX)</li> <li>Chains: Connectors to various blockchain networks (for DEX connectors)</li> <li>Advanced Features</li> </ul>","title":"\ud83d\udc69\u200d\ud83d\udcbb Hummingbot components"},{"location":"#for-developers","text":"<p>Hummingbot is a general source framework for crypto algorithmic trading. We welcome developers to fork the codebase for their own purposes and contribute to the community.</p> <ul> <li>Developers: Explanation of Hummingbot's architecture and detailed reference on how to build connectors and strategies</li> <li>Bounties: Get paid for building and maintaining Hummingbot components connector middleware</li> <li>Support Hummingbot!: How you can support our mission to democratize HFT!</li> <li>Contribution Guidelines: Read this before submitting a pull request</li> </ul>","title":"\ud83d\udc69\u200d\ud83d\udcbb For developers"},{"location":"#about-us","text":"<p>Hummingbot Foundation is a not-for-profit foundation that facilitates decentralized maintenance and governance of the Hummingbot codebase, powered by the Hummingbot Governance Token (HBOT).</p> <ul> <li>About the Foundation: About Hummingbot Foundation</li> <li>Governance: All things related to Foundation governance</li> <li>FAQ: Answers to common questions</li> <li>Community: Participate in the global Hummingbot ecosystem</li> <li>Blog: Recent news and updates</li> <li>Newsletter: Recent news and updates</li> </ul>","title":"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 About us"},{"location":"#community-calls","text":"<p>Each month, we livestream two monthly community calls on our YouTube channel:</p> <ul> <li>Community call (1st Wednesday of the month): Release highlights, community demos, AMA</li> <li>Developer call (3rd Wednesday of the month): Mini-lessons, developer-focused AMA</li> </ul> <p>All calls take place on Wednesdays at 2pm GMT / 10am EST / 7am PST / 10pm SIN, with recordings posted on Youtube afterwards. </p> <p>Check out the Foundation calendar for the upcoming events and Youtube links.</p>","title":"\u260e\ufe0f Community calls"},{"location":"#newsletter","text":"<p>Sign up for the official Hummingbot newsletter, which is published when each monthly release drops. The newsletter also contains Foundation news, upcoming events, and updates about contributions from the global Hummingbot community!</p> <p>Get the Hummingbot newsletter </p>","title":"\ud83d\udcec Newsletter"},{"location":"#getting-help","text":"<p>Hummingbot features an active, friendly community of users globally! Here are some ways to get help if you're encountering issues:</p> <ul> <li>Check out the FAQ, Troubleshooting, and Glossary pages for answers to common questions about Hummingbot</li> <li>To report a bug or request a new feature, post a Github issue.</li> <li>Join the official Discord and post your question on #support</li> </ul> <p>For users using Hummingbot to earn rewards on Miner, the decentralized market making platform operated by our sister company CoinAlpha, you can also access Miner support via the following methods:</p> <ul> <li>Discord: CoinAlpha maintains 24/7 dedicated technical support for users on the #miner-support channel within the Hummingbot Discord server. They help users install Hummingbot and configure API keys for use with the Miner platform, investigates reports related to missing or duplicate rewards, and other issues. </li> <li>Email: Send CoinAlpha support a message at support@hummingbot.io</li> <li>Live chat: Click the chat widget in the lower right hand corner of the Miner website.</li> </ul> <p>We pledge that we will not use the information/data your provide us for trading purposes nor share them with third parties.</p>","title":"\ud83d\ude4b\u200d\u2642\ufe0f Getting help"},{"location":"community/","text":"<p>Hummingbot is the leading open source crypto trading bot, used by thousands of individual and professional traders and developers. Its modular architecture lets users build and maintain connectors, strategies, and other components independently, and many users have modified and customized the Hummingbot software for their own use.</p> <p>The Hummingbot community is comprised of its global user base of individual liquidity miners, as well as professional traders, market makers, and software developers. Like the Hummingbot codebase itself, our community is open, decentralized, and diverse.</p>","title":"Community"},{"location":"community/#official-channels","text":"<p>Below are the only primary channels used by the Hummingbot Foundation to release official versions of Hummingbot and to communicate news and updates to HBOT token holders.</p>","title":"Official Channels"},{"location":"community/#website","text":"<p>Along with this documentation site, the only other official Hummingbot website is https://hummingbot.org. </p> <p>Key resources include:</p> <ul> <li>Test Drive: Try out Hummingbot directly from in the browser for free!</li> <li>Botcamp: Our small-batch, hands-on developer bootcamp that teaches you how to create your own custom algo trading strategy using HUmmingbot</li> <li>Blog: The official Hummingbot blog with academy articles that teach you about market making along with advanced Hummingbot tips and tricks</li> </ul>","title":"Website"},{"location":"community/#newsletter","text":"<p>The Hummingbot Foundation newsletter is hosted at https://hummingbot.substack.com. Published with each monthly release, the newsletter also contains foundation news, upcoming events, and updates about contributions from the global Hummingbot community.</p>","title":"Newsletter"},{"location":"community/#discord","text":"<p>Our official Discord server is located at https://discord.gg/hummingbot. Discord is the primary hub for the Hummingbot community - announcements, user support, trading strategies, connectors, and other discussions. Official announcements are only posted in the #announcements channel.</p>  <p>No DMs</p> <p>Hummingbot Foundation team members will never initiate direct messages to users. If a random user imitating the core team or any of the community members sends you a DM don't hesitate to report it in our official Discord channel.</p>","title":"Discord"},{"location":"community/#twitter","text":"<p>Our Twitter account is https://twitter.com/_hummingbot, where the Foundation will post news and updates.</p>","title":"Twitter"},{"location":"community/#youtube","text":"<p>Our YouTube account is https://www.youtube.com/c/hummingbot. This channel contains videos that teach you how to use Hummingbot, livestreams of community calls, and interviews with members of the Hummingbot community.</p>","title":"YouTube"},{"location":"community/#code-repositories","text":"<p>Below are the only code repositories used by the Hummingbot Foundation to release official versions of Hummingbot and to communicate news and updates to HBOT token holders. Please download Hummingbot and Hummingbot-related software from only these official sources.</p>","title":"Code Repositories"},{"location":"community/#github","text":"<p>The Foundation Github organization is located at https://github.com/hummingbot. It contains:</p> <ul> <li><code>hummingbot</code>: monorepo that contains the code for the Hummingbot trading client and Hummingbot Gateway</li> <li><code>hummingbot-site</code>: Hummingbot Foundation website and Hummingbot documentation site</li> <li><code>pm</code>: Agendas and recordings of regular Hummingbot developer and community calls</li> <li><code>awesome-hummingbot</code>: All the awesome Hummingbot links</li> <li><code>streamlit-apps</code>: Hummingbot-related StreamLit data apps and dashboards</li> <li><code>community-tools</code>: Tools and resources created by the Hummingbot community</li> </ul>","title":"Github"},{"location":"community/#dockerhub","text":"<p>The Hummingbot DockerHub is at: https://hub.docker.com/repository/docker/hummingbot/hummingbot. It contains images for the <code>latest</code> and <code>development</code> releases of Hummingbot for various environments, as well as historical releases.</p>","title":"DockerHub"},{"location":"faq/","text":"<p>See below for answers to frequently asked questions about:</p> <ul> <li>Hummingbot software</li> <li>Hummingbot Foundation</li> <li>HBOT token</li> </ul>","title":"FAQ"},{"location":"faq/#hummingbot-software","text":"","title":"Hummingbot software"},{"location":"faq/#what-type-of-software-is-hummingbot","text":"<p>Hummingbot is software that helps you build and run crypto trading bots, freely available at https://github.com/hummingbot/hummingbot under the open source Apache 2.0 license.</p>","title":"What type of software is Hummingbot?"},{"location":"faq/#is-hummingbot-a-protocol-or-an-exchange","text":"<p>No, Hummingbot is open source client software that you install on a local machine that interacts with exchanges and protocols.</p> <p>With many connectors and strategies being added all the time, Hummingbot is a constantly evolving publicly available codebase with frequent external contributors seeking to merge their changes into the <code>master</code> branch, which is released once a month and widely used by tens of thousands of individual and professional bot-runners globally.</p>","title":"Is Hummingbot a protocol or an exchange?"},{"location":"faq/#how-do-people-use-hummingbot","text":"<p>You can use Hummingbot to build any types of automated crypto trading bot, with the most common bot types being market making and arbitrage bots. Market making bots provide liquidity to a trading pair on an exchange, while arbitrage bots exploit price differences betweeen trading pairs on different exchanges.</p> <p>Typically, users install the Docker image version on AWS or another cloud provider. Afterwards, they can add their API key or private keys to it, which allows them to configure and run one of Hummingbot's pre-built strategies on many different exchanges.</p> <p>Since Hummingbot is an open, modular codebase, many developers and professional firms fork the codebase and use it for their own purposes.</p>","title":"How do people use Hummingbot?"},{"location":"faq/#why-is-hummingbot-open-source","text":"<ol> <li> <p>Trust and transparency: Market makers need to keep their API keys, private keys, and strategy configuration private and secure, so which is why Hummingbot is a local software client, not a web-based platform. In addition, Hummingbot's open source codebase enables anyone to inspect and audit the code.</p> </li> <li> <p>Community maintenance: Hummingbot's value proposition is that it connects to many different centralized and decentralized exchanges, along with pre-built strategy templates that enable users to run many different types of trading strategies. In order to scale the number of connectors and strategies, Hummingbot relies upon its open source community.</p> </li> <li> <p>Democratizing HFT: From the beginning, our mission has been to democratize high-frequency trading with open source software.</p> </li> </ol>","title":"Why is Hummingbot open source?"},{"location":"faq/#why-did-you-make-hummingbot-available-to-the-general-public","text":"<p>As we wrote in the original Hummingbot whitepaper, market making is an important function critical to organic, efficient markets that should be decentralized to prevent the concentration risk that exists in traditional finance.</p> <p>Later, we pioneered the concept of decentralized market making by writing the Liquidity Mining whitepaper and built the first such platform: Hummingbot Miner. Miner has turned into a successful, standalone business that provides liquidity to hundreds of tokens across multiple exchanges, powered by thousands of individual market makers running Hummingbot.</p> <p>This has allowed CoinAlpha to spin off Hummingbot into a not-for-profit foundation, which is dedicated to keeping Hummingbot open source.</p>","title":"Why did you make Hummingbot available to the general public?"},{"location":"faq/#what-is-market-making","text":"<p>Market making is the act of simultaneously creating buy and sell orders for an asset in a market. By doing so, a market maker acts as a liquidity provider, facilitating other market participants to trade by giving them the ability to fill the market maker's orders. Traditionally, market-making industry has been dominated by highly technical quantitative hedge funds and trading firms that have the infrastructure and intelligence to deploy sophisticated algorithms at scale.</p> <p>Market makers play an important role in providing liquidity to financial markets, especially in the highly fragmented cryptocurrency industry. While large professional market makers fight over the most actively traded pairs on the highest volume exchanges, there exists a massive long tail of smaller markets who also need liquidity: tokens outside the top 10, smaller exchanges, decentralized exchanges, and new blockchains.</p> <p>See How does market making work? for more information.</p>","title":"What is market making?"},{"location":"faq/#how-does-hummingbot-store-my-private-keys-and-api-keys","text":"<p>Similar to wallet software, Hummingbot stores your private keys and API keys in encrypted form, using the password you enter when you first start Hummingbot. These keys are saved in your <code>/conf</code> folder.</p> <p>Since Hummingbot is a local client, your private keys and API keys are as secure as the computer you are running them on. This is because the keys are used to create authorized instructions locally on the local machine, and only the instructions which have already been signed or authorized are sent out from the client.</p>","title":"How does Hummingbot store my private keys and API keys?"},{"location":"faq/#what-does-it-cost-for-me-to-run-hummingbot","text":"<p>Hummingbot is a free software, so you can download, install, and run it for free.</p> <p>Transactions from Hummingbot are normal transactions conducted on exchanges; therefore when operating Hummingbot, you would be subject to each exchange\u2019s fees (e.g. maker, taker, and withdrawal fees), as you would if you were trading on that exchange normally (i.e. without Hummingbot).</p> <p>There is no minimum amount of assets to use Hummingbot, but users should pay heed to exchange-specific minimum order sizes. We include links to the exchange's minimum order size page. This can be found in each exchange's page in Exchange Connectors.</p>","title":"What does it cost for me to run Hummingbot?"},{"location":"faq/#how-do-i-use-hummingbot-on-a-amm-decentralized-exchange-like-uniswap","text":"<p>On an Automatic Market Maker (AMM) decentralized exchange, users deposit tokens into a pool to provide liquidity and earn LP tokens. Since AMM pools depend on arbitrage to keep prices in line with other venues, Hummingbot's <code>amm-arb</code> strategy allows users to run an arbitrage bot that may earn profits from exploiting price differences between the AMM and other exchanges.</p>","title":"How do I use Hummingbot on a AMM decentralized exchange like Uniswap?"},{"location":"faq/#hummingbot-foundation","text":"","title":"Hummingbot Foundation"},{"location":"faq/#what-does-the-hummingbot-foundation-do","text":"<p>The Hummingbot Foundation is a not-for-profit organization established in the Cayman Islands. The Foundation\u2019s mission is to democratize high-frequency trading by enabling decentralized maintenance and community governance over the open-source Hummingbot code repository.</p> <p>Below are its main roles and responsibilities:</p> <ul> <li>Maintenance: Appoint and compensate maintainers who maintain Hummingbot exchange connectors by fixing bugs, resolving API changes, and adding features.</li> <li>Bounties: Enable the community to sponsor bounties that reward community contributors for building new connectors, features, and enhancements</li> <li>Governance: Enable the community to steer the evolution of the codebase by prioritizing work on Github issues and pull requests</li> </ul> <p>Since Hummingbot is not a blockchain protocol, but rather open source client software run locally on individual client devices that interacts with protocols and exchanges, the Foundation governance system aims to fits into the existing Hummingbot open source software release process, which has been used to handle thousands of Github issues and pull requests created by the community over the past three years.</p>","title":"What does the Hummingbot Foundation do?"},{"location":"faq/#how-is-the-hummingbot-foundation-sustainable","text":"<p>A large part of Hummingbot\u2019s value comes from the number of connectors it supports and its overall usage, which can be measured by the aggregate trading activity that Hummingbot users supply to connected exchanges and protocols. The Foundation has fee share agreements and other partnerships with these exchanges and protocols that rebate fees based on usage, tracked at the API header level.</p> <p>Meanwhile, community developers can maintain Hummingbot components of the codebase and extend the toolset to more markets and asset types, keeping maintenance costs low.</p> <p>In addition, the Foundation plans to charge bounty administration fees to administer, review and merge the development work performed by bounty contributors.</p> <p>Based on the source of income above, the Foundation is projected to be self-sustainable at inception. Over time, we expect this margin to increase as volume and fees generated grow as the Hummingbot user base expands.</p>","title":"How is the Hummingbot Foundation sustainable?"},{"location":"faq/#who-runs-the-hummingbot-foundation","text":"<p>A five-person Board of Directors provides oversight over the Foundation and oversees staff who manage day-to-day operations. This board is elected by HBOT token holders every 12 months.</p> <p>In addition, the Foundation has a Chief Operating Officer and Chief Finance Officer, who collectively manage partnerships with exchanges, negotiate contracts with maintainers, and oversee the Foundation\u2019s budget and finances.</p> <p>The Foundation also employs staff who administer the governance system, respond to users on Discord, and handle other day-to-day operations of maintaining Hummingbot, including:</p> <ul> <li>Review pull requests and issues linked to proposals</li> <li>Communicate and coordinate with sponsors, maintainers, and contributors</li> <li>Package monthly releases into Docker containers for various environments</li> <li>Maintain and update documentation</li> </ul>","title":"Who runs the Hummingbot Foundation?"},{"location":"faq/#why-is-the-hummingbot-foundation-domiciled-in-the-cayman-islands","text":"<p>For the past 20 years, the Cayman Islands has been one of the preferred global jurisdictions for the incorporation of new securitizations, special purpose vehicles, and other new organizations. In 2017, the Cayman Islands introduced the Foundation Company structure, a flexible structure that allows a limited liability legal entity to operate similar to a civil law foundation, steered by a decentralized set of participants. The Hummingbot Foundation uses this structure.</p> <p>See What is a Cayman Foundation Company? from Zedra, our corporate services provider in the Cayman Islands.</p>","title":"Why is the Hummingbot Foundation domiciled in the Cayman Islands?"},{"location":"faq/#how-do-i-apply-for-a-job-with-the-hummingbot-foundation","text":"<p>See this page, and apply for the ones marked Hummingbot Foundation. Alternatively, post a message with your CV to one of the Foundation staff on Discord.</p>","title":"How do I apply for a job with the Hummingbot Foundation?"},{"location":"faq/#hbot-token","text":"","title":"HBOT token"},{"location":"faq/#what-is-the-hbot-token","text":"<p>The Hummingbot Governance Token (HBOT) is the medium of governance for the Hummingbot open source ecosystem. It is a standard Ethereum ERC-20 token with a fixed total supply of 1,000,000 HBOT tokens.</p>","title":"What is the HBOT token?"},{"location":"faq/#what-can-i-do-with-the-hbot-token","text":"<p>HBOT is a governance token that give holders control over the Hummingbot codebase, the HBOT community treasury, and the Hummingbot Foundation. For instance, holders can:</p> <ul> <li>Approve all pull requests to the Hummingbot codebase</li> <li>Propose architectural changes and steer the roadmap</li> <li>Allocate the HBOT community treasury</li> <li>Appoint maintainers for exchange connectors who share in fees rebated from that exchange</li> <li>Elect Foundation board of directors</li> </ul> <p>HBOT token holders make these decisions by creating proposals and voting with their token balances. One HBOT equals one vote, and voting does not consume any tokens.</p>","title":"What can I do with the HBOT token?"},{"location":"faq/#will-voting-with-hbot-cost-gas-or-incur-other-transaction-fees","text":"<p>No. All Hummingbot Foundation proposals are on Snapshot, which lets HBOT holders vote by signing messages using their HBOT token balance to vote on issues without paying gas. Snapshots are recorded to IPFS to generate a permanent record.</p>","title":"Will voting with HBOT cost gas or incur other transaction fees?"},{"location":"faq/#how-do-i-know-that-im-using-the-correct-hbot-token","text":"<p>To prevent HBOT token holders from being scammed by fraudulent versions of the token, unverified pools/DEXs, or incorrect coin listings, we maintain a compilation of verified HBOT-related pages from Reputable Sources. This does not constitute investment advice or a recommendation for any platform or market listed.</p>","title":"How do I know that I'm using the correct HBOT token?"},{"location":"faq/#does-the-foundation-plan-to-list-hbot-on-any-crypto-exchange","text":"<p>Please see Reputable Sources for information about venues where HBOT may be traded.</p>","title":"Does the Foundation plan to list HBOT on (any crypto exchange)?"},{"location":"faq/#how-does-the-foundation-plan-to-distribute-remaining-hbot-tokens","text":"<p>The Foundation plans to distribute the remaining 36 million tokens (36% of total supply) to Hummingbot users over the 4 years after inception across fixed Epochs. The goal is to distribute tokens to developers who contribute improvements to the codebase, and users of the Hummingbot software on connected exchanges and market making platforms.</p> <p>See Hummingbot Governance Proposals for more information on the categories of HBOT grants.</p>","title":"How does the Foundation plan to distribute remaining HBOT tokens?"},{"location":"faq/#i-was-an-early-user-of-hummingbot-am-i-eligible-to-claim-hbot-tokens","text":"<p>The Hummingbot Foundation is grateful to everyone who has used Hummingbot, found bugs, and contributed to the codebase in the past. However, for the Retroactive Distribution, the Foundation decided to allocate tokens only to two types of historical activity: 1) Github code contributors and 2) users of the Hummingbot Miner platform. We chose these two types because past activity can be verified through public commit history and Miner API keys, respectively.</p> <p>Other than those listed in the HBOT announcement, there are no other eligible HBOT recipients.</p>","title":"I was an early user of Hummingbot. Am I eligible to claim HBOT tokens?"},{"location":"faq/#what-if-i-accidentally-used-an-exchange-address-to-claim-hbot-tokens","text":"<p>If you accidentally entered a Binance.com deposit address to claim your tokens, here is how you may be able to retrieve those tokens:</p> <ul> <li>Log into Binance.com</li> <li>In the Wallet section -&gt; Deposit Crypto, there is a \"deposit hasn't arrived?\" section</li> <li>Select \"Search\" and \"Deposited an Unlisted coin\"</li> <li>Select \"Submit Appeal\" and enter the transaction details</li> </ul>","title":"What if I accidentally used an exchange address to claim HBOT tokens?"},{"location":"faq/#reporting","text":"","title":"Reporting"},{"location":"faq/#how-does-data-reporting-work","text":"<p>Unless users turn it off, instances of the Hummingbot software send the following metrics to a Hummingbot Foundation server every 15 minutes:</p> <ul> <li>Aggregated trade volume</li> <li>Exchange where the trades occurred</li> <li>Version of Hummingbot software used</li> <li>Device and system information</li> <li>InstanceID (an anonymous, randomly-generated unique identifier)</li> </ul> <p>All data collected will be used exclusively by Hummingbot Foundation for reporting purposes only, and we will never sell this data to any third party.</p>","title":"How does data reporting work?"},{"location":"faq/#why-do-you-collect-this-data","text":"<p>To sustain development of the Hummingbot client, Hummingbot Foundation enters into fee share partnerships with exchanges. These partners need actionable data to convince their stakeholders and community members that a Hummingbot partnership is worthwhile. Their most common requests include total volume traded and number of users.</p> <p>After a partnership has been established, we rely upon the exchange to remit fees honestly back to us. In the past, we have entered into agreements that were not honored by the exchange, which diverts scarce resources away from the Hummingbot community. By openly publishing both reported volumes as well as fees shared for each exchange (see Monthly Reports), we hope to use the power of transparency to incentivize exchanges to honor their agreements.</p>","title":"Why do you collect this data?"},{"location":"faq/#how-do-i-configure-or-turn-off-this-feature","text":"<p>In <code>conf/conf_client.yml</code>, find the following section:</p> <pre><code># Whether to enable aggregated order and trade data collection\nanonymized_metrics_mode:\n  anonymized_metrics_interval_min: 15.0\n</code></pre> <p>Changing the parameter above to <code>anonymized_metrics_interval_min: 0.0</code> disables data reporting. You may also adjust the interval if you would rather send data on a slower or faster interval. 15 minutes was chosen and tested as a reasonable interval for an active trading Hummingbot instance.</p>","title":"How do I configure or turn off this feature?"},{"location":"faq/#how-can-i-be-sure-that-this-is-the-only-data-hummingbot-collects","text":"<p>The Hummingbot codebase is 100% open source and publicly auditable on Github. Feel free to review the code for yourself and post publicly on our Discord or official forum what you found. We\u2019ve always been open and honest with our community members and you\u2019ll find that this case is no different.</p>","title":"How can I be sure that this is the only data Hummingbot collects?"},{"location":"glossary/","text":"<p>When you start diving into the Hummingbot ecosystem, you'll probably encounter some unfamiliar terms and phrases along the way. To help you on your journey, we've defined some of the most common trading vocabularies here in this handy cheat sheet.</p>","title":"Glossary"},{"location":"glossary/#base-asset","text":"<p>The asset in a trading pair whose quantity is fixed as a single unit in a price quote. For example, in a price quotation of ETH/DAI 100, ETH is the base asset and 100 is the amount of DAI exchangeable for each unit of ETH.In Hummingbot, the first token in a trading pair is always the base asset. See quote asset for more info.</p>","title":"Base asset"},{"location":"glossary/#centralized-exchange-cex","text":"<p>An exchange which is operated by a central authority. In addition to order matching and broadcasting, the centralized exchange keeps custody of users\u2019 assets.</p>","title":"Centralized exchange (\u201cCEX\u201d)"},{"location":"glossary/#decentralized-exchange-dex","text":"<p>An exchange which operates in a decentralized way, using smart contracts to facilitate the transacting in and settling of assets. Generally, one distinguishing feature of a decentralized exchange is that participants keep custody of their own assets in their own wallets; the DEX facilitates the direct wallet-to-wallet settlement between counterparties in a transaction.</p>","title":"Decentralized exchange (\u201cDEX\u201d)"},{"location":"glossary/#maker","text":"<p>A party that places maker orders, and in doing so, provides liquidity to the market.</p>","title":"Maker"},{"location":"glossary/#maker-order","text":"<p>A \u201climit order\u201d; which is an order to buy or sell an asset at a specified price and quantity. Executing this order is not guaranteed; the order is only filled if there is a taker that accepts the price and quantity and transacts.</p>","title":"Maker order"},{"location":"glossary/#order-book","text":"<p>A list of currently available (maker) orders on an exchange, showing all of the current buyer and seller interest in an asset.</p>","title":"Order book"},{"location":"glossary/#quote-asset","text":"<p>The asset in a asset pair whose quantity varies and whose quantity is denoted by the numerical figure of the price quote. For example, in a price quotation of ETH/DAI 100, DAI is the quote currency and 100 units of DAI are referenced in this exchange.In Hummingbot, the second token in a trading pair is always the quote asset. See base asset for more info.</p>","title":"Quote asset"},{"location":"glossary/#taker","text":"<p>A party that places taker orders, which execute immediately and fill a maker order.</p>","title":"Taker"},{"location":"glossary/#taker-order","text":"<p>A \u201cmarket order\u201d; an order to buy or sell a specified quantity of an asset which is filled immediately at the best available price(s) available on the exchange.</p>","title":"Taker order"},{"location":"glossary/#mid-price","text":"<p>The average of best bid and best ask price in the orderbook.</p>","title":"Mid price"},{"location":"glossary/#hedging-price","text":"<p>In cross exchange strategy, is the net cost of the other side of your limit order i.e., the cost of you making a taker order.For example on your taker market, if you can buy 25 tokens for say a net price of $100 (other market makers have limit sell orders at a net price of 100 for all 25, e.g. 7.5 @ $99, 10 @ $100, 7.5 @ $101), then on your maker side, you would place a limit sell order for 25 @ $101 (assume 1% min profitability). If someone fills your sell order (you sell at $101), you immediately try to hedge by buying on the taker side at $100.</p>","title":"Hedging price"},{"location":"reporting/","text":"","title":"Reporting"},{"location":"reporting/#financials","text":"<p>To give the Hummingbot community transparency into the operations of the Hummingbot Foundation, the Foundation publishes a periodic financial report that describes the sources and uses of funds over the period, as well as the total treasury position at the end of the period.</p> <p>December 2022</p> <p>November 2022</p> <p>October 2022</p> <p>September 2022</p> <p>August 2022</p> <p>July 2022</p> <p>June 2022</p> <p>May 2022</p> <p>April 2022</p> <p>March 2022</p> <p>February 2022</p> <p>January 2022</p>","title":"Financials"},{"location":"reporting/#reported-volumes","text":"<p>See below for a real-time dashboard of the aggregated, anonymized trade volumes that Hummingbot clients report:</p> <p> Hummingbot Reported Volumes</p> <p>You can use the exchange and version toggles to filter the data. In addition, you can also change the timespan, as well as activate dark mode!</p> <p></p>","title":"Reported Volumes"},{"location":"reporting/#hbot-tracker","text":"<p>The Google Sheet below provides an overview of the HBOT allocations set by various Proposals, as well the HBOT token amounts distributed across each proposal to date.</p> <p> HBOT Tracker</p>","title":"HBOT Tracker"},{"location":"support-hummingbot-cn/","text":"<p>English version | \u4e2d\u6587\u7248</p>","title":"\u652f\u6301Hummingbot\u5e76\u83b7\u5f97\u8fd4\u4f63"},{"location":"support-hummingbot-cn/#_1","text":"<p>\u611f\u8c22\u60a8\u5bf9Hummingbot\u4ee3\u7801\u5e93\u7684\u652f\u6301\uff01\u6211\u4eec\u5e0c\u671b\u60a8\u80fd\u901a\u8fc7\u4f7f\u7528\u6211\u4eec\u7684\u63a8\u8350\u4ee3\u7801\u521b\u5efa\u4ea4\u6613\u6240\u8d26\u6237\uff0c\u6216\u8005\u5982\u679c\u60a8\u662f\u5f00\u53d1\u8005\uff0c\u5c06\u6211\u4eec\u7684\u7ecf\u7eaa\u5546ID\u6dfb\u52a0\u5230\u60a8\u7684\u81ea\u5b9a\u4e49\u673a\u5668\u4eba\u4e2d\u6765\u652f\u6301\u6211\u4eec\u3002\u6211\u4eec\u975e\u5e38\u5e0c\u671b\u5f97\u5230\u60a8\u7684\u652f\u6301\uff0c\u4f7f\u7528\u6211\u4eec\u7684\u63a8\u8350\u4ee3\u7801\u521b\u5efa\u4ea4\u6613\u6240\u8d26\u6237\uff0c\u6216\u8005\u5982\u679c\u60a8\u662f\u4e00\u4e2a\u5f00\u53d1\u8005\uff0c\u5c06\u6211\u4eec\u7684\u7ecf\u7eaa\u4ebaID\u6dfb\u52a0\u5230\u60a8\u7684\u81ea\u5b9a\u4e49\u673a\u5668\u4eba\u4e2d\u3002 </p> <p>\u8fd9\u652f\u6301\u4e86\u6211\u4eec\u5728\u975e\u8425\u5229\u6027\u7684Hummingbot\u57fa\u91d1\u4f1a\u7684\u5de5\u4f5c\uff0c\u5e76\u4e14\u4e5f\u4e3a\u60a8\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u8fd4\u4f63\uff01\u6211\u4eec\u7684\u4e3b\u8981\u6536\u5165\u6765\u6e90\u662f\u4ea4\u6613\u6240\u7ecf\u7eaa\u5546\u8ba1\u5212\uff0c\u6211\u4eec\u4e0e\u4ea4\u6613\u6240\u5408\u4f5c\uff0c\u4e0e\u6211\u4eec\u5206\u4eab\u60a8\u652f\u4ed8\u7684\u90e8\u5206\u4ea4\u6613\u8d39\u7528\uff0c\u5bf9\u60a8\u6765\u8bf4\u662f\u96f6\u6210\u672c\u3002\u5bf9\u4e8e\u5141\u8bb8\u8fd9\u6837\u505a\u7684\u4ea4\u6613\u6240\uff0c\u6211\u4eec\u5411\u7528\u6237\u8fd4\u8fd8\u6211\u4eec\u603b\u8d39\u7528\u4efd\u989d\u768425%\u3002</p>","title":"\u4ecb\u7ecd"},{"location":"support-hummingbot-cn/#_2","text":"<p>Hummingbot\u4e0d\u540c\u4e8e\u5176\u4ed6\u4ea4\u6613\u673a\u5668\u4eba:</p> <ol> <li>\u5f00\u6e90\uff1a \u6211\u4eec\u7684\u4f7f\u547d\u662f\u4f7f\u9ad8\u9891\u4ea4\u6613\uff08HFT\uff09\u6c11\u4e3b\u5316\uff0c\u5e76\u4f7f\u4e16\u754c\u4e0a\u6bcf\u4e2a\u4eba\u90fd\u80fd\u4f7f\u7528\u590d\u6742\u7684\u4ea4\u6613\u5de5\u5177\u548c\u7b97\u6cd5\uff01\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u4f7f\u547d\uff0c\u6211\u4eec\u51b3\u5b9a\u5c06\u6211\u4eec\u7684\u4ea4\u6613\u6240\u8fde\u63a5\u5668\u548c\u7b56\u7565\u5f00\u6e90\uff0c\u4ee5\u4fbf\u4efb\u4f55\u4eba\u90fd\u80fd\u53d7\u76ca\u5e76\u4e3a\u4ee3\u7801\u5e93\u505a\u51fa\u8d21\u732e\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u4f7f\u547d\uff0c\u6211\u4eec\u51b3\u5b9a\u5c06\u6211\u4eec\u7684\u4ea4\u6613\u6240\u8fde\u63a5\u5668\u548c\u7b56\u7565\u5f00\u653e\u6e90\u4ee3\u7801\uff0c\u8fd9\u6837\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4ece\u4ee3\u7801\u5e93\u4e2d\u53d7\u76ca\u5e76\u505a\u51fa\u8d21\u732e\u3002</li> <li>\u514d\u8d39\uff1a\u4e3a\u4e86\u4fdd\u6301Hummingbot\u7684\u5f00\u6e90\u548c\u514d\u8d39\uff0c\u6211\u4eec\u4e0e\u4ea4\u6613\u6240\u5408\u4f5c\u4f19\u4f34\u7b7e\u8ba2\u4e86\u8d39\u7528\u5206\u4eab\u534f\u8bae\uff0c\u4ea4\u6613\u6240\u5206\u4eab\u4e00\u90e8\u5206\u4ea4\u6613\u8d39\u7528\uff0c\u800c\u4e0d\u627f\u62c5\u7528\u6237\u7684\u4efb\u4f55\u989d\u5916\u8d39\u7528\u3002</li> <li>\u793e\u533a\u6240\u6709\uff1a Hummingbot\u57fa\u91d1\u4f1a\u662f\u793e\u533a\u6240\u6709\u7684\uff0c\u793e\u533a\u53ef\u4ee5\u901a\u8fc7HBOT\u521b\u5efa\u63d0\u6848\u548c\u6295\u7968\u3002\u591a\u4f59\u7684\u8d44\u91d1\u5b58\u653e\u5728\u56fd\u5e93\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u6295\u7968\u5206\u914d\u7ed9\u5f00\u53d1\u8865\u52a9\u3001\u4ee3\u5e01\u56de\u8d2d\u6216\u793e\u533a\u63d0\u51fa\u7684\u5176\u4ed6\u5021\u8bae\u3002\u6b22\u8fce\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6cbb\u7406\u548cHBOT\u63d0\u6848\u548c\u6295\u7968\u7684\u8fd0\u4f5c\u65b9\u5f0f!</li> </ol>","title":"\u60a8\u4e3a\u4ec0\u4e48\u5e94\u8be5\u652f\u6301\u6211\u4eec\uff1f"},{"location":"support-hummingbot-cn/#_3","text":"<p>\u67d0\u4e9b\u4ea4\u6613\u6240\uff0c\u5982Gate.io\u548cOKX\u5141\u8bb8\u4ed6\u4eec\u7684\u7ecf\u7eaa\u5546\u5408\u4f5c\u4f19\u4f34\u5c06\u4e00\u5b9a\u6bd4\u4f8b\u7684\u8d39\u7528\u4efd\u989d\u5206\u914d\u7ed9\u7528\u6237\u3002 \u5bf9\u4e8e\u5141\u8bb8\u8fd9\u6837\u505a\u7684\u4ea4\u6613\u6240\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06\u6211\u4eec\u603b\u8d39\u7528\u4efd\u989d\u768425%\uff08\u901a\u5e38\u4e3a10%\uff09\u5206\u914d\u7ed9\u7528\u6237\uff0c\u4f5c\u4e3a\u6dfb\u52a0Hummingbot\u7ecf\u7eaa\u5546ID\u7684\u989d\u5916\u5956\u52b1\u3002\u8fd9\u610f\u5473\u7740\uff0c\u4efb\u4f55\u4f7f\u7528\u6211\u4eec\u7684\u63a8\u8350\u94fe\u63a5\u6ce8\u518c\u548c/\u6216\u4f7f\u7528Hummingbot\u7684\u7528\u6237\u5c06\u83b7\u5f97\u989d\u5916\u768410%\u7684\u4ea4\u6613\u8d39\u7528\u6298\u6263</p> <p></p> <p>\u6211\u4eec\u7684\u6536\u5165\uff0c\u6bcf\u6708\u90fd\u4f1a\u5411\u793e\u533a\u62a5\u544a\uff08\u89c1\u62a5\u544a\uff09\uff0c\u8fd9\u8ba9\u6211\u4eec\u80fd\u591f\u7ef4\u6301\u4e00\u652f\u7531\u5de5\u7a0b\u5e08\u3001\u8d28\u91cf\u4fdd\u8bc1\u5206\u6790\u5e08\u3001\u793e\u533a\u7ecf\u7406\u548c\u5176\u4ed6\u4eba\u5458\u7ec4\u6210\u7684\u5168\u804c\u56e2\u961f\uff0c\u4e3a\u5168\u7403Hummingbot\u793e\u533a\u7684\u5f00\u53d1\u8005\u548c\u4ea4\u6613\u8005\u63d0\u4f9b\u652f\u6301\u3002</p>","title":"\u83b7\u5f97\u66f4\u591a\u7684\u8fd4\u4f63"},{"location":"support-hummingbot-cn/#hbot","text":"<p>\u76ee\u524d\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u6536\u5165\u8fd8\u4e0d\u80fd\u5b8c\u5168\u8986\u76d6\u8fd0\u8425\u6210\u672c\uff0c\u6240\u4ee5\u6240\u6709\u7684\u5f00\u53d1\u8005\u8d60\u6b3e\u90fd\u662f\u4ee5HBOT\u4ee3\u5e01\u4e3a\u5355\u4f4d\u3002\u5728\u6211\u4eec\u7684\u73b0\u91d1\u6d41\u8f6c\u6b63\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u63d0\u8bae\u5c06\u4e00\u5b9a\u6bd4\u4f8b\u7684\u8d39\u7528\u7528\u4e8e\u5f00\u53d1\u8005\u8865\u52a9\u3002\u8fd9\u5c06\u5141\u8bb8\u5f00\u53d1\u8005\u8d5a\u53d6\u7a33\u5b9a\u5e01\u800c\u4e0d\u662fHBOT\u3002</p> <ul> <li>\u4fee\u590d\u9519\u8bef</li> <li>\u6dfb\u52a0\u65b0\u7684\u4ea4\u6613\u6240\u8fde\u63a5\u5668</li> <li>\u589e\u52a0\u548c\u6539\u8fdb\u7b56\u7565</li> </ul>","title":"\u7528\u7a33\u5b9a\u5e01\u53d1\u653e\u5f00\u53d1\u8865\u52a9\u91d1\uff0c\u800c\u4e0d\u662fHBOT"},{"location":"support-hummingbot-cn/#_4","text":"<p>Hummingbot\u57fa\u91d1\u4f1a\u7684\u4f7f\u547d\u8fd8\u5305\u62ec\u6559\u80b2\u5927\u5bb6\u5982\u4f55\u638c\u63e1\u9ad8\u9891\u4ea4\u6613\uff08HFT\uff09\uff0c\u56e0\u4e3a\u6211\u4eec\u76f8\u4fe1\u8fd9\u662f\u5e2e\u52a9\u5927\u5bb6\u5b9e\u73b0\u8d22\u52a1\u81ea\u7531\u7684\u6700\u4f73\u9014\u5f84\uff01</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u6b63\u5728\u63a8\u51fa\u4e00\u4e2a\u514d\u8d39\u7684\u5f00\u53d1\u8005\u8bad\u7ec3\u8425\uff08Hummingbot Botcamp\uff09\uff0c\u6559\u5927\u5bb6\u5982\u4f55\u7528Hummingbot\u521b\u5efa\u81ea\u5df1\u7684\u4ea4\u6613\u673a\u5668\u4eba\u3002</p> <p>\u66f4\u591a\u7684\u8d44\u6e90\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u66f4\u591a\u8fd9\u6837\u7684\u9879\u76ee\uff0c\u4ee5\u53ca\u652f\u6301\u793e\u533a\u521b\u5efa\u5176\u4ed6\u5de5\u5177\u548c\u8d44\u6e90\uff0c\u5982\u4ea4\u6613\u5458\u5206\u4eab\u4f1a\u3001TradingView\u96c6\u6210\u548cStreamLit\u4eea\u8868\u76d8\u3002</p> <p>\u672a\u6765\u7684\u4e3e\u63aa\u53ef\u80fd\u5305\u62ec\u7528\u6237\u751f\u6210\u7684\u7b56\u7565\u5e02\u573a\uff0c\u4ee5\u53ca\u4ea4\u6613\u7ade\u8d5b!</p> <p>\u53ea\u9700\u8981\u4e0d\u523010\u5206\u949f\u7684\u65f6\u95f4\u6765\u8bbe\u7f6e\uff0c\u60a8\u5c31\u53ef\u4ee5\u652f\u6301\u6211\u4eec\u548c\u6211\u4eec\u7684\u4f7f\u547d\u3002\u6211\u4eec\u8def\u7ebf\u56fe\u7684\u672a\u6765\u53d6\u51b3\u4e8e\u60a8\u4eec\u6240\u6709\u4eba\u3002</p>","title":"\u672a\u6765\u7684\u793e\u533a\u63d0\u8bae"},{"location":"support-hummingbot-cn/#hummingbot_1","text":"<p>\u4f7f\u7528\u6211\u4eec\u7684\u63a8\u8350\u4ee3\u7801\u6ce8\u518c\u5e01\u5b89\uff0c\u6211\u4eec\u5c06\u6536\u5230\u60a8\u652f\u4ed8\u7684\u4ee5\u4e0b\u90e8\u5206\u4ea4\u6613\u8d39\u7528\uff0c\u5bf9\u60a8\u6765\u8bf4\u662f\u96f6\u6210\u672c\u3002</p>    % \u4ea4\u6613\u8d39\u8fd4\u8fd8 \u5e01\u5b89\u73b0\u8d27 \u5e01\u5b89\u671f\u8d27     Hummingbot\u57fa\u91d1\u4f1a 45% 30%    <p>\u76ee\u524d\uff0c\u6211\u4eec\u6b63\u5728\u4e0e\u5e01\u5b89\u8ba8\u8bba\u5982\u4f55\u5411\u7528\u6237\u5206\u4eab\u4e00\u90e8\u5206\uff0c\u6b63\u5982\u6211\u4eec\u5df2\u7ecf\u4e3aGate.io\u3001OKX\u548c\u5176\u4ed6\u4ea4\u6613\u6240\u505a\u7684\u90a3\u6837\u3002</p>","title":"\u5728\u5e01\u5b89\u4ea4\u6613\u6240\u652f\u6301Hummingbot"},{"location":"support-hummingbot-cn/#hummingbot_2","text":"<p>\u4e0b\u9762\uff0c\u6211\u4eec\u5411\u60a8\u4ecb\u7ecd\uff0c\u5982\u679c\u60a8\u4f7f\u7528Hummingbot\u7684\u6700\u65b0\u7248\u672c\u5728\u5e01\u5b89\u4e0a\u8fd0\u884c\u673a\u5668\u4eba\uff0c\u5982\u4f55\u652f\u6301\u6211\u4eec\u3002</p>","title":"\u5bf9\u4e8eHummingbot\u7528\u6237"},{"location":"support-hummingbot-cn/#_5","text":"<p>\u4e3a\u4e86\u4f7f\u60a8\u548c\u6211\u4eec\u90fd\u80fd\u83b7\u5f97\u8d39\u7528\u5206\u4eab\u56de\u6263\uff0c\u60a8\u9700\u8981\u7528\u8fd9\u4e9b\u63a8\u8350\u94fe\u63a5\u6ce8\u518c\u4e00\u4e2a\u65b0\u8d26\u6237\u3002</p> <ul> <li>binance.com: https://www.binance.com/en/register?ref=FQQNNGCD</li> <li>binance.com \u671f\u8d27: https://www.binance.com/en/futures/ref/hummingbot</li> </ul>","title":"\u4f7f\u7528\u6211\u4eec\u7684\u63a8\u8350\u94fe\u63a5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e01\u5b89\u8d26\u6237"},{"location":"support-hummingbot-cn/#2-api","text":"<p>\u4e4b\u540e\uff0c\u6309\u7167\u8fd9\u4e2a\u5e01\u5b89\u6307\u5357 \u521b\u5efa\u4e00\u4e2aAPI\u5bc6\u94a5\u3002</p> <p>\u5728\u521b\u5efaAPI\u5bc6\u94a5\u65f6\uff0c\u5982\u679c\u60a8\u5728\u73b0\u8d27\u5e02\u573a\u4ea4\u6613\uff0c\u8bf7\u786e\u4fdd\u542f\u7528\u73b0\u8d27\u548c\u4fdd\u8bc1\u91d1\u4ea4\u6613\uff0c\u5982\u679c\u60a8\u5728\u4ea4\u6613\u6c38\u4e45\u671f\u8d27\uff0c\u8bf7\u786e\u4fdd\u542f\u7528\u671f\u8d27\u3002</p>","title":"2. \u521b\u5efa\u65b0\u7684API\u5bc6\u94a5"},{"location":"support-hummingbot-cn/#3-hummingbotapi","text":"<p>\u5728Hummingbot\u5185\u90e8\uff0c\u8fd0\u884c<code>connect</code>\u547d\u4ee4\u6765\u6dfb\u52a0\u4f60\u7684\u65b0API\u5bc6\u94a5\u3002\u73b0\u5728\uff0c\u4f60\u8fdb\u884c\u7684\u6bcf\u4e00\u7b14\u4ea4\u6613\u90fd\u4f1a\u4e0eHummingbot\u57fa\u91d1\u4f1a\u5206\u4eab\u4e00\u90e8\u5206\u4ea4\u6613\u8d39\u7528\u3002</p>","title":"3. \u5411Hummingbot\u6dfb\u52a0API\u5bc6\u94a5"},{"location":"support-hummingbot-cn/#hummingbot_3","text":"<p></p> <p>\u4ece\u6211\u4eec\u7684\u516c\u5171\u4eea\u8868\u76d8\u4e2d\uff0c\u6211\u4eec\u77e5\u9053\u5f88\u5927\u4e00\u90e8\u5206\u62a5\u544a\u7684\u4ea4\u6613\u91cf\u6765\u81ea1600\u591a\u4e2aHummingbot\u7684\u5206\u53c9\u3002\u4f5c\u4e3a\u4e00\u4e2a\u81ea\u7531\u548c\u516c\u5f00\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u6211\u4eec\u9f13\u52b1\u4efb\u4f55\u4eba\u5206\u53c9\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u8fd9\u6709\u52a9\u4e8e\u6211\u4eec\u5b9e\u73b0\u9ad8\u9891\u4ea4\u6613\u6c11\u4e3b\u5316\u7684\u66f4\u5927\u4f7f\u547d\u3002</p> <p>\u7136\u800c\uff0c\u7531\u4e8e\u4ea4\u6613\u6240\u8d39\u7528\u5206\u6210\u534f\u8bae\u7ef4\u6301\u4e86\u6211\u4eec\u4f5c\u4e3a\u975e\u8425\u5229\u6027\u57fa\u91d1\u4f1a\u7684\u6d3b\u52a8\uff0c\u6211\u4eec\u8bf7\u6c42\u4f7f\u7528Hummingbot\u5206\u53c9\u7684\u5f00\u53d1\u8005\uff0c\u4ee5\u53ca\u793e\u533a\u4e2d\u5176\u4ed6\u8fd0\u884c\u5176\u81ea\u5b9a\u4e49\u4ea4\u6613\u673a\u5668\u4eba\u7684\u4eba\u5728\u4e0b\u5355\u65f6\u8003\u8651\u5728\u5176\u4ee3\u7801\u4e2d\u52a0\u5165Hummingbot \u7ecf\u7eaa\u5546ID\u3002</p> <p>\u4ee5\u4e0b\u662f\u5982\u4f55\u5c06\u6211\u4eec\u7684\u7ecf\u7eaa\u5546Id\u6dfb\u52a0\u5230\u60a8\u7684\u5e01\u5b89\u673a\u5668\u4eba\u4ee3\u7801\u4e2d\u3002</p>","title":"\u7528\u4e8eHummingbot\u7684\u5206\u53c9\u548c\u5b9a\u5236\u673a\u5668\u4eba"},{"location":"support-hummingbot-cn/#1-api","text":"<p>\u6309\u7167\u4e0a\u8ff0\u9488\u5bf9Hummingbot\u7528\u6237\u7684\u6b65\u9aa4\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e01\u5b89\u8d26\u6237\u548cAPI\u5bc6\u94a5\uff0c\u56e0\u4e3a\u5e01\u5b89\u53ea\u4e0e\u6211\u4eec\u5206\u4eab\u4f7f\u7528\u6211\u4eec\u7684\u63a8\u8350\u94fe\u63a5\u521b\u5efa\u7684\u8d26\u6237\u7684\u8d39\u7528\u3002\u5176\u4ed6\u5927\u591a\u6570\u4ea4\u6613\u6240\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\u3002</p>","title":"1. (\u4ec5\u9650\u5e01\u5b89\uff09\u521b\u5efa\u4e00\u4e2a\u65b0\u8d26\u6237\u548cAPI\u5bc6\u94a5"},{"location":"support-hummingbot-cn/#2-id","text":"<p>\u4e0b\u9762\uff0c\u6211\u4eec\u63d0\u4f9b\u5982\u4f55\u6dfb\u52a0Hummingbot \u7ecf\u7eaa\u5546ID\u7684\u8bf4\u660e\u3002\u6b32\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003\u5e01\u5b89\u6587\u6863\u4e2d\u7684\u5982\u4f55\u8bbe\u7f6eAPI \u7ecf\u7eaa\u5546 ID\u3002</p> <p>\u5e01\u5b89\u73b0\u8d27</p> <ol> <li>\u8f6c\u5230\u60a8\u7684\u4ee3\u7801\u4e2d\u5411\u4ea4\u6613\u6240\u53d1\u9001\u8ba2\u5355\u7684\u65b9\u6cd5\u6216\u51fd\u6570</li> <li>\u5728\u8bf7\u6c42\u6b63\u6587\u4e2d\u627e\u5230\u53c2\u6570`newClientOrderId'\u3002</li> <li>\u68c0\u67e5\u60a8\u53d1\u9001\u7684\u8ba2\u5355ID\u662f\u5426\u6709\u8fd9\u4e2a\u524d\u7f00\u3002<code>x-XEKWYICX</code></li> <li>\u786e\u4fdd<code>newClientOrderId</code>\u7684\u957f\u5ea6\u6700\u591a\u4e3a32\u4e2a\u5b57\u7b26\u3002</li> </ol> <p>\u53c2\u8003\u4ee3\u7801\u793a\u4f8b</p> <p>\u5e01\u5b89\u671f\u8d27</p> <ol> <li>\u8f6c\u5230\u60a8\u7684\u4ee3\u7801\u4e2d\u5411\u4ea4\u6613\u6240\u53d1\u9001\u8ba2\u5355\u7684\u65b9\u6cd5\u6216\u51fd\u6570</li> <li>\u5728\u8bf7\u6c42\u6b63\u6587\u4e2d\u627e\u5230\u53c2\u6570 <code>newClientOrderId</code>\u3002</li> <li>\u68c0\u67e5\u60a8\u53d1\u9001\u7684\u8ba2\u5355ID\u662f\u5426\u6709\u8fd9\u4e2a\u524d\u7f00\u3002<code>x-3QreWesy</code></li> <li>\u786e\u4fdd<code>newClientOrderId</code>\u7684\u957f\u5ea6\u6700\u591a\u4e3a32\u4e2a\u5b57\u7b26\u3002</li> </ol> <p>\u53c2\u8003\u4ee3\u7801\u793a\u4f8b</p>  <p>\u8d34\u58eb</p> <p>\u5982\u679c\u60a8\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u9700\u8981\u5e2e\u52a9\uff0c\u4e0d\u8981\u72b9\u8c6b\uff0c\u8bf7\u5728Discord\u7684#developer-chat\u9891\u9053\u4e0e\u6211\u4eec\u8054\u7cfb\uff0c\u6216\u8005\u7ed9\u6211\u4eec\u53d1\u90ae\u4ef6\u5230federico@hummingbot.org\u3002</p>","title":"2. \u5728\u60a8\u7684\u4ee3\u7801\u5e93\u4e2d\u52a0\u5165\u6211\u4eec\u7684\u7ecf\u7eaa\u4ebaID"},{"location":"support-hummingbot-cn/#hummingbot_4","text":"<p>\u7531\u4e8e\u5927\u591a\u6570\u4ea4\u6613\u6240\u4e0eHummingbot\u57fa\u91d1\u4f1a\u7684\u5171\u4eab\u8d39\u7528\u53ea\u57fa\u4e8e\u7ecf\u7eaa\u4ebaID\uff0c\u6240\u4ee5\u60a8\u6240\u8981\u505a\u7684\u5c31\u662f\u8fd0\u884cHummingbot\u7684\u6700\u65b0\u7248\u672c\u3002</p> <p>\u5bf9\u4e8e\u8fd0\u884cHummingbot\u65e7\u7248\u672c\u6216\u5206\u53c9\u7248\u672c\u7684\u7528\u6237\uff0c\u60a8\u53ef\u4ee5\u5728\u60a8\u7684\u4ee3\u7801\u4e2d\u52a0\u5165\u6211\u4eec\u7684\u7ecf\u7eaa\u5546ID\uff0c\u4ee5\u6b64\u6765\u652f\u6301\u6211\u4eec\u3002</p> <p>\u4e0d\u540c\u7684\u4ea4\u6613\u6240\u6709\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u5904\u7406\u7ecf\u7eaa\u5546ID\u3002</p> <ol> <li>\u8fdb\u5165\u4e0b\u9762\u7684Hummingbot \u7ecf\u7eaa\u5546IDs\u8868</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u4ea4\u6613\u6240\uff0c\u8bf7\u53c2\u9605\u5e38\u91cf\u6587\u4ef6\uff0c\u4e86\u89e3Hummingbot\u4ee3\u7801\u5e93\u4e2d\u5982\u4f55\u5b9a\u4e49\u7ecf\u7eaa\u4ebaID\u3002</li> <li>\u68c0\u67e5\u53c2\u8003\u4ee3\u7801\u6837\u672c\u680f\uff0c\u4e86\u89e3Hummingbot\u4ee3\u7801\u5e93\u4e2d\u5982\u4f55\u5c06\u7ecf\u7eaa\u5546ID\u9644\u52a0\u5230\u8ba2\u5355\u4e0a\u3002</li> </ol> <p> Hummingbot \u7ecf\u7eaa\u5546IDs</p>  <p>\u8d34\u58eb</p> <p>\u5982\u679c\u60a8\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u9700\u8981\u5e2e\u52a9\uff0c\u4e0d\u8981\u72b9\u8c6b\uff0c\u8bf7\u5728Discord\u7684#developer-chat\u9891\u9053\u4e0e\u6211\u4eec\u8054\u7cfb\uff0c\u6216\u8005\u7ed9\u6211\u4eec\u53d1\u90ae\u4ef6\u5230federico@hummingbot.org\u3002</p>","title":"\u5728\u5176\u4ed6\u4ea4\u6613\u6240\u652f\u6301Hummingbot"},{"location":"support-hummingbot-cn/#faq","text":"","title":"FAQ"},{"location":"support-hummingbot-cn/#hummingbotid","text":"<p>\u60a8\u6240\u9700\u8981\u505a\u7684\u5c31\u662f\u6839\u636e\u60a8\u7528\u6765\u4ea4\u6613\u7684\u4ea4\u6613\u6240\uff0c\u6dfb\u52a0\u4e00\u6bb5\u4ee3\u7801\uff08\u5982\u4e0a\u6240\u5217\uff09\u3002\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\u5141\u8bb8Hummingbot\u5728HTTP\u8bf7\u6c42\u4e2d\u6dfb\u52a0\u7279\u5b9a\u7684\u5143\u6570\u636e\uff0c\u8fd9\u6837\u4ea4\u6613\u6240\u5c31\u80fd\u8bc6\u522b\u51fa\u8ba2\u5355\u6765\u81ea\u4f7f\u7528Hummingbot\u4ee3\u7801\u5e93\u7684\u7528\u6237\u3002</p>","title":"\u5982\u4f55\u6dfb\u52a0Hummingbot\u7ecf\u7eaa\u4ebaID\uff1f"},{"location":"support-hummingbot-cn/#id","text":"<p>\u6bcf\u6b21\u60a8\u4f7f\u7528Hummingbot\u63d0\u4ea4\u8ba2\u5355\u65f6\uff0c\u5b83\u90fd\u4f1a\u5411\u4ea4\u6613\u6240\u7684API\u53d1\u9001\u4e00\u4e2aHTTP\u8bf7\u6c42\u3002\u8ba2\u5355\u4fe1\u606f\u653e\u5728\u6b63\u6587\u4e2d\uff0c\u8ba4\u8bc1\u4fe1\u606f\u653e\u5728HTTP\u8bf7\u6c42\u7684\u5934\u6587\u4ef6\u4e2d\uff08\u6bcf\u4e2a\u4ea4\u6613\u6240\u7684\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u4e0d\u540c\uff09\u3002</p> <p>\u4e3a\u4e86\u8ba9\u4ea4\u6613\u6240\u8bc6\u522b\u8ba2\u5355\u7684HTTP\u8bf7\u6c42\u662f\u6765\u81ea\u4f7f\u7528Hummingbot\u4ee3\u7801\u5e93\u7684\u7528\u6237\uff0c\u5b83\u68c0\u67e5HTTP\u8bf7\u6c42\u4e2d\u7684Hummingbot\u6807\u8bc6\u7b26\u7684\u5143\u6570\u636e\u3002\u6bcf\u4e2a\u4ea4\u6613\u6240\u7684\u5de5\u4f5c\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\uff0c\u4ed6\u4eec\u5b9e\u73b0\u8fd9\u4e00\u673a\u5236\u7684\u65b9\u5f0f\u53ef\u4ee5\u5f52\u7eb3\u4e3aHTTP\u8bf7\u6c42\u4e2d\u7684\u4e09\u5927\u7c7b\u5143\u6570\u636e\u3002</p> <p>\u8ba2\u5355ID</p> <ul> <li>Hummingbot\u53ef\u80fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u7279\u5b9a\u7684\u8ba2\u5355ID\uff0c\u4ea4\u6613\u6240\u80fd\u591f\u8bc6\u522b\u4e3aHummingbot\u8ba2\u5355\uff0c\u5e76\u5728HTTP\u8bf7\u6c42\u7684\u6b63\u6587\u4e2d\u53d1\u9001\u3002</li> <li>\u6709\u4e9b\u4ea4\u6613\u6240\u8981\u6c42\u5c06\u63a8\u8350\u4ee3\u7801\u4f5c\u4e3a\u8be5\u8ba2\u5355ID\u7684\u524d\u7f00\u3002</li> <li>\u4f8b\u5982: \u5e01\u5b89</li> </ul> <p>Header</p> <ul> <li>\u4e00\u4e9b\u4ea4\u6613\u6240\u53ef\u80fd\u4f1a\u5728HTTP\u8bf7\u6c42\u4e2d\u8981\u6c42\u4e00\u4e2a\u7279\u6b8a\u7684Hummingbot\u6807\u5934</li> <li>\u4f8b\u5982: ByBit</li> </ul> <p>body\u4e2d\u7684\u81ea\u5b9a\u4e49\u53c2\u6570</p> <ul> <li>\u4e00\u4e9b\u4ea4\u6613\u6240\u5728\u5143\u6570\u636e\u4e2d\u521b\u5efa\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u53c2\u6570\u6765\u8bc6\u522b\u8ba2\u5355</li> </ul>","title":"\u5bf9\u4e8e\u4e0d\u540c\u7684\u4ea4\u6613\u6240\uff0c\u7ecf\u7eaa\u5546ID\u7a76\u7adf\u5982\u4f55\u8fd0\u4f5c\uff1f"},{"location":"support-hummingbot-cn/#idhummingbot","text":"<p>\u6211\u4eec\u53ea\u662f\u66f4\u65b0\u60a8\u7684\u673a\u5668\u4eba\u4e3a\u5e01\u5b89\u53d1\u9001\u8ba2\u5355\u7684HTTP\u8bf7\u6c42\u7684\u5143\u6570\u636e\uff0c\u4ee5\u68c0\u67e5\u8be5\u8ba2\u5355\u662f\u5426\u6765\u81ea\u4f7f\u7528Hummingbot\u4ee3\u7801\u5e93\u7684\u7528\u6237\u3002\u6211\u4eec\u4e5f\u53ea\u80fd\u901a\u8fc7\u4ee3\u7801\u5b9e\u73b0\u4e86\u89e3\u60a8\u5728\u6bcf\u4e2a\u4ea4\u6613\u6240\u7684\u8ba2\u5355\u91cf\u3002</p>","title":"\u6dfb\u52a0\u7ecf\u7eaa\u5546ID\u540e\uff0cHummingbot\u662f\u5426\u53ef\u4ee5\u4e3a\u5176\u4ed6\u76ee\u7684\u8fdb\u5165\u6211\u7684\u8d26\u6237\uff1f"},{"location":"support-hummingbot-cn/#hummingbothttp","text":"<p>\u9075\u5faaHummingbot \u7ecf\u7eaa\u5546IDs\u8868\u4e2d\u7684\u8bf4\u660e\u3002</p> <p> Hummingbot \u7ecf\u7eaa\u5546IDs</p> <p>\u5982\u679c\u4e0d\u6210\u529f\uff0c\u8bf7\u5728Discord\u7684#developer-chat\u9891\u9053\u4e0e\u6211\u4eec\u8054\u7cfb\uff0c\u6216\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u81f3 federico@hummingbot.org\u3002</p>","title":"\u5982\u679c\u6211\u6709\u4e00\u4e2a\u975e\u5e38\u8001\u7684Hummingbot\u7248\u672c\uff0cHTTP\u8bf7\u6c42\u4e2d\u7684\u5143\u6570\u636e\u8ddf\u8e2a\u7684\u5b9e\u65bd\u4ee3\u7801\u903b\u8f91\u4e0d\u5b58\u5728\uff0c\u600e\u4e48\u529e\uff1f"},{"location":"support-hummingbot/","text":"<p>English version | \u4e2d\u6587\u7248</p>","title":"Support Hummingbot and Get Fee Rebates"},{"location":"support-hummingbot/#intro","text":"<p>Thank you for your support for the Hummingbot codebase! We\u2019d love to have you all support us by creating exchange accounts using our referral codes, or if you're a developer, adding our brokerID to your custom bots.  </p> <p>This supports our work at the not-for-profit Hummingbot Foundation and provides you with increased fee share rebates as well! Our primary revenue stream are exchange broker programs, in which we partner with exchanges that share a portion of the trading fees you pay with us, at zero cost to you. For exchanges that allow it, we remit 25% of our total fee share with users.</p>","title":"Intro"},{"location":"support-hummingbot/#why-should-you-support-us","text":"<p>Hummingbot is different from other trading bots:</p> <ol> <li>Open Source: Our mission is democratize high-frequency trading (HFT) and make sophisticated trading tools and algorithms accessible to everyone in the world! In order to achieve this mission, we\u2019ve decided to make our exchange connectors and strategies open source so that any one can benefit from and contribute to the codebase.</li> <li>Free: To keep keep Hummingbot open source and free, we have fee share agreements with exchange partners, in which the exchanges share a portion of the trading fees, without bearing any additional fees from the user.</li> <li>Community Owned: Hummingbot Foundation is community owned, where the community can create proposals and vote through HBOT. Excess Funds are held in treasury and can be allocated via voting towards dev grants, token buybacks, or other initiatives that the community proposes. Feel free to learn more about how Governance and HBOT proposals &amp; voting works!</li> </ol>","title":"Why should you support us?"},{"location":"support-hummingbot/#get-increased-fee-rebates","text":"<p>Certain exchanges such as Gate.io and OKX allow their broker partners to allocate a certain percentage of their fee share to users.  For exchanges that allow for this, we already allocate 25% of our total fee share (typically 10%) to users as an additional incentive to add the Hummingbot brokerID. This means that any users who sign up using our referral link and/or use Hummingbot will get an additional 10% off their trading fees!</p> <p></p> <p>Our revenues, which we report to the community every month (see Reporting) lets us maintain a full-time, globally distributed team of engineers, quality assurance analysts, community managers, and others who support the global Hummingbot community of developers and traders.</p>","title":"Get increased fee rebates"},{"location":"support-hummingbot/#dev-grants-in-stablecoins-not-hbot","text":"<p>Currently, all developer grants are in HBOT tokens since our revenues are not quite covering operational costs. After we are cash flow positive, we will propose that a certain percentage of our fees be directed toward developer grants. This would allow developers to earn stablecoins rather than HBOT for:</p> <ul> <li>Fixing bugs</li> <li>Adding new exchange connectors</li> <li>Adding and improving strategies</li> </ul>","title":"Dev grants in stablecoins, not HBOT"},{"location":"support-hummingbot/#future-community-initiatives","text":"<p>Hummingbot Foundation\u2019s mission also includes educating everyone on how to master high-frequency trading (HFT) because we believe its the best way to help everyone achieve financial freedom!</p> <p>For example, we are launching a free developer bootcamp (Hummingbot Botcamp) to teach everyone how to create their own trading bots with Hummingbot.</p> <p>More resources means that we can create more program like this, as well as supporting the community in creating other tools and resources like trader sharing sessions, TradingView integrations, and StreamLit dashboards.</p> <p>Future initiatives may include a user-generated strategies marketplace, and trading competitions!</p> <p>It just takes less then 10 minutes to set this up, and you\u2019ll be able to support us and our mission. The future of our roadmap depends on you all.</p>","title":"Future community initiatives"},{"location":"support-hummingbot/#supporting-hummingbot-on-binance","text":"<p>Use our referral code to sign up for Binance, and we will receive the following portion of trading fees you pay, at zero cost to you.</p>    % Trading fee rebate Binance Spot Binance Futures     Hummingbot Foundation 45% 30%    <p>Currently, we are discussing with Binance how to share a portion to users, as we already do for Gate.io, OKX, and other exchanges.</p>","title":"Supporting Hummingbot on Binance"},{"location":"support-hummingbot/#for-hummingbot-users","text":"<p>Below, we show you how to support us if you use the latest versions of Hummingbot to run bots on Binance:</p>","title":"For Hummingbot users"},{"location":"support-hummingbot/#1-create-a-new-binance-account-using-our-referral-link","text":"<p>In order for both you and us to get fee share rebates, you will need to sign up for a new account with these referral links:</p> <ul> <li>Binance.com: https://www.binance.com/en/register?ref=FQQNNGCD</li> <li>Binance.com Futures: https://www.binance.com/en/futures/ref/hummingbot</li> </ul>","title":"1. Create a new Binance account using our referral link"},{"location":"support-hummingbot/#2-create-new-api-keys","text":"<p>Afterwards, create an API key, following this Binance guide.</p> <p>When creating the API key, make sure to  Enable Spot &amp; Margin Trading if you are trading on spot markets, as well as  Enable Futures if you are trading perpetual futures.</p>","title":"2. Create new API keys"},{"location":"support-hummingbot/#3-add-api-keys-to-hummingbot","text":"<p>Inside Hummingbot, run the <code>connect</code> command to add your new API keys. Now, every trade you perform will share a portion of your trading fees with Hummingbot Foundation.</p>","title":"3. Add API keys to Hummingbot"},{"location":"support-hummingbot/#for-hummingbot-forks-and-custom-bots","text":"<p></p> <p>From our public dashboard, we are aware that a large portion of reported trading volumes comes from the 1600+ Hummingbot forks out there. As an free and public open source project, we encourage anyone to fork our code because it contributes to our greater mission to democratize high-frequency trading.</p> <p>However, since exchange fee share agreement sustain our activities as a not-for-profit foundation, we ask that developers who use Hummingbot forks, as well as others in the community who run their custom trading bots consider adding the Hummingbot brokerID to their code when placing orders.</p> <p>Here is how you can add our brokerId into your bot code for Binance:</p>","title":"For Hummingbot forks and custom bots"},{"location":"support-hummingbot/#1-binance-only-create-a-new-account-and-api-keys","text":"<p>Follow the steps above in For Hummingbot users to create a new Binance account and API keys, since Binance only shares fees with us for accounts that are created using our referral links. Most other exchanges don't impose this requirement.</p>","title":"1. (Binance only) Create a new account and API keys"},{"location":"support-hummingbot/#2-add-our-brokerid-to-your-codebase","text":"<p>Below, we provide instructions for how you can add the Hummingbot brokerID. For more information, refer to How to Set Up the API Broker ID in the Binance documentation.</p> <p>Binance Spot</p> <ol> <li>Go to the method or function of your code that is sending the orders to the exchange</li> <li>Find the param <code>newClientOrderId</code> in the body of the request</li> <li>Check that the order id that you are sending has this prefix: <code>x-XEKWYICX</code></li> <li>Ensure that the length of <code>newClientOrderId</code> is a maximum of 32 char</li> </ol> <p>Reference Code Sample</p> <p>Binance Futures</p> <ol> <li>Go to the method or function of your code that is sending the orders to the exchange</li> <li>Find the param <code>newClientOrderId</code> in the body of the request</li> <li>Check that the order id that you are sending has this prefix: <code>x-3QreWesy</code></li> <li>Ensure that the length of <code>newClientOrderId</code> is a maximum of 32 char</li> </ol> <p>Reference Code Sample</p>  <p>Tip</p> <p>If you need help with this process, don't hesitate to reach out to us on the #developer-chat channel in Discord or send us an email to federico@hummingbot.org.</p>","title":"2. Add our brokerID to your codebase"},{"location":"support-hummingbot/#supporting-hummingbot-on-other-exchanges","text":"<p>Since most exchange share fees with Hummingbot Foundation based on the brokerID only, all you have to do to run the latest versions of Hummingbot.</p> <p>For users running older versions of Hummingbot or forks, here is how you can support us by adding our brokerID to your code.</p> <p>Different exchanges have different ways of handling the BrokerID.</p> <ol> <li>Go to the Hummingbot BrokerIDs table below</li> <li>For each exchange, see Constants File for how the brokerID is defined in the Hummingbot codebase</li> <li>Check the Reference Code Sample column to how the brokerID is attached to orders in the Hummingbot codebase</li> </ol> <p> Hummingbot BrokerIDs</p>  <p>Tip</p> <p>If you need help with this process, don't hesitate to reach out to us on the #developer-chat channel in Discord or send us an email to federico@hummingbot.org.</p>","title":"Supporting Hummingbot on other exchanges"},{"location":"support-hummingbot/#faq","text":"","title":"FAQ"},{"location":"support-hummingbot/#how-can-you-add-a-hummingbot-brokerid","text":"<p>All you need to do is to add a snippet of code (as listed above) depending on the exchange that you are using for trading. This code snippet allows Hummingbot to add specific metadata to the HTTP requests so that the exchanges are able to identify that the order comes from a user using the Hummingbot codebase.</p>","title":"How can you add a Hummingbot brokerID?"},{"location":"support-hummingbot/#how-does-the-brokerid-actually-work-for-different-exchanges","text":"<p>Every time you use Hummingbot to submits an order, it sends an HTTP request to the API of the exchange. The information of the order are placed in the body and the authentication in the headers of the HTTP request (exact implementation differs per exchange).</p> <p>In order for the exchange to identify that the HTTP request for the order is coming from a user who is using the Hummingbot codebase, it checks for the metadata in the HTTP request for a Hummingbot identifier. It works slightly differently for every exchange, the way they implemented the mechanism can be grouped into three major categories of metadata within an HTTP request:</p> <p>Order ID</p> <ul> <li>Hummingbot may need to create a specific order id that the exchange is able to recognize as a Hummingbot order that is sent in the body of an HTTP request.</li> <li>Some exchanges ask to put a referral code as a prefix in this order ID</li> <li>Example: Binance</li> </ul> <p>Header</p> <ul> <li>Some exchange may request a special Hummingbot header in the HTTP request</li> <li>Example: ByBit</li> </ul> <p>Custom parameter in body</p> <ul> <li>Some exchanges create their own custom parameters in the metadata to identify the order</li> </ul>","title":"How does the brokerID actually work for different exchanges?"},{"location":"support-hummingbot/#after-adding-the-brokerid-can-hummingbot-get-access-to-my-account-for-other-purposes","text":"<p>No. We are only updating the metadata of the HTTP request of which your bot is sending orders for Binance to check that the order comes from a user using the Hummingbot codebase. We are also only able to know your order volume for each exchange through the code implementation.</p>","title":"After adding the brokerID, can Hummingbot get access to my account for other purposes?"},{"location":"support-hummingbot/#what-if-i-have-a-very-old-version-of-hummingbot-where-the-implementation-code-logic-for-the-metadata-tracking-in-the-http-request-does-not-exist","text":"<p>Follow the instructions in the Hummingbot BrokerIDs table.</p> <p> Hummingbot BrokerIDs</p> <p>If it doesn\u2019t work, reach out to us on the #developer-chat channel in Discord or email federico@hummingbot.org.</p>","title":"What if I have a very old version of Hummingbot where the implementation code logic for the metadata tracking in the HTTP request does not exist?"},{"location":"troubleshooting/","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#installation","text":"","title":"Installation"},{"location":"troubleshooting/#system-has-not-been-booted-with-systemd-as-init-system-pid-1-cant-operate","text":"<p></p> <p>If you are trying to install Docker on a WSL system without Docker Desktop you'll get the above error after running the install script. To create a new Hummingbot instance open a WSL (Ubuntu) terminal and run <code>sudo dockerd</code> and leave the window running. Open a second terminal and run the following:</p> <pre><code># 1) Download Hummingbot install, start, and update script\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/create.sh\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/start.sh\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/update.sh\n\n# 2) Enable script permissions\nchmod a+x *.sh\n\n# 3) Create a hummingbot instance\n./create.sh\n</code></pre>","title":"System has not been booted with systemd as init system (PID 1). Can't operate"},{"location":"troubleshooting/#source-modulenotfounderror","text":"<pre><code>ModuleNotFoundError: No module named 'hummingbot.market.market_base'\nroot - ERROR - No module named\n\u2018hummingbot.strategy.pure_market_making.inventory_skew_single_size_sizing_delegate\u2019\n(See log file for stack trace dump)\n</code></pre> <p>Solution 1: exit Hummingbot to compile and restart using these commands:</p> <pre><code>conda activate hummingbot\n./compile\nbin/hummingbot.py\n</code></pre> <p>Solution 2: make sure you have conda section in ~/.bashrc. Run conda init if it is not there. Explanation: if you have custom PATH defined in ~/.bashrc, supplied scripts (./compile etc) may pick wrong python binary, causing different errors.</p>","title":"Source: ModuleNotFoundError"},{"location":"troubleshooting/#source-syntaxerror-invalid-syntaxerror","text":"<pre><code>File \"bin/hummingbot.py\", line 40\n  def detect_available_port(starting_port: int) -&gt; int:\n                                           ^\nSyntaxError: invalid syntax\n</code></pre>","title":"Source: SyntaxError invalid SyntaxError"},{"location":"troubleshooting/#source-conda-command-not-found","text":"<pre><code>$ conda\n-bash: conda: command not found\n</code></pre> <p>If you have just installed conda, close terminal and reopen a new terminal to update the command line's program registry.</p> <p>If you use <code>zshrc</code> or another shell other than <code>bash</code>, see install dependencies (https://hummingbot.org/installation/source/#xcode-command-line-tools)</p>","title":"Source: conda command not found"},{"location":"troubleshooting/#docker-package-dockerio-has-no-installation-candidate","text":"<p></p> <p>Install Docker using get.docker.com script as an alternative. Install curl tool then download and run get.docker.com script.</p> <pre><code>apt-get install curl\ncurl -sSL https://get.docker.com/ | sh\n</code></pre> <p>Allow docker commands without requiring sudo prefix (optional).</p> <pre><code>sudo usermod -a -G docker $USER\n</code></pre>","title":"Docker: Package 'docker.io' has no installation candidate"},{"location":"troubleshooting/#docker-permission-denied-after-docker-installation","text":"<pre><code>docker: Got permission denied while trying to connect to the Docker daemon socket at\nunix:///var/run/docker.sock: Post\nhttp://%2Fvar%2Frun%2Fdocker.sock/v1.39/containers/create?name=hummingbot_instance:\ndial unix /var/run/docker.sock: connect: permission denied.\n</code></pre> <p>Exit from your virtual machine and restart.</p>","title":"Docker: Permission denied after Docker installation"},{"location":"troubleshooting/#docker-how-to-stop-active-container","text":"<p>You need to run <code>docker ps -a</code> to get the list of containers available. Then you can do the following,</p> <ol> <li>Locate the container id of the bot you want to stop</li> <li>Run <code>docker container stop [container-id]</code></li> </ol> <p></p>  <p>Note</p> <p>Please be advised this will force close the bot from running on Docker. This means that this does not stop the outstanding orders from the HB client. The commands <code>stop</code> and <code>exit</code> is the right way to cancel orders.</p>","title":"Docker: How to stop active container?"},{"location":"troubleshooting/#operation","text":"","title":"Operation"},{"location":"troubleshooting/#amm-arbitrage-strategy-is-not-working","text":"<p>Some few important things to check:</p> <ul> <li>Assets in both base and quote</li> <li>Make sure gateway is running</li> <li>Some ETH for gas</li> <li>Installed Hummingbot-gateway and configured it to mainnet/testnet depending on where you are using it.</li> <li>Connected Ethereum wallet and put in the right ethereum node corresponding to what you have put in installing your gateway.</li> </ul>","title":"AMM Arbitrage strategy is not working"},{"location":"troubleshooting/#why-is-my-bot-not-creating-orders-on-perpetual-market-making","text":"<p>Check if you have an open position on Binance, it'll stop creating a new set of orders until your current position is closed. To learn more about perpetual market making, click here.</p>","title":"Why is my bot not creating orders on Perpetual Market-Making?"},{"location":"troubleshooting/#i-have-my-own-strategy-can-i-make-the-bot-execute-it","text":"<p>Hummingbot is an open-source application that you can create your own custom scripts and build strategy. Guidelines has been created so our community can have their way to improve or add features.</p> <p>You can check our Discord and discuss in our <code>#developer-chat</code> channel where you can share your ideas or ask questions about how to implement your strategy. This link would also help you more on Developing Strategies.</p> <p>You can also check out our new <code>scripts</code> feature which allows you to create a complete strategy using just a single Python file. Check it out here</p>","title":"I have my own strategy, can I make the bot execute it?"},{"location":"troubleshooting/#orders-are-not-refreshing-according-to-order-refresh-time","text":"<p>Make sure to set your <code>order_refresh_tolerance_pct</code> to -1 if you are not using the parameter.</p> <p>When using the parameter <code>order_refresh_tolerance</code>, orders do not refresh according to order refresh time if it doesn't exceed the percentage (%) threshold you set under <code>order_refresh_tolerance_pct</code>.</p>","title":"Orders are not refreshing according to order refresh time"},{"location":"troubleshooting/#mac-mismatch-error","text":"<pre><code>Hummingbot.core.utils.async_utils - ERROR - Unhandled error in background task: MAC mismatch Traceback (most recent call last):\nFile \"/home/ubuntu/hummingbot/hummingbot/core/utils/async_utils.py\", line 9, in safe_wrapper return await c\nFile \"/home/ubuntu/hummingbot/hummingbot/core/utils/async_call_scheduler.py\", line 128, in call_async return await self.schedule_async_call coro, timeout_seconds, app_warning_msg=app_warning_msg)\nFile \"/home/ubuntu/hummingbot/hummingbot/core/utils/async_call_scheduler.py\", line 117, in schedule_async_call return await fut\nFile \"/home/ubuntu/hummingbot/hummingbot/core/utils/async_call_scheduler.py\", line 80, in _coro_scheduler fut.set_result(await coro)\nFile \"/home/ubuntu/miniconda3/envs/hummingbot/lib/python3.8/concurrent/futures/thread.py\", line 57, in run result = self.fn(*self.args, **self.kwargs)\nFile \"/home/ubuntu/hummingbot/hummingbot/client/config/security.py\", line 88, in decrypt_all cls.decrypt_file(file)\nFile \"/home/ubuntu/hummingbot/hummingbot/client/config/security.py\", line 73, in decrypt_file cls._secure_configs[key_name] = decrypt_file(file_path, Security.password)\nFile \"/home/ubuntu/hummingbot/hummingbot/client/config/config_crypt.py\", line 67, in decrypt_file secured_value = Account.decrypt(encrypted, password)\nFile \"/home/ubuntu/miniconda3/envs/hummingbot/lib/python3.8/site-packages/eth_account/account.py\", line 134, in decrypt return HexBytes(decode_keyfile_json(keyfile, password_bytes))\nFile \"/home/ubuntu/miniconda3/envs/hummingbot/lib/python3.8/site-packages/eth_keyfile/keyfile.py\", line 49, in decode_keyfile_json return _decode_keyfile_json_v3(keyfile_json, password)\nFile \"/home/ubuntu/miniconda3/envs/hummingbot/lib/python3.8/site-packages/eth_keyfile/keyfile.py\", line 170, in _decode_keyfile_json_v3 raise ValueError(\"MAC mismatch\")\nValueError: MAC mismatch\n</code></pre> <p>This error is usually caused by having multiple encrypted keys with different passwords in the same config folder. For example:</p> <pre><code>Instance1                       Instance2\nPassword  : 1234                Password  : 5678\nAPI key/s : Binance             API key/s : Bittrex, Coinbase Pro,\n                                            Eterbase, Kraken, Huobi\n</code></pre> <p>Copying encrypted Binance key file from Instance1 to Instance2 will result to this error. To fix this:</p> <ol> <li>Delete just the <code>encrypted_binance_api/secret_key.json</code> from Instance2's conf folder</li> <li>Restart Hummingbot and password 5678 remains unchanged</li> <li>Run <code>connect binance</code> and add the API keys - this will encrypt it with 5678 password and sync it with the rest of the API keys</li> </ol>","title":"MAC Mismatch error"},{"location":"troubleshooting/#timestamp-for-this-request-is-outside-of-the-recvwindow","text":"<pre><code>binance.exceptions.BinanceAPIException: APIError(code=-1021): Timestamp for this request is outside of the recvWindow.\n</code></pre> <p>Timestamp errors in logs happen when the Binance clock gets de-synced from time to time as they can drift apart for a number of reasons. Hummingbot should safely recover from this and continue running normally.</p>","title":"Timestamp for this request is outside of the recvWindow"},{"location":"troubleshooting/#too-much-request-weight-used-ip-banned","text":"<p>Sample log error message:</p> <pre><code>binance.exceptions.BinanceAPIException: APIError(code=-1003): Way too much request weight used; IP banned until 1573987680818. Please use the websocket for live updates to avoid bans\n</code></pre> <p>This error occurs when the Binance API rate limit is reached. Causes include:</p> <p>Using multiple order mode with 3+ orders per side High order refresh rate Running multiple instances of Hummingbot Weight/Request error in logs happens when it encounters a warning or error and Hummingbot repeatedly sends the request (fetching status updates, placing/canceling orders, etc.) which resulted in getting banned. This should be lifted after a couple of hours or up to a maximum of 24 hours.</p>","title":"Too much request weight used; IP banned"},{"location":"troubleshooting/#kraken-0-balance-error","text":"<pre><code>Failed connections:                                                                                      |\n    kraken: {'error': {'error': []}}\n\n10:12:24 - kraken_market - Error received from https://api.kraken.com/0/private/Balance. Response is {'error': []}.\n</code></pre> <p>This error occurs when Kraken account currently has no funds on the exchange. Fund your account to fix the error. For more info visit this here.</p>","title":"Kraken 0 Balance error"},{"location":"troubleshooting/#gateway","text":"","title":"Gateway"},{"location":"troubleshooting/#typeerror-password-was-given-but-private-key-is-not-encrypted","text":"<p></p> <p>Make sure to set at least one character as your Hummingbot login password. Having a blank password causes the Gateway error message. For instructions on how to reset your password check this link</p>","title":"TypeError: Password was given but private key is not encrypted"},{"location":"troubleshooting/#error-after-running-generate_certs-command","text":"<p></p> <p>Add permission to the cert folder or to your hummingbot instance folder: <code>sudo chmod a+rw &lt;[instance_folder]</code> or <code>[certs_folder]&gt;/\\*</code></p>","title":"Error after running generate_certs command"},{"location":"troubleshooting/#why-is-my-bot-not-placing-orders","text":"<p>Fetch your bot status by running <code>status</code> or <code>[Ctrl + S]</code>:</p> <ul> <li>Are there any warnings that may prevent the bot from starting?</li> <li>Is your <code>order_amount</code> parameter larger than the exchange minimum order size requirement?</li> <li>If the user doesn't have enough balance to meet the set order amount, the bot will still try to create an order with a smaller order amount size provided that it still meets the exchange minimum requirement.</li> <li>Is your <code>inventory_skew_enabled</code> parameter enabled? Since this parameter adjusts order sizes, one side may be too low or too high.</li> </ul>","title":"Why is my bot not placing orders?"},{"location":"troubleshooting/#change-the-time-or-timezone-of-hummingbot","text":"<p>Hummingbot follows the same date/time and timezone on the machine where it is intalled. Below are some steps you can follow to change the timezone depending on the operating system and installation type.</p> <p>Docker</p> <p>While docker <code>$instance_name</code> is running in the background, type in the command line.</p> <p>Manual</p> <pre><code># 1) Run this command\ndocker exec -u 0 -it instance_name bash\n\n# 2) Install tzdata for the instance/container\napt-get update &amp;&amp; apt-get install -y tzdata\n\n# 3) Run this command to change the docker timezone\ndpkg-reconfigure tzdata\n</code></pre> <p>Configure geographic location and timezone by inputting the corresponding number, see example below:</p> <p></p> <p>Restart your docker and start your Hummingbot again to apply changes.</p> <p>Windows</p> <p>You can change the timezone on a Windows computer by doing the following:</p> <ol> <li> <p>Press Win + R shortcut to open the Run dialog box</p> </li> <li> <p>Enter timedate.cpl to open Date and Time settings</p> </li> <li> <p>Click Change time zone</p> </li> </ol> <p></p> <p>You can also follow these steps in the Windows Support article: How to set your time and timezone</p>","title":"Change the time or timezone of Hummingbot"},{"location":"about/","text":"<p>The Hummingbot Foundation is a not-for-profit organization established in the Cayman Islands. The Foundation\u2019s mission is to democratize high-frequency trading by maintaining the open-source Hummingbot code repository and the HBOT governance system.</p> <p>The official Foundation bylaws are located at: https://hummingbot.org/bylaws.pdf.</p>","title":"About Us"},{"location":"about/#principles","text":"<p>Below are the core principles that underpin Hummingbot\u2019s development:</p> <ul> <li>Open Source: The Hummingbot codebase is publicly available, auditable, and free</li> <li>Modular: Hummingbot modules can be independently built, used, and maintained by community members</li> <li>Extensible: Users can use Hummingbot to create any automated trading strategy on every exchange and blockchain</li> <li>All Levels: Hummingbot is designed for use by individuals and professionals alike</li> </ul>","title":"Principles"},{"location":"about/#staff","text":"<p>The Foundation staff handles the day-to-day operations of maintaining the Hummingbot codebase and the Foundation governance system, such as:</p> <ul> <li>Reviewing and merging pull requests</li> <li>Administering monthly polls and elections</li> <li>Maintaining the Snapshot voting system</li> <li>Managing the Discord server</li> <li>Assigning and managing developer bounties</li> <li>Packaging monthly releases into Docker containers for various environments</li> <li>Maintaining and updating the Hummingbot website and documentation site</li> </ul> <p>A 5-person Board of Directors provides oversight over the Foundation staff. See Board for more details.</p>","title":"Staff"},{"location":"about/#governance","text":"<p>The primary purpose of Hummingbot Foundation is to enable a decentralized, bazaar-style model of software development for the Hummingbot codebase.</p> <p>See Governance for more details.</p>","title":"Governance"},{"location":"about/#reporting","text":"<p>As an open source project, Hummingbot Foundation is committed to transparency. Each month, we publish a report that lists its sources and uses of income for the past month, as well as its fiat and crypto treasury balance.</p> <p>See Reporting for more details.</p>","title":"Reporting"},{"location":"about/#history","text":"<p>Launched in April 2019, Hummingbot began as a simple open source market making bot. Today, it has evolved into a extensible framework that lets you create custom trading strategies on any crypto exchange.</p> <p>Read our origin story and see History for more details.</p>","title":"History"},{"location":"about/history/","text":"<p>Hummingbot is an open source framework for building high-frequency trading bots that run on crypto exchanges, both centralized and decentralized.</p> <p>Launched in April 2019, Hummingbot pioneered a modular architecture that allowed external developers to contribute new exchange connectors and trading strategies. Hummingbot was originally built and open sourced by CoinAlpha, a software startup and liquidity provider backed by Initialized Capital, Bain Capital Ventures, and other leading investors.</p> <p>In December 2021, CoinAlpha spun off the Hummingbot Foundation as a new open source entity that maintains the Hummingbot Github repository and administers a decentralized, community-driven system of software development.</p> <p>Today, Hummingbot is a bazaar-style open source project with many contributors and users around the world, both individual and professional.</p>","title":"History"},{"location":"about/history/#articles-and-videos","text":"<ul> <li>Sasha Stoikov - Where market making meets microstructure</li> <li>Garry Tan - Hummingbot video intro</li> <li>The Defiant - Team Behind Hummingbot Gives Away Its Code Via Foundation</li> <li>Crunchbase News - Cryptocurrency Trading Bot Platform Hummingbot Buzzes With $8M Series A</li> <li>The Hummingbot origin story</li> <li>Introducing liquidity mining</li> <li>Demystifying liquidity mining rewards</li> <li>Comparing liquidity mining options in DeFi vs. Hummingbot</li> <li>Introducing the Hummingbot Foundation</li> <li>Introducing the Hummingbot Governance Token: HBOT</li> </ul>","title":"Articles and Videos"},{"location":"about/history/#engineering-posts","text":"<p>See the following blog posts from CoinAlpha CTO Martin Kou for more information about Hummingbot and Hummingbot Gateway's history, background, and intended developer experience:</p> <ul> <li>Hummingbot Architecture - Part 1</li> <li>Hummingbot Architecture - Part 2</li> <li>Hummingbot Gateway Architecture - Part 1</li> <li>Hummingbot Gateway Architecture - Part 2</li> </ul>","title":"Engineering Posts"},{"location":"about/history/#whitepapers","text":"<ul> <li>Hummingbot: Decentralized Market Making</li> <li>Liquidity Mining: A marketplace-based approach to market maker compensation</li> <li>Hummingbot Foundation Governance</li> </ul>","title":"Whitepapers"},{"location":"chains/","text":"<p>Chain connectors are configurable Gateway components that help you connect to decentralized exchanges (DEXs) on various blockchain networks.</p>","title":"Chains"},{"location":"chains/#supported-chains","text":"<p>Currently, Gateway supports the following blockchains:</p> <ul> <li>Ethereum: Includes Layer 2 networks like Arbitrum and Optimism</li> <li>Avalanche</li> <li>BNB Chain</li> <li>Cosmos</li> <li>Cronos</li> <li>Harmony</li> <li>Polygon</li> <li>NEAR</li> </ul>","title":"Supported Chains"},{"location":"chains/avalanche/","text":"<p><code>avalanche</code> is a Chain connector in Hummingbot Gateway that helps users connect to DEXs on various networks on the Avalanche blockchain.</p>","title":"<code>avalanche</code>"},{"location":"chains/avalanche/#connector-info","text":"<ul> <li>Folder: /gateway/src/chains/avalanche</li> <li>Configs: /gateway/src/templates/avalanche.yml</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"chains/avalanche/#i-chain-info","text":"<ul> <li>Website: https://www.avax.network/</li> <li>Block Explorer: https://snowtrace.io/</li> <li>CoinMarketCap: https://coinmarketcap.com/currencies/avalanche/</li> <li>CoinGecko: https://www.coingecko.com/en/coins/avalanche</li> </ul>","title":"\u2139\ufe0f Chain Info"},{"location":"chains/avalanche/#supported-networks","text":"Network ChainId Type     <code>avalanche</code> 43113 mainnet   <code>fuji</code> 43114 testnet","title":"\ud83d\udd78\ufe0f Supported Networks"},{"location":"chains/avalanche/#faucets","text":"","title":"\ud83d\udeb0 Faucets"},{"location":"chains/avalanche/#fuji","text":"<ul> <li>https://faucet.avax.network</li> </ul>","title":"<code>fuji</code>"},{"location":"chains/bnb-chain/","text":"<p><code>binance-smart-chain</code> is a Chain connector in Hummingbot Gateway that helps users connect to DEXs on various networks on the BNB Chain blockchain.</p>","title":"<code>binance-smart-chain</code>"},{"location":"chains/bnb-chain/#connector-info","text":"<ul> <li>Folder: /gateway/src/chains/binance-smart-chain</li> <li>Configs: /gateway/src/templates/binance-smart-chain.yml</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"chains/bnb-chain/#i-chain-info","text":"<ul> <li>Website: https://www.bnbchain.org/</li> <li>Block Explorer: https://bscscan.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/currencies/bnb/</li> <li>CoinGecko: https://www.coingecko.com/en/coins/bnb</li> </ul>","title":"\u2139\ufe0f Chain Info"},{"location":"chains/bnb-chain/#supported-networks","text":"Network ChainId Type     <code>mainnet</code> 56 mainnet   <code>testnet</code> 97 testnet","title":"\ud83d\udd78\ufe0f Supported Networks"},{"location":"chains/bnb-chain/#faucets","text":"","title":"\ud83d\udeb0 Faucets"},{"location":"chains/bnb-chain/#testnet","text":"<ul> <li>https://testnet.bnbchain.org/faucet-smart</li> </ul>","title":"<code>testnet</code>"},{"location":"chains/cosmos/","text":"","title":"Cosmos"},{"location":"chains/cosmos/#chain-folder","text":"","title":"\ud83d\udcc1 Chain folder"},{"location":"chains/cosmos/#config-template","text":"","title":"\ud83d\udcc1 Config template"},{"location":"chains/cosmos/#i-chain-info","text":"<ul> <li>Website: https://cosmos.network/</li> <li>CoinMarketCap: https://coinmarketcap.com/currencies/cosmos/</li> <li>CoinGecko: https://www.coingecko.com/en/coins/cosmos-hub</li> </ul>","title":"\u2139\ufe0f Chain Info"},{"location":"chains/cosmos/#supported-networks","text":"<p>Below are the Cosmos networks that Gateway currently supports.</p>","title":"\ud83d\udd78\ufe0f Supported Networks"},{"location":"chains/cosmos/#mainnet-bsc-mainnet","text":"<p>Default configuration parameters</p> <ul> <li><code>chainID</code>: 56</li> <li><code>nodeURL</code>: https://cosmos-mainnet-rpc.allthatnode.com:26657</li> <li><code>tokenListType</code>: <code>URL</code></li> <li><code>tokenListSource</code>: https://cosmos-chain-registry-list.vercel.app/list.json</li> <li><code>nativeCurrencySymbol</code>: ATOM</li> <li><code>gasPriceRefreshInterval</code>: 60</li> </ul> <p>You can adjust these parameters by running the Hummingbot command:</p> <pre><code>gateway config cosmos.networks.mainnet.&lt;parameter&gt;\n</code></pre>","title":"<code>mainnet</code> (bsc mainnet)"},{"location":"chains/cosmos/#testnet","text":"<p>Default configuration parameters</p> <ul> <li><code>chainID</code>: 97</li> <li><code>nodeURL</code>: https://cosmos-testnet-rpc.allthatnode.com:26657</li> <li><code>tokenListType</code>: <code>URL</code></li> <li><code>tokenListSource</code>:  https://cosmos-chain-registry-list.vercel.app/list.json</li> <li><code>nativeCurrencySymbol</code>: ATOM</li> <li><code>gasPriceRefreshInterval</code>: 60</li> </ul> <p>You can adjust these parameters by running the Hummingbot command:</p> <pre><code>gateway config cosmos.networks.testnet.&lt;parameter&gt;\n</code></pre>","title":"<code>testnet</code>"},{"location":"chains/cronos/","text":"<p>This page contains notes about connecting Gateway to the Cronos Chain.</p>","title":"Cronos"},{"location":"chains/cronos/#cronos-chain","text":"<p>\ud83d\udcc1 Chain folder</p> <p>\ud83d\udcc1 Config template</p> <p>Below are the Cronos Chain networks that Gateway currently supports.</p>","title":"Cronos Chain"},{"location":"chains/cronos/#mainnet-cronos-mainnet","text":"<p>Default configuration parameters</p> <ul> <li><code>chainID</code>: 25</li> <li><code>nodeURL</code>: https://evm.cronos.org/</li> <li><code>tokenListType</code>: FILE</li> <li><code>tokenListSource</code>: src/chains/cronos/mainnet_beta.json</li> <li><code>nativeCurrencySymbol</code>: CRO</li> <li><code>gasPriceRefreshInterval</code>: 60</li> </ul> <p>You can adjust these parameters by running the Hummingbot command: <pre><code>gateway config cronos.networks.mainnet.&lt;parameter&gt;\n</code></pre></p>","title":"<code>mainnet</code> (cronos mainnet)"},{"location":"chains/cronos/#testnet-cronos-testnet","text":"<p>Default configuration parameters</p> <ul> <li><code>chainID</code>: 338</li> <li><code>nodeURL</code>: https://evm-t3.cronos.org/</li> <li><code>tokenListType</code>: FILE</li> <li><code>tokenListSource</code>: src/chains/cronos/testnet.json</li> <li><code>nativeCurrencySymbol</code>: CRO</li> <li><code>gasPriceRefreshInterval</code>: 60</li> </ul> <p>You can adjust these parameters by running the Hummingbot command: <pre><code>gateway config cronos.networks.testnet.&lt;parameter&gt;\n</code></pre></p>","title":"<code>testnet</code> (cronos testnet)"},{"location":"chains/ethereum/","text":"<p><code>ethereum</code> is a Chain connector in Hummingbot Gateway that helps users connect to DEXs on various networks on the Ethereum blockchain.</p>","title":"<code>ethereum</code>"},{"location":"chains/ethereum/#connector-info","text":"<ul> <li>Folder: /gateway/src/chains/ethereum</li> <li>Configs: /gateway/src/templates/ethereum.yml</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"chains/ethereum/#i-chain-info","text":"<ul> <li>Website: https://ethereum.org/</li> <li>Block Explorer: https://etherscan.io/</li> <li>CoinMarketCap: https://coinmarketcap.com/currencies/ethereum/</li> <li>CoinGecko: https://www.coingecko.com/en/coins/ethereum</li> </ul>","title":"\u2139\ufe0f Chain Info"},{"location":"chains/ethereum/#supported-networks","text":"Network ChainId Type     <code>mainnet</code> 1 mainnet   <code>goerli</code> 5 testnet   <code>arbitrum_one</code> 42161 mainnet   <code>arbitrum_rinkeby</code> 421611 testet   <code>optimism</code> 10 mainnet","title":"\ud83d\udd78\ufe0f Supported Networks"},{"location":"chains/ethereum/#faucets","text":"","title":"\ud83d\udeb0 Faucets"},{"location":"chains/ethereum/#goerli","text":"<ul> <li>https://goerlifaucet.com</li> <li>https://testnetfaucet.io</li> <li>https://www.coinbase.com/faucets/ethereum-goerli-faucet</li> </ul>","title":"<code>goerli</code>"},{"location":"chains/harmony/","text":"","title":"Harmony"},{"location":"chains/harmony/#chain-folder","text":"","title":"\ud83d\udcc1 Chain folder"},{"location":"chains/harmony/#config-template","text":"","title":"\ud83d\udcc1 Config template"},{"location":"chains/harmony/#i-chain-info","text":"<ul> <li>Website: https://www.harmony.one/</li> <li>CoinMarketCap: https://coinmarketcap.com/currencies/harmony/</li> <li>CoinGecko: https://www.coingecko.com/en/coins/harmony</li> </ul>","title":"\u2139\ufe0f Chain Info"},{"location":"chains/harmony/#supported-networks","text":"<p>Below are the Harmony networks that Gateway currently supports.</p>","title":"\ud83d\udd78\ufe0f Supported Networks"},{"location":"chains/harmony/#mainnet-harmony-mainnet","text":"<p>Default configuration parameters</p> <ul> <li><code>chainID</code>: 1666600000</li> <li><code>nodeURL</code>: https://rpc.ankr.com/harmony</li> <li><code>tokenListType</code>: FILE</li> <li><code>tokenListSource</code>: 'src/chains/harmony/harmony_tokens_sushiswap.json'</li> <li><code>nativeCurrencySymbol</code>: ONE</li> <li><code>gasPriceRefreshInterval</code>: 60</li> </ul> <p>You can adjust these parameters by running the Hummingbot command:</p> <pre><code>gateway config harmony.networks.mainnet.&lt;parameter&gt;\n</code></pre>","title":"<code>mainnet</code> (Harmony mainnet)"},{"location":"chains/harmony/#testnet-harmony-testnet","text":"<p>Default configuration parameters</p> <ul> <li><code>chainID</code>: 1666700000</li> <li><code>nodeURL</code>: https://api.s0.b.hmny.io</li> <li><code>tokenListType</code>: FILE</li> <li><code>tokenListSource</code>: 'src/chains/harmony/harmony_tokens_sushiswap_testnet.json'</li> <li><code>nativeCurrencySymbol</code>: ONE</li> <li><code>gasPriceRefreshInterval</code>: 60</li> </ul> <p>You can adjust these parameters by running the Hummingbot command:</p> <pre><code>gateway config harmony.networks.testnet.&lt;parameter&gt;\n</code></pre>","title":"<code>testnet</code> (Harmony testnet)"},{"location":"chains/near/","text":"<p>This page contains notes about connecting Gateway to the Near Protocol.</p>","title":"NEAR"},{"location":"chains/near/#near-protocol","text":"<p>\ud83d\udcc1 Chain folder</p> <p>\ud83d\udcc1 Config template</p> <p>Below are the Near Protocol networks that Gateway currently supports.</p>","title":"Near Protocol"},{"location":"chains/near/#mainnet-near-mainnet","text":"<p>Default configuration parameters</p> <ul> <li><code>chainID</code>: 0</li> <li><code>nodeURL</code>: https://rpc.mainnet.near.org</li> <li><code>tokenListType</code>: <code>FILE</code></li> <li><code>tokenListSource</code>: <code>src/chains/near/near_tokens.json</code></li> <li><code>nativeCurrencySymbol</code>: NEAR</li> <li><code>gasPriceRefreshInterval</code>: 60</li> </ul> <p>You can adjust these parameters by running the Hummingbot command: <pre><code>gateway config near.networks.mainnet.&lt;parameter&gt;\n</code></pre></p>","title":"<code>mainnet</code> (near mainnet)"},{"location":"chains/near/#testnet-near-testnet","text":"<p>Default configuration parameters</p> <ul> <li><code>chainID</code>: 0</li> <li><code>nodeURL</code>: https://rpc.testnet.near.org</li> <li><code>tokenListType</code>: <code>FILE</code></li> <li><code>tokenListSource</code>: <code>src/chains/near/near_testnet_tokens.json</code></li> <li><code>nativeCurrencySymbol</code>: NEAR</li> <li><code>gasPriceRefreshInterval</code>: 60</li> </ul> <p>You can adjust these parameters by running the Hummingbot command: <pre><code>gateway config near.networks.testnet.&lt;parameter&gt;\n</code></pre></p>","title":"<code>testnet</code> (near testnet)"},{"location":"chains/polygon/","text":"","title":"Polygon"},{"location":"chains/polygon/#chain-folder","text":"","title":"\ud83d\udcc1 Chain folder"},{"location":"chains/polygon/#config-template","text":"","title":"\ud83d\udcc1 Config template"},{"location":"chains/polygon/#i-chain-info","text":"<ul> <li>Website: https://polygon.technology/</li> <li>CoinMarketCap: https://coinmarketcap.com/currencies/polygon/</li> <li>CoinGecko: https://www.coingecko.com/en/coins/polygon</li> </ul> <p>For more information on the public Polygon RPC endpoints, visit https://docs.polygon.technology/docs/develop/network-details/network/.</p>","title":"\u2139\ufe0f Chain Info"},{"location":"chains/polygon/#supported-networks","text":"<p>Below are the Polygon networks that Gateway currently supports.</p>","title":"\ud83d\udd78\ufe0f Supported Networks"},{"location":"chains/polygon/#mainnet-polygon-mainnet","text":"<p>Default configuration parameters</p> <ul> <li><code>chainID</code>: 137</li> <li><code>nodeURL</code>: https://rpc.ankr.com/polygon</li> <li><code>tokenListType</code>: <code>FILE</code></li> <li><code>tokenListSource</code>: <code>src/chains/polygon/polygon_tokens_mainnet.json</code></li> <li><code>nativeCurrencySymbol</code>: MATIC</li> <li><code>gasPriceRefreshInterval</code>: 60</li> </ul> <p>You can adjust these parameters by running the Hummingbot command:</p> <pre><code>gateway config polygon.networks.mainnet.&lt;parameter&gt;\n</code></pre>","title":"<code>mainnet</code> (Polygon mainnet)"},{"location":"chains/polygon/#mumbai-testnet","text":"<p>Default configuration parameters</p> <ul> <li><code>chainID</code>: 80001</li> <li><code>nodeURL</code>: https://rpc.ankr.com/polygon_mumbai</li> <li><code>tokenListType</code>: <code>FILE</code></li> <li><code>tokenListSource</code>: Mumbai token list</li> <li><code>nativeCurrencySymbol</code>: MATIC</li> <li><code>gasPriceRefreshInterval</code>: 60</li> </ul> <p>You can adjust these parameters by running the Hummingbot command:</p> <pre><code>gateway config polygon.networks.mumbai.&lt;parameter&gt;\n</code></pre>","title":"<code>mumbai</code> (testnet)"},{"location":"developers/","text":"<p>This section is for developers looking to contribute to Hummingbot or extend its capabilities:</p> <ul> <li>Debug console: Inspect and modify Hummingbot's state at runtime</li> <li>Building DEX Connectors: Build centralized exchange (CEX) connectors</li> <li>Building DEX Connectors: Build decentralized exchange (DEX) connectors</li> <li>Building Strategies: Create and customize your own Hummingbot strategies</li> <li>Adding Commands: Create your own Hummingbot commands</li> </ul>  <p>Try Scripts instead of Strategies</p> <p>Check out Scripts as a lighter alternative to building strategies. Scripts are single Python files that give you the same power of Strategies with easier access for developers.</p>","title":"Developers"},{"location":"developers/#contributing-to-hummingbot","text":"<p>Hummingbot is an open source project intended to provide a base layer infrastructure for users to customize and build their own trading strategies and add new exchange connectors.</p> <p>We welcome code contributions. See Contribution Guidelines for more information.</p> <p>For developer discussions and support, please visit the <code>#dev</code> channels on our discord server: https://discord.hummingbot.io.</p>","title":"Contributing to Hummingbot"},{"location":"developers/architecture/","text":"<p>Originally published in the Hummingbot blog: part 1, part 2</p>","title":"Architecture"},{"location":"developers/architecture/#introduction","text":"<p>Hummingbot is a modular framework for building highly reliable, and high performance trading bots. While the official Hummingbot package already allows you to run high frequency trading strategies on a number of cryptocurrency exchanges, the underlying framework is freely extensible for building custom strategies, custom market connectors, and more.</p> <p>In this blog post, we will discuss some of the key architectural features in Hummingbot, and the rationales behind their designs.</p>","title":"Introduction"},{"location":"developers/architecture/#history-and-motivation","text":"<p>Before Hummingbot became an open source project, it was a proprietary quant trading bot used for trading cryptocurrencies around 2017 and 2018, called Falcon. At that time, Falcon was built with off-the-shelf open source components. However, a few problems quickly surfaced with such an approach:</p>","title":"History and Motivation"},{"location":"developers/architecture/#reliability","text":"<p>Cryptocurrency exchange APIs are often unreliable, frequently timing out or returning various errors. Beyond that, the dynamic behaviors of exchange APIs can also present problems. e.g. after cancelling an order through a REST API call - an exchange API may still return that order as alive, cancelled, or non-existent if you immediately query the order with another REST API call.</p> <p>Novice builders of trading bots often think of trading bots as simply a combination of an exchange API wrapper and some strategy logic. In reality, there are many error cases and edge cases you need to deal with, before putting actual capital on the line.</p> <p>The most common problem that novice trading bot builders see is, they have got a naive trading bot that seems to work ok for a few hours - but the moment it meets the first API error, or the first unexpected dynamic behavior from the exchange - that trading bot would either crash or continue to trade incorrectly. In both cases, the user could stand to lose a lot of money if he's not actively monitoring the bot at all times - which nullifies the reason to use a trading bot to begin with.</p> <p>A production-quality should be able to keep running despite Internet or exchange disruptions, and should be able auto-heal once network and exchange functionalities are restored.</p>","title":"Reliability"},{"location":"developers/architecture/#status-tracking","text":"<p>Practical quant trading is a lot more than simply a matter of reading signals and making orders. You also need to do a lot of tracking on your current account and active orders before you can make sensible decisions.</p> <p>For example, the price of Bitcoin may be very attractive at a certain moment according to the signals - if my current position is already long Bitcoin - then my trading bot should not need to do anything. Naively emitting more buy orders may either simply cause API errors because there's not enough balance to buy more Bitcoin, or, it may cause unintended exposure to Bitcoin because the trader wasn't planning to have a 100% Bitcoin portfolio.</p> <p>Another example is what happens if I have active orders on the market, and the market conditions have suddenly become unfavorable to those orders. Let's say the trading bot made requests to cancel those orders. But maybe the exchange was too busy and those requests came back with errors. A naive trading bot that simply emits a cancel API request and forgets about the user's actual position on the market could cause huge capital loss to their users.</p> <p>A production-quality trading bot must track what happened to a user's overall position in the market, and should be able to decide what to do with those orders next (e.g. retry the cancellation later).</p>","title":"Status tracking"},{"location":"developers/architecture/#latency","text":"<p>There are a lot of quant trading styles - some are high frequency, some are not. In cryptocurrency markets, however - there are often significant price movements (5% or more) that only lasts tens of seconds or less. So even for strategies that are typically not treated as \"high frequency\" - it is often still highly advantageous to be able to catch onto quick price movements and utilize them before the opportunity is gone.</p> <p>A naively made trading bot would often depend on polling exchange APIs for price, order book and balance updates. These can take multiple seconds or perhaps more than a minute, depending on things like API rate limits or the size of the REST API response.</p> <p>A production-quality trading bot should be able to utilize streaming APIs (e.g. WebSocket) whenever available, but retain the ability to use REST APIs as backup when streaming API has become unreliable or unavailable.</p>","title":"Latency"},{"location":"developers/architecture/#backtesting-performance","text":"<p>Finally, for professional traders and hedge funds, being able to backtest strategies with high resolution data is often a critical concern.</p> <p>Many existing open source backtesting frameworks are either written with only low-resolution, daily candles in mind; or, are written in languages that do not integrate well with modern data science toolsets.</p> <p>Hummingbot is designed from the ground up to be able to process and simulate high resolution order book data with high performance; and is written in Python and Cython to allow access to Python's rich ecosystem of data science and machine learning tools.</p>","title":"Backtesting performance"},{"location":"developers/architecture/#the-clock","text":"<p>The <code>Clock</code> class, from the <code>hummingbot.core.clock</code> module, is the central component that drives all activities and actions of other major Hummingbot components - such as the market connectors and strategies.</p> <p>All major Hummingbot components, including market connectors and strategy classes, are derived from <code>TimeIterator</code> from the <code>hummingbot.core.time_iterator</code> module.</p> <p>At every clock tick, which happens every second by default, the <code>Clock</code> would notify each of its children <code>TimeIterator</code> objects by calling their <code>c_tick()</code> method.</p> <p>The order of the notifications for every clock tick is the same as the order the <code>TimeIterator</code> objects were added to the <code>Clock</code> via <code>Clock.add_iterator()</code>. This allows data dependencies between <code>TimeIterator</code> objects to be realized. e.g. if a strategy object depends on the most up-to-date market information from a market connector, then calling <code>Clock.add_iterator()</code> with the exchange connector before the strategy object will guarantee the market connector is always updated before the strategy object.</p> <p>References: https://github.com/hummingbot/hummingbot/blob/master/hummingbot/core/clock.pyx https://github.com/hummingbot/hummingbot/blob/master/hummingbot/core/time_iterator.pyx</p>","title":"The Clock"},{"location":"developers/architecture/#connectors","text":"<p>Exchange connectors to handle all the network operations between cryptocurrency exchanges and Hummingbot strategy objects that make trading decisions.</p> <p>You can think of exchange connectors as automated stock brokers running inside Hummingbot. When the strategy object wants to get the newest price quote for a certain order size, it asks the connector questions like: how thick is the order book? What's my current assets balance on the exchange? Make a limit bid order?</p> <p>At the time or writing this article, there are a total of 23 exchange connectors built into Hummingbot. You can find them under the <code>hummingbot.connector</code> module. For example:</p> <ul> <li><code>hummingbot.connector.exchange.binance.binance_exchange</code> is the market connector module for Binance;</li> <li><code>hummingbot.gateway.src.connectors.uniswap.uniswap</code> is the market connector module for Uniswap.</li> </ul> <p>The base interface for all connectors can be found as the class <code>ConnectorBase</code> in the module <code>hummingbot.connector.connector_base</code>. The base interface class contains a listing of the methods and properties that all market connectors must implement to make it usable to strategy objects in Hummingbot.</p>","title":"Connectors"},{"location":"developers/architecture/#order-tracking","text":"<p>Unlike the market interfaces from similar open source trading libraries, Hummingbot market connectors are designed to track the states of orders created by strategy objects, in order to provide a coherent picture of all the trading actions and updates for strategy objects.</p> <p>You can compare this to trading libraries that don't provide order tracking - trading bot writers would either have to come up with the tracking logic on their own; or risk the bot making or cancelling more orders than is needed, when exchange API calls get delayed or outright failed during periods of busy trading activity on the exchange.</p> <p>For example, in the Binance exchange connector <code>binance_exchange.pyx</code>, you can find the order tracking logic in <code>BinanceExchange.c_start_tracking_order()</code> and <code>BinanceExchange.c_stop_tracking_order()</code>. These functions are typically called when orders are being created, cancelled, and also when order status updates arrive from the exchange API.</p> <p></p>","title":"Order Tracking"},{"location":"developers/architecture/#graceful-degradation-and-reliability","text":"<p>In the previous section we've discussed how things may go wrong in poorly designed trading libraries, when API calls get delayed or failed. Hummingbot market connectors are designed to keep working reliably and degrade in functionality gracefully in the face of adverse market or networking conditions.</p> <p>Let's say we are in a period of really busy trading in Binance, and Binance API servers are seeing heavy latencies, and occasionally is not responding to new API requests at all. Let's say a Hummingbot strategy object wants to create a limit bid order in this situation, what should the market connector do?</p> <p>Since there is no guarantee the exchange API would give us a response to an order creation API call at the time - we have no reliable way of knowing whether the order has been placed or not in the market. If you look into the <code>BinanceExchange.create_order()</code> function, you'll find that the exchange connector starts tracking the order before it is submitted to the exchange API.</p> <p></p> <p>This is done to make sure Hummingbot would not forget about the order in case the <code>self.query_api()</code> call (which follows immediately) times out or fails, but the order was actually placed into the exchange.</p> <p>There are other similarly precautionary measures taken when the Binance market connector handles order cancellations and order status updates, to ensure the Binance market connector would not miss anything important about orders made by upstream strategy objects. This frees up the strategy objects such that they can focus only on trading decisions, while the market connector handles all the operational details behind making and tracking open orders on the market.</p>","title":"Graceful Degradation and Reliability"},{"location":"developers/architecture/#low-latency","text":"<p>Besides exchange instability and the need handle them gracefully, the other aspect of cryptocurrency trading is speed.</p> <p>Hummingbot market connectors are designed to use the lowest latency data source, which is web socket on most centralized exchanges, that is available. Let's take a look at the Binance market connector as an example again. Specifically, let's take a look at the <code>BinanceAPIOrderBookDataSource</code> in <code>hummingbot.connector.exchange.binance.binance_api_order_book_data_source</code>.</p> <p></p>","title":"Low Latency"},{"location":"developers/architecture/#gateway","text":"<p>Hummingbot is Python and Cython based, and that is generally good enough for interacting with centralized exchanges with web based APIs. Decentralized exchanges, however, often require (or are better supported with) the use of third party libraries for interacting with the exchange protocol. These libraries are not always available in Python.</p> <p>Hummingbot solves this problem via the Gateway middleware component, which can be used as a companion module to Hummingbot or as a standalone component. Gateway is typically a Docker container running on the same computer as Hummingbot, which hosts the external libraries and / or network nodes required for interfacing with decentralized exchanges. It then exposes an encrypted, authenticated HTTPS API endpoint to allow the corresponding Hummingbot market connectors to interface with the decentralized exchange protocols.</p> <p>Take the Balancer DEX connector for example. Almost all of the operations in the connector - whether it is getting market data like order prices, fetching the wallet balance or making orders - go through the <code>BalancerConnector._api_request()</code> method. When you look into the method, you'll find it's really just delegating all the work to a Gateway API endpoint.</p> <p></p> <p>For example, here is how the <code>balancer/sell</code> API endpoint is implemented in Gateway:</p> <p></p> <p>References:</p> <ul> <li>https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/connector_base.pyx</li> <li>https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/exchange/binance/binance_exchange.py</li> <li>https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/exchange/binance/binance_api_order_book_data_source.py</li> <li>https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/connector/balancer/balancer_connector.py</li> <li>https://github.com/CoinAlpha/gateway-api/blob/master/src/routes/balancer.route.ts</li> </ul>","title":"Gateway"},{"location":"developers/architecture/#strategies","text":"<p>If market connectors are the hands and eyes of Hummingbot, then strategy is the brain of Hummingbot. Strategy objects process market signals, and decide when and what orders to create or remove on markets.</p> <p>We will use the Avellaneda &amp; Stoikov market making strategy as an example for our discussions.</p>","title":"Strategies"},{"location":"developers/architecture/#watching-the-market-like-a-movie","text":"<p>Every strategy class is a subclass of the <code>TimeIterator</code> class - which means, in normal live trading, its <code>c_tick()</code>function gets called once every second. Each time <code>c_tick()</code> is called, the strategy object should be making observations on the latest market information, and decide what it should do.</p> <p>You can imagine strategy objects are watching the markets like a movie, where each second is one frame of the movie - and it's constantly trying to decide what to do about any new developments from the movie.</p> <p>Let's take a look at the <code>c_tick()</code> function of the Avellaneda &amp; Stoikov market making strategy in Hummingbot, below:</p> <p></p> <p>Here is an overview of what the strategy is doing every second - after it's been properly initialized.</p> <ul> <li>Line 412 - perform market observations and update indicators</li> </ul> <p>This function performs observations on both price actions on the market, and also the current inventory on the trader's account. Specifically, it updates the price volatility trailing indicator <code>_avg_vol</code>, and periodically updates the <code>_gamma</code>, <code>_kappa</code>, and <code>_eta</code> parameters as specified from the Avellaneda &amp; Stoikov paper.</p> <ul> <li>Line 415 - checking timestamps for creating new orders</li> </ul> <p>This line looks at the current wall clock time and determines whether it's time to create new orders on the market.</p> <ul> <li>Line 424 - decide on the order prices, if creating order</li> </ul> <p>This line calculates the prices for creating market making orders, from the indicators and parameters just calculated above.</p> <ul> <li>Line 426 to 433 - create an intermediate order proposal for creating orders later</li> </ul> <p>The intermediate order proposal specifies the price, amount and side of the orders to be created. However, they do not consider whether there are already similar active orders on the market.</p> <ul> <li> <p>Line 435 - cancel expired active orders, or if the new order proposal has different prices to the existing orders</p> </li> <li> <p>Line 438 to 443 - execute order proposals</p> </li> </ul> <p>These lines executes the order proposals generated from the logic above - sending orders to the exchange and tracking them.</p>","title":"Watching the Market Like A Movie"},{"location":"developers/architecture/#reading-prices-and-order-book","text":"<p>If you do a manual trace of the <code>get_price()</code> or <code>get_mid_price()</code> functions in the Avellaneda &amp; Stoikov strategy code, you'll find it leads to <code>OrderBook.c_get_price()</code> in the module <code>hummingbot.core.data_type.order_book</code>.</p> <p></p> <p>The <code>OrderBook</code> class tracks the real-time order book, including depth on both sides, trades and prices, on live exchanges. Each market pair in an exchange market will have one order book. Since trailing indicators often depend on price and order book depths as their fundamental inputs, order book information is often among first inputs to be read by a strategy in every <code>c_tick()</code> iteration.</p>","title":"Reading Prices and Order Book"},{"location":"developers/architecture/#trailing-indicators","text":"<p>Sophisticated strategies often need some trailing indicators from the market, in addition to the current prices or order book depth information, to make trading decisions. This includes most of the technical analysis indicators such as EMA, MACD and Bollinger Bands. In Avellaneda &amp; Stoikov strategy example, the object <code>self._avg_vol</code>, which is an instance of <code>AverageVolatilityIndicator</code>, is a trailing indicator for recent price volatility.</p> <p>Let's take a look at how it collects new samples from the strategy code. For every call to <code>c_tick()</code>, <code>c_collect_market_variables()</code> would send the newest price to <code>self._avg_vol</code> via <code>self._avg_vol.add_sample(price)</code>.</p> <p></p> <p>When you look into the relevant code for calculating the values of the trailing indicator, you'll find that <code>AverageVolatilityIndicator</code> stores a fixed number of samples of prices and outputs a smoothed standard deviation statistic of the prices in the window.</p> <p></p> <p></p> <p>If you want to write your own custom indicators, you can do so by inheriting from <code>BaseTrailingIndicator</code> just like the above, and writing your own sampling and calculation logic.</p>","title":"Trailing Indicators"},{"location":"developers/architecture/#debug-console","text":"<p>When you are writing a new connector, or a new strategy - it is critical to be able to observe the detailed behavior of your code, and diagnose any problems as it is happening. The logging facility is one tool developers can use. The other tool in a Hummingbot developer's arsenal, is the debug console.</p> <p>The Hummingbot debug console is disabled by default. It needs to be enabled by editing <code>conf/conf_global.py</code> and setting debug_console to <code>true</code>:</p> <p></p> <p>Once that has been set, you will be able to telnet to <code>localhost:8211</code> to access an interactive Python console that has access to the same memory space as the live Hummingbot instance. You can, for example, examine the live properties from the currently running strategy object and look at the active orders it has made and is tracking.</p> <p></p> <p>Read more about the Debug Console.</p>","title":"Debug Console"},{"location":"developers/architecture/#hummingbot-pro-preview","text":"<p>If you have looked behind the hood of the <code>Clock</code> class in Hummingbot, you'll find that it has two modes: real time and backtesting.</p> <p>We plan to release an enhanced version of Hummingbot, Hummingbot Pro, that allows for high performance back testing with high resolution historical order book data. It gives you the ability to plug in any strategy written for Hummingbot, run historical order book data traces with it, and give you the output on the trading performance for that strategy. It is capable of simulating days of high frequency trading within seconds. It also allows you to test a wide range of parameters with the strategy to search for the optimal parameters for trading.</p> <p>A big reason for using Cython within Hummingbot is high performance backtesting. While there are other Python open source quant frameworks that allow live trading and backtesting - most of them only work with low resolution data (e.g. daily OHLCV candles) and are not designed with high frequency trading simulations in mind. Having performance-critical code written in Cython allows Hummingbot strategies to be simulated with high-resolution order book data.</p> <p>Here are some preview images of the kind of output you can get from Hummingbot Pro backtesting simulations.</p> <p></p> <p></p> <p>Hummingbot Pro will be a paid service for professional traders and hedge funds, with launch planned for Q4 2021.</p>","title":"Hummingbot Pro Preview"},{"location":"developers/commands/","text":"<p>Currently, Hummingbot supports the following commands:</p> <p></p> <p>Depending on the usage of the hummingbot client, you may need to add new commands to the client. This is done by adding a new command class to the <code>hummingbot/client/command</code> directory. </p> <p>The new command class should be called <code>&lt;command_name&gt;_command.py</code> </p> <p>The new class should be called <code>&lt;CommandName&gt;Command</code> and adhere to the CamelCase naming convention.</p> <p>The new class should have a function called <code>command_name</code> which will be ran when the command is called in the Hummingbot client.</p> <p>Add the new class to the <code>__init__.py</code> file in the <code>hummingbot/client/command</code> directory and add any necessary imports to the <code>__init__.py</code> file.</p> <p></p> <p>The last step is to add any other functions that the new command class may need. </p> <p>Please note: check the <code>hummingbot/client/command</code> directory for any existing commands that may be similar to the new command you are adding.</p>","title":"Adding New Commands"},{"location":"developers/contributions/","text":"<p>All contributors should adhere to the code conventions used in the Hummingbot repository. The guidelines are outlined below.</p>","title":"Contribution Guidelines"},{"location":"developers/contributions/#workflow","text":"","title":"Workflow"},{"location":"developers/contributions/#1-fork-the-repository","text":"<p>Use GitHub's interface to make a fork of the repo and clone it to your local machine.</p> <pre><code>git clone https://github.com/{user_github_handle}/hummingbot.git\n</code></pre>","title":"1. Fork the repository"},{"location":"developers/contributions/#2-add-remote","text":"<p>Add the Hummingbot repo as an upstream remote, and fetch upstream data:</p> <pre><code>git remote add upstream https://github.com/hummingbot/hummingbot.git\ngit fetch upstream\n</code></pre>","title":"2. Add remote"},{"location":"developers/contributions/#3-creating-your-branch","text":"<p>Create your local branch and should follow this naming convention:</p> <ul> <li>feat/ ...</li> <li>fix/ ...</li> <li>refactor/ ...</li> <li>doc/ ...</li> </ul> <p>Create and switch to a new local branch called <code>feat/[branch_name]</code> based on <code>development</code> of the remote <code>upstream</code>.</p> <pre><code>git checkout -b feat/[branch_name] upstream/development\n</code></pre>","title":"3. Creating your branch"},{"location":"developers/contributions/#4-commit-changes-to-a-branch","text":"<p>Make commits to your branch and make sure that you only make relevant changes. If you find yourself making unrelated changes, create a new branch for those changes. Prefix each commit like so:</p> <ul> <li>(feat) add a new feature</li> <li>(fix) fix inconsistent tests</li> <li>(refactor) ...</li> <li>(cleanup) ...</li> <li>(doc) ...</li> </ul> <p>Commit message guidelines:</p> <ul> <li>Commit messages should be written in the present tense, e.g. \"(feat) add unit tests\".</li> <li>The first line of your commit message should be a summary of what the commit changes. Aim for about 70 characters max. Remember: This is a summary, not a detailed description of everything that changed.</li> <li>If you want to explain the commit in more depth, following the first line should be blank and then a more detailed description of the commit. This can be as detailed as you want, so dig into details here and keep the first line short.</li> </ul>","title":"4. Commit changes to a branch"},{"location":"developers/contributions/#5-rebase-upstream-changes","text":"<p>When you are done making changes, you can begin getting your code merged into the main repository. The first step is to rebase upstream changes into your branch.</p> <pre><code>git pull --rebase upstream development\n</code></pre> <p>This will start the rebase process. You must commit all of your changes before doing this. If there are no conflicts, this should roll all of your changes back on top of the changes from upstream, leading to an excellent, clean, linear commit history.</p> <p>If there are conflicting changes, git will start yelling at you partway through the rebasing process. Then, git will pause rebasing to allow you to sort out the conflicts. You do this the same way you solve merge conflicts, by checking all of the files git says have been changed in both histories and picking the versions you want. Be aware that these changes will show up in your pull request, so try and incorporate upstream changes as much as possible.</p> <p>You pick a file by <code>git add</code> ing it - you do not make commits during a rebase.</p>","title":"5. Rebase upstream changes"},{"location":"developers/contributions/#6-create-a-pull-request","text":"<p>Make a clear pull request from your fork and branch to the upstream development branch, detailing exactly what changes you made and what feature this should add. The clearer your pull request is, the faster you can get your changes incorporated into this repository.</p> <p>It is important to check Allow edits by maintainers for the Hummingbot team to update your branch with <code>development</code> whenever needed.</p> <p></p> <p>If the development team requests changes, you should make more commits to your branch to address these, then follow this process again from rebasing onwards.</p> <p>Once you get back here, make a comment requesting a further review, and someone will look at your code again. If it addresses the requests, it will get merged. Else, repeat the process.</p>","title":"6. Create a pull request"},{"location":"developers/contributions/#7-create-a-pull-request-proposal-in-snapshot","text":"<p>Log in with your wallet in https://snapshot.org/#/hbot-prp.eth and create a new proposal using as a title the name of your pull request. Be sure that you have at least 1 HBOT to create the proposal.</p> <p>The voting period is 7 days and the HBOT holders will decide if your PR will be accepted or rejected.</p>","title":"7. Create a pull request proposal in Snapshot \u26a1\ufe0f"},{"location":"developers/contributions/#8-code-review","text":"<p>Once the PRP is approved, your code will be tested by the QA team and if pass all the test Tech Review DAO will review the code.</p> <p>Fix any changes requested by your reviewer, fix issues raised by a tester, and push your fixes as a single new commit.</p>","title":"8. Code review"},{"location":"developers/contributions/#9-merge","text":"<p>Once the pull request has been reviewed and accepted; it will be merged by a member of the Hummingbot development team.</p>","title":"9. Merge"},{"location":"developers/contributions/#additional-information","text":"","title":"Additional information"},{"location":"developers/contributions/#unit-test-coverage","text":"<p>Note</p> <p>Tests are very important. Submit tests if your pull request contains new, testable behavior. See Unit test coverage for more information.</p>  <p>It is required to present a minimum 80% unit test coverage of all the changes included in a pull request. Some components are, however, excluded from this validation (for example all UI components).</p> <p>To calculate the diff-coverage locally on your computer, run <code>make development-diff-cover</code> after running all tests.</p>","title":"Unit test coverage"},{"location":"developers/contributions/#checklist","text":"<p>This is to help you organize your process.</p> <ul> <li>Did I create my branch from <code>development</code>?</li> <li>Did I follow the correct naming convention for my branch?</li> <li>Is my branch focused on a single main change?</li> <li>Do all of my changes directly relate to this change?</li> <li>Did I rebase the upstream <code>development</code> branch after I finished all my work?</li> <li>Did I write a clear pull request message detailing what changes I made?</li> <li>Did I get a code review?</li> <li>Did I make any requested changes from that code review?</li> </ul> <p>If you followed all of these guidelines and made good changes, you should have no problem getting your changes merged.</p>","title":"Checklist"},{"location":"developers/debug/","text":"<p>The debug console is a powerful tool for Hummingbot developers to inspect and modify the live states in Hummingbot while it's running. It gives access to a live Python console living in the same process as Hummingbot. It can be thought of as similar to the developer console found in most modern browsers.</p>","title":"Debug Console"},{"location":"developers/debug/#activating-the-debug-console","text":"<p>The debug console is disabled by default. You need to enable it by setting <code>debug_console: true</code> in the <code>hummingbot_conf/conf_client.yml</code> file.</p> <p></p>","title":"Activating the Debug Console"},{"location":"developers/debug/#entering-the-debug-console","text":"<p>When you start Hummingbot with debug console enabled, it will print out a \"Started debug console\" log message at start.</p> <p></p> <p>As specified in the message, you can use <code>ssh</code> to access the debug console and exit with <code>CTRL + D</code>. The server accepts any user name (i.e. <code>ssh random@localhost -p 8211</code> works just as well).</p> <p></p>","title":"Entering the Debug Console"},{"location":"developers/debug/#accessing-python-modules-and-exposed-objects","text":"<p>Once you've entered the debug console, you have access to a fully featured Python interpreter living in the Hummingbot process.</p> <p>You can access all the exposed properties under the <code>HummingbotApplication</code> class via the <code>hb</code> object.</p> <p>Here are some of the exposed properties you can access from the debug console:</p> <ul> <li><code>hb.strategy</code>: The currently active strategy object</li> <li><code>hb.markets</code>: A dictionary of active market connectors</li> <li><code>hb.acct</code>: The currently active Ethereum wallet object</li> <li><code>hb.clock</code>: The clock object that's driving all the Hummingbot components</li> </ul> <p></p>","title":"Accessing Python Modules and Exposed Objects"},{"location":"developers/debug/#sample-ways-to-use-the-console","text":"<p>Below is an example where a developer queries the currently active bids/asks under the strategy.</p> <p></p> <p>You should refer to the source code of the exposed objects to see what properties you can inspect and modify inside the debug console.</p>","title":"Sample Ways to Use the Console"},{"location":"developers/connectors/","text":"","title":"Building CEX Connectors"},{"location":"developers/connectors/#what-are-exchange-connectors","text":"<p>Exchange connectors are packages of code that link Hummingbot's internal trading algorithms with live information from different cryptocurrency exchanges. They interact with a given exchange's API, such as by gathering order book data and sending and cancelling trades.</p>","title":"What are exchange connectors?"},{"location":"developers/connectors/#cex-connector-development-checklist","text":"<p>For spot exchanges, we have a Notion template available which you can use as a checklist for developing the connector and it should help you understand the main components and functionalities of each class. You can view the template here</p>","title":"CEX Connector Development Checklist"},{"location":"developers/connectors/#templates","text":"<p>You can find the existing connectors here. Note that each folder contained here marks different exchange connector types. These should serve as a template for creating a new exchange connector.</p> <p>Building a new exchange connector requires conforming to the template code to the new exchange's APIs, identifying and handling any differences in functions/behaviors, and testing the new exchange connector on that exchange.</p>  <p>The Gold Standard</p> <p>We recommend referring to the Binance Spot and the Bybit Perpetual connectors as the most up-to-date connector implementations in the codebase.</p>","title":"Templates"},{"location":"developers/connectors/#exchange-connector-requirements","text":"<p>Introducing an exchange connector into the Hummingbot code base requires a mutual commitment from the Hummingbot team and community developers to maintaining a high standard of code quality and software reliability.</p> <p>We encourage and welcome contributions from the community, subject to the guidelines and expectations outlined below.</p> <ol> <li>Connector folder: A folder that contains a complete set of connector files based off of the examples above.</li> <li>Unit tests: Tests that cover at least 80% of the new code \u2014 see the tests in the connectors above.</li> <li>Inline code comments (particularly for any code that is materially different from the templates)</li> <li>Documentation: Documentation that contains useful information about the exchange for bot users</li> </ol>","title":"Exchange connector requirements"},{"location":"developers/connectors/#process-overview","text":"<ol> <li> <p>Build a spot or perp connector that fulfills the requirements listed in the Build process and the QA Testing process.</p> </li> <li> <p>Submit a pull request with the connector to the <code>development</code> branch in Github, following the Contribution Guidelines.</p> </li> <li> <p>Submit a Pull Request Proposal (PRP) in the Hummingbot PRP Snapshot. In particular, the PRP should identify a dedicated maintainer who will be responsible for fixing bugs and applying updates.</p> </li> </ol> <p>Only connectors</p>","title":"Process overview"},{"location":"developers/connectors/#additional-resources","text":"<p>For questions, please visit the #developer-chat channel on our Discord or post your question under the Connectors topic in the official forum.</p>","title":"Additional resources"},{"location":"developers/connectors/build/","text":"","title":"Build Process"},{"location":"developers/connectors/build/#exchange-api-requirements","text":"<p>Exchanges with REST APIs must provide:</p> <ul> <li>Endpoint to get trading rules. (example)</li> <li>Endpoint to check the server status (in general any endpoint returning a low amount of information could serve for this purpose, but a ping or time endpoint would be ideal). (example)</li> <li>Endpoint to get active orders. (example)</li> <li>Endpoint to create new orders. (example)</li> <li>Endpoint to get the current account balance. (example)</li> <li>Documentation of the rate limits applied for each endpoint and global limits for each IP/connection. (example)</li> </ul> <p>It is useful if the REST API provides the following, but a connector can be built without them:</p> <ul> <li>Endpoint to get the list of active trading pairs (this is sometimes referred to as \"tokens info\"). (example)</li> </ul> <p>Exchanges with WebSocket APIs must provide:</p> <ul> <li>Public orders channel (example)</li> <li>Public trades channel (example)</li> <li>Private orders updates channel (example)</li> <li>Private trades events channel (example)</li> <li>Documentation of the rate limits applied for each subscription and global limits for each IP/connection</li> </ul> <p>It would be useful if the Websocket API also provides the following, but a connector can be built without them:</p> <ul> <li>Private balance events channel (if not present the connector has to be configured to estimate balance based on the connector activity) (example)</li> <li>The trade events include details about the fees charged for each trade (if not present the connector will have to operate estimating fees).</li> </ul>","title":"Exchange API requirements"},{"location":"developers/connectors/build/#perp-connector-additional-requirements","text":"<ul> <li>REST API endpoint to check positions (example)</li> <li>REST API endpoint to configure the leverage (example)</li> </ul>","title":"Perp connector additional requirements"},{"location":"developers/connectors/build/#components","text":"<p>Below, we describe the components that need to be implemented to create a new connector. Some components can be implemented in parallel, but others have dependencies.</p>","title":"Components"},{"location":"developers/connectors/build/#authorization","text":"<p>Class that provides the logic for the web assistant to correctly configure authenticated requests to the exchange (private endpoint). It should be a subclass of AuthBase</p> <p>Example: https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/exchange/binance/binance_auth.py</p> <p>Dependencies: None</p>","title":"Authorization"},{"location":"developers/connectors/build/#utils","text":"<p>The Utils module is generally used to define functions that are used in several components from the connector. There is no need to add functions if the connector does not require special behavior when creating requests or does not have a special logic to generate order ids.</p> <p>It is required to define in this module the configuration for the connector, including: - Default fees - Required parameters to establish a connection (for example the API Key and API secret).</p> <p>The configurations have to be specified for each domain the connector will support (all connectors can handle multiple domains if configured correctly)</p> <p>Example: https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/exchange/binance/binance_utils.py</p> <p>Dependencies: None</p>","title":"Utils"},{"location":"developers/connectors/build/#order-book","text":"<p>Subclass of <code>OrderBook</code> to define specialized methods to create the snapshot messages, difference messages and trade messages based on the events received by the data source</p> <p>Example: https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/exchange/binance/binance_order_book.py</p> <p>Dependencies: None</p>","title":"Order Book"},{"location":"developers/connectors/build/#order-book-data-source","text":"<p>Subclass of <code>OrderBookTrackerDataSource</code>. It includes all the logic related to receiving updates through websocket for all public channels. The class should include: - Logic to provide the latest prices in the exchange for some one or more trading pairs - Logic to return all supported trading pairs (filtering out for example any pair that could be disabled in the exchange) - Functionality to translate trading pairs from exchange notation to the client notation, and the other way around - Method to get a full copy of the current order book for a particular trading pair - Logic to subscribe to the required public channels, and process all events received. The required channels would be: order book differences and public trades events. It also requires a method to regularly do a full update of the order book (snapshot).</p> <p>A tracker class has to be created for the connector (subclass of OrderBookTracker) to start the background process that receives the events and updates.</p> <p>Example: - https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/exchange/binance/binance_api_order_book_data_source.py - https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/exchange/binance/binance_order_book_tracker.py</p> <p>Dependencies: Order Book (to create diff messages, snapshot messages and trade messages)</p>","title":"Order Book Data Source"},{"location":"developers/connectors/build/#user-stream-data-source","text":"<p>Subclass of <code>UserStreamTrackerDataSource</code></p> <p>The class should include: - Logic to subscribe to the private websocket channels to receive order updates, trade updates and balances updates - Logic to process each type of event</p> <p>A tracker class has to be created for the connector (subclass of <code>UserStreamTracker</code>) to start the background process that receives the events and updates.</p> <p>Examples: </p> <ul> <li>https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/exchange/binance/binance_api_user_stream_data_source.py</li> <li>https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/exchange/binance/binance_user_stream_tracker.py</li> </ul> <p>Dependencies:</p> <ul> <li>Order Book Data Source (to translate token pairs to the exchange notation only)</li> <li>Authorization component</li> </ul>","title":"User Stream Data Source"},{"location":"developers/connectors/build/#connector","text":"<p>Subclass of <code>ExchangeBase</code> (for exchange connectors) or <code>ConnectorBase</code> (for Gateway connectors).</p> <p>It should include:</p> <ul> <li>Logic to start and stop all required connections and subscriptions for a correct operation.</li> <li>Method to determine if the connector is ready to operate (all connections have been stablished) and to check the status regularly</li> <li>Functionality for orders lifecycle: creation and cancellation. To keep track of orders and process them correctly it should use an instance of ClientOrderTracker</li> <li>Method to send REST requests to the server (using the WebAssistant) and correctly handle error results</li> <li>Method to update trading rules regularly</li> <li>Logic to regularly update the balance using REST API (this is the backup for the updates received though the websocket)</li> <li>Logic to regularly check for order updates using the REST API (this is the backup for the updates received through the websocket)</li> <li>Functionality to process correctly the private channel events received through the user stream</li> </ul> <p>Example: https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/exchange/binance/binance_exchange.py</p> <p>Dependencies: </p> <ul> <li>Order Book Data Source</li> <li>User Stream Data Source</li> </ul>","title":"Connector"},{"location":"developers/connectors/build/#perp-connector-additional-requirements_1","text":"<p>In the case of a perpetuals exchange connector, the connector component should subclass also <code>PerpetualTrading</code>, and has to include the following functionality:</p> <ul> <li>Logic to get the current leverage from the exchange and to set it in the exchange</li> <li>Provide the supported position modes and change them in the exchange (if allowed by the exchange)</li> <li>Method to get the current funding information and logic to regularly update it</li> <li>Logic to keep positions status updated</li> </ul> <p>Example: https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/derivative/binance_perpetual/binance_perpetual_derivative.py</p>","title":"Perp connector additional requirements"},{"location":"developers/connectors/build/#unit-testing","text":"<p>It is expected that all the components mentioned before will have unit tests validating all methods. This is independent from any validation done by QA testing.</p> <p>All connector unit tests should not depend on active connections to the exchange to perform the validations. Instead, the interactions with the exchange should always be mocked or emulated. That can be done using the <code>aioresponses</code> library for all REST requests, and using the class <code>NetworkMockingAssistant</code> for websocket interactions. </p> <p>Examples for their use can be found in both Binance and Binance Perpetual connectors' unit tests.</p> <p>Binance connector tests: https://github.com/hummingbot/hummingbot/tree/master/test/hummingbot/connector/exchange/binance</p> <p>Binance Perpetual connector tests: https://github.com/hummingbot/hummingbot/tree/master/test/hummingbot/connector/derivative</p>","title":"Unit testing"},{"location":"developers/connectors/build/#special-considerations","text":"","title":"Special Considerations"},{"location":"developers/connectors/build/#connector-configuration-when-no-websocket-balance-events-are-available","text":"<p>When an exchange does not provide a websocket endpoint for balance updates, the connector has to be configured to estimate balances based on the connector activity.</p> <ol> <li>Set the <code>_real_time_balance_update</code> variable to <code>False</code></li> <li>The method used to update the balance using the REST API regularly should also update the in flight orders snapshot with the following lines:</li> </ol> <pre><code>self._in_flight_orders_snapshot = {k: copy.copy(v) for k, v in self._in_flight_orders.items()}\nself._in_flight_orders_snapshot_timestamp = self.current_timestamp\n</code></pre> <p>As an example, please refer to the Bybit connector: https://github.com/hummingbot/hummingbot/blob/master/hummingbot/connector/derivative/bybit_perpetual/bybit_perpetual_derivative.py</p>","title":"Connector configuration when no websocket balance events are available"},{"location":"developers/connectors/cex-connector-development/","text":"","title":"CEX Connector Development"},{"location":"developers/connectors/cex-connector-development/#environment-setup","text":"","title":"Environment Setup"},{"location":"developers/connectors/cex-connector-development/#github","text":"<p>  Fork the hummingbot/hummingbot repository.</p> <p>  Clone your repository:</p> <pre><code>    git clone git@github.com:{github_handle}/hummingbot.git\n</code></pre> <p>  Add the official Hummingbot repo as an upstream remote and fetch upstream data:</p> <pre><code>    git remote add upstream https://github.com/hummingbot/hummingbot.git\n    git fetch upstream\n</code></pre> <p>  Create your branch from the development branch</p> <pre><code>    git checkout -b feat/[connector_name]_connector upstream/development\n</code></pre>","title":"GitHub"},{"location":"developers/connectors/cex-connector-development/#directory","text":"<p>Click here to see to the gold standard connector.</p> <p><code>connector_name</code> = the name of the connector in lowercase and separated with underscores if applies.</p> <ul> <li>Example without underscore: binance</li> <li>Example with underscore: crypto_com</li> </ul>","title":"Directory"},{"location":"developers/connectors/cex-connector-development/#connector","text":"<p>  Create <code>connector folder</code> inside hummingbot/hummingbot/connector/exchange called <code>connector_name</code>.</p>    Create the following files inside of the <code>connector folder</code>:  <ul> <li>init.py</li> <li><code>connector_name</code>_api_order_book_data_source.py</li> <li><code>connector_name</code>_api_user_stream_data_source.py</li> <li><code>connector_name</code>_auth.py</li> <li><code>connector_name</code>_constants.py</li> <li><code>connector_name</code>_exchange.py</li> <li><code>connector_name</code>_order_book.py</li> <li><code>connector_name</code>_utils.py</li> <li><code>connector_name</code>_web_utils.py</li> <li>dummy.pxd</li> <li>dummy.pyx</li> </ul>","title":"Connector"},{"location":"developers/connectors/cex-connector-development/#tests","text":"<p>  Create <code>test folder</code> inside hummingbot/test/hummingbot/exchange called <code>connector_name</code>.</p>    Create the following files inside of the <code>test folder</code> :  <ul> <li>init.py</li> <li>test_<code>connector_name</code>_api_order_book_data_source.py</li> <li>test_<code>connector_name</code>_api_user_stream_data_source.py</li> <li>test_<code>connector_name</code>_auth.py</li> <li>test_<code>connector_name</code>_exchange.py</li> <li>test_<code>connector_name</code>_order_book.py</li> <li>test_<code>connector_name</code>_utils.py</li> <li>test_<code>connector_name</code>_web_utils.py</li> </ul>","title":"Tests"},{"location":"developers/connectors/cex-connector-development/#build-process","text":"<p>User guide: Build Process</p>","title":"Build Process"},{"location":"developers/connectors/cex-connector-development/#code-steps","text":"","title":"Code steps"},{"location":"developers/connectors/cex-connector-development/#constants","text":"Add to the constant files the following variables  <p> <code>DEFAULT DOMAIN</code>: check if is you have to add more than 1 domain, this constant will be used for generating the path url in web_utils.</p> <p> <code>REST_URLS</code>: could be a dictionary like ByBit connector or a f-string like ByBit connector, the <code>DEFAULT DOMAIN</code> variable will be used to select the correct URL.</p> <p> <code>RATE_LIMITS</code></p> <p> <code>SERVER_TIME_PATH_URL</code>: check if the exchange needs that your\u00a0<code>timestamp</code>\u00a0is in sync with the server time.</p>","title":"CONSTANTS"},{"location":"developers/connectors/cex-connector-development/#web-utils","text":"","title":"Web Utils"},{"location":"developers/connectors/cex-connector-development/#connector_name_web_utilspy-file","text":"<p> Copy the ByBit connector web_utils file.</p> <p> <code>connector_name</code> with the first letter in uppercase.</p> <p>  Replace ByBit for <code>connector_name</code>.</p>    Code the function to create the rest url, check if you need public and private url or just one of them.  <p>If you need Time Sync:</p> <p>  Check that you have the function <code>build_api_factory_without_time_synchronizer_pre_processor</code>.</p> <p>  Check if you need changes in the function <code>get_current_server_time</code> (maybe you need to find the server time in the response).</p>   <p>If you don\u2019t need Time Sync:</p> <p>  Delete the files related with the Time Sync and code the <code>build_api_factory</code> function without that.</p>","title":"<code>connector_name</code>_web_utils.py file"},{"location":"developers/connectors/cex-connector-development/#utils","text":"","title":"Utils"},{"location":"developers/connectors/cex-connector-development/#code-inconnector_name_utilspy-file","text":"<p>  Copy the ByBit connector utils file.</p> <p>  Replace ByBit for <code>connector_name</code> with the first letter in uppercase.</p> <p>  Replace ByBit for <code>connector_name</code>.</p> <p>  Replace <code>DEFAULT_FEES</code> with the appropriate values .</p> <p>  Check if you need connection to other domains or delete it.</p>","title":"Code in<code>connector_name</code>_utils.py file"},{"location":"developers/connectors/cex-connector-development/#order-book-data-source","text":"","title":"Order Book Data Source"},{"location":"developers/connectors/cex-connector-development/#connector_name_order_bookpy","text":"<p>  Copy the ByBit connector order book file.</p> <p>  Replace ByBit for <code>connector_name</code> with the first letter in uppercase.</p> <p>  Replace ByBit for <code>connector_name</code>.</p>    <p>For now we will not implement any function, the only purpose of this step because we need to import this class in the <code>connector_name</code>_api_order_book_data_source.py and we don\u2019t want to have errors in the IDE.</p>","title":"<code>connector_name</code>_order_book.py"},{"location":"developers/connectors/cex-connector-development/#connector_name_api_order_book_data_sourcepy","text":"<p>  Copy the ByBit connector order book data source file.</p> <p>  Replace ByBit for <code>connector_name</code> with the first letter in uppercase.</p> <p>  Replace ByBit for <code>connector_name</code>.</p> <p>  Replace the <code>HEARTBEAT_TIME_INTERVAL</code> with the appropriate value.</p> <p>  Check if you need Time Sync or delete it.</p> <p>  Code the method<code>_init_trading_pair_symbols</code></p>","title":"<code>connector_name</code>_api_order_book_data_source.py"},{"location":"developers/connectors/cex-connector-development/#test_connector_name_api_order_book_data_sourcepy","text":"<p>  Copy the ByBit the test of the order book data source file.</p> <p>  Replace ByBit for <code>connector_name</code> with the first letter in uppercase.</p> <p>  Replace ByBit for <code>connector_name</code>.</p> <p>  Check if you need Time Sync or delete it.</p>    <p>Now we are going to start implementing the functionalities of the Order Book Data source but in a TDD way.</p>","title":"test_<code>connector_name</code>_api_order_book_data_source.py"},{"location":"developers/connectors/cex-connector-development/#methods-development","text":"","title":"Methods development"},{"location":"developers/connectors/cex-connector-development/#rest","text":"<code>trading_pairs</code>  <p>  test_fetch_traiding_pairs</p> <p>  is_exchange_information_valid (check if applies)</p> <p>  _init_trading_pair_symbols</p> <p>  fetch_traiding_pairs</p> <p>  test_fetch_trading_pairs_exception_raised</p>  <code>last_traded_prices</code>  <p>  test_get_last_traded_prices</p> <p>  get_last_traded_prices</p>  <code>orderbook_snapshot</code>  <p>  test_get_snapshot</p> <p>  get_snapshot</p> <p>  test_get_snapshot_raises</p> <p>  test_get_new_order_book</p> <p>  get_new_order_book</p> <p>  snapshot_message_from_exchange</p>","title":"<code>REST</code>"},{"location":"developers/connectors/cex-connector-development/#websocket","text":"<code>listen_for_subscriptions</code>  <p>  test_listen_for_subscriptions_subbscribes_to_trades_and_depth/diff <code>change for test_listen_for_subscriptions_successful</code>?</p> <p>  listen_for_subscriptions</p> <p>  _subscribe_channels</p> <p>  test_listen_for_subscriptions_sends_ping_message_before_ping_interval_finishes</p> <p>  test_listen_for_subscriptions_raises_cancel_exception <code>change for test_listen_for_subscriptions_cancelled_error</code></p> <p>  test_listen_for_subscriptions_logs_exception_details <code>change for test_listen_for_subscriptions_logs_exception</code></p>  <code>listen_for_trades</code>  <p>  test_listen_for_trades_cancelled_error</p> <p>  test_listen_for_trades_logs_exception</p> <p>  test_listen_for_trades_successful</p> <p>  listen_for_trades</p> <p>  trade_message_from_exchange (in the OrderBook of the exchange)</p>  <code>listen_for_order_book_diffs</code>  <p>  test_listen_for_order_book_diffs_cancelled</p> <p>  test_listen_for_order_book_diffs_logs_exception</p> <p>  test_listen_for_order_book_diffs_successful</p> <p>  listen_for_order_book_diffs</p> <p>  diff_message_from_exchange (in the OrderBook of the exchange)</p> <p>  snapshot_message_from_exchange_websocket (if the first message is an orderbook snapshot)</p>  <code>listen_for_order_book_snapshots</code>  <p>  test_listen_for_order_book_snapshots_cancelled_when_fetching_snapshot</p> <p>  test_listen_for_order_book_snapshots_log_exception</p> <p>  test_listen_for_order_book_snapshots_successful</p> <p>  snapshot_message_from_exchange_rest (if ask via rest the orderbook and the message is different than the websocket one)</p>","title":"<code>WEBSOCKET</code>"},{"location":"developers/connectors/cex-connector-development/#auth","text":"","title":"Auth"},{"location":"developers/connectors/cex-connector-development/#connector_name_authpy","text":"<p>  Copy the ByBit connector order book file.</p> <p>  Replace ByBit for <code>connector_name</code> with the first letter in uppercase.</p>","title":"<code>connector_name</code>_auth.py"},{"location":"developers/connectors/cex-connector-development/#test_connector_name_authpy","text":"<p>  Copy the ByBit the test of the auth file.</p> <p>  Replace ByBit for <code>connector_name</code> with the first letter in uppercase.</p> <p>  Replace ByBit for <code>connector_name</code>.</p> <p>  Check if you need Time Sync or delete it.</p>    <p>Now we are going to start implementing the functionalities of the Order Book Data source but in a TDD way.</p>","title":"test_<code>connector_name</code>_auth.py"},{"location":"developers/connectors/cex-connector-development/#methods-development_1","text":"","title":"Methods development"},{"location":"developers/connectors/cex-connector-development/#rest_1","text":"<code>rest_authenticate</code>  <p>  test_add_auth_headers/params_to_get_request_without_params</p> <p>  rest_authenticate</p> <p>  test_add_auth_headers/params_to_get_request_with_params</p> <p>  test_add_auth_headers/params_to_post_request</p>","title":"REST"},{"location":"developers/connectors/cex-connector-development/#websocket_1","text":"<p><code>ws_authenticate</code></p>","title":"WEBSOCKET"},{"location":"developers/connectors/cex-connector-development/#user-stream-data-source","text":"","title":"User Stream Data Source"},{"location":"developers/connectors/cex-connector-development/#connector_name_api_order_book_data_sourcepy_1","text":"<p>  Copy the ByBit connector user stream data source file.</p> <p> Replace ByBit for <code>connector_name</code> with the first letter in uppercase.</p> <p> Replace ByBit for <code>connector_name</code>.</p> <p> Replace the <code>HEARTBEAT_TIME_INTERVAL</code> with the appropriate value.</p> <p> Check if you need <code>LISTEN_KEY_KEEP_ALIVE_INTERVAL</code>.</p> <p> Check if you need Time Sync or delete it.</p>","title":"<code>connector_name</code>_api_order_book_data_source.py"},{"location":"developers/connectors/cex-connector-development/#test_connector_name_api_order_book_data_sourcepy_1","text":"<p>  Copy the ByBit the test of the order book data source file.</p> <p>  Replace ByBit for <code>connector_name</code> with the first letter in uppercase.</p> <p>  Replace ByBit for <code>connector_name</code>.</p> <p>  Check if you need Time Sync or delete it.</p>    <p>Now we are going to start implementing the functionalities of the Order Book Data source but in a TDD way.</p>","title":"test_<code>connector_name</code>_api_order_book_data_source.py"},{"location":"developers/connectors/cex-connector-development/#methods-development_2","text":"","title":"Methods development"},{"location":"developers/connectors/cex-connector-development/#websocket_2","text":"<code>last_recv_time</code> <code>listen_for_user_stream</code>  <p>  test_listen_for_user_stream_subscribes_to_orders_and_balances_events<code>change for test_listen_for_user_stream_successful</code>?</p> <p> listen_for_user_stream <code>change for listen_for_subscriptions</code></p> <p> _authenticate_connection</p> <p> _process_ws_messages</p> <p> test_listen_for_user_stream_auth</p> <p> test_listen_for_user_stream_does_not_queue_pong_payload</p> <p> test_listen_for_user_stream_auth_failed_throws_exception</p> <p> test_listen_for_user_stream_iter_message_throws_exception</p> <p> test_listen_for_subscriptions_sends_ping_message_before_ping_interval_finishes</p> <p> test_listen_for_user_stream_sends_ping_message_before_ping_interval_finishes</p>","title":"<code>WEBSOCKET</code>"},{"location":"developers/connectors/cex-connector-development/#exchange","text":"","title":"Exchange"},{"location":"developers/connectors/cex-connector-development/#connector_name_api_order_book_data_sourcepy_2","text":"<p>  Copy the ByBit connector user stream data source file.</p> <p>  Replace ByBit for <code>connector_name</code> with the first letter in uppercase.</p> <p>  Replace ByBit for <code>connector_name</code>.</p>","title":"<code>connector_name</code>_api_order_book_data_source.py"},{"location":"developers/connectors/cex-connector-development/#test_connector_name_api_order_book_data_sourcepy_2","text":"<p>  Copy the ByBit the test of the order book data source file.</p> <p>  Replace ByBit for <code>connector_name</code> with the first letter in uppercase.</p> <p>  Replace ByBit for <code>connector_name</code>.</p>","title":"test_<code>connector_name</code>_api_order_book_data_source.py"},{"location":"developers/connectors/cex-connector-development/#methods-development_3","text":"","title":"Methods development"},{"location":"developers/connectors/cex-connector-development/#supported_order_types","text":"<p>  test_supported_order_types</p> <p>  suport_order_types</p>","title":"<code>supported_order_types</code>"},{"location":"developers/connectors/cex-connector-development/#check_network_success","text":"<p>  test_check_network_success</p> <p>  check_network</p> <p>  test_check_network_failure</p> <p>  test_check_network_raises_cancel_exception</p>","title":"<code>check_network_success</code>"},{"location":"developers/connectors/cex-connector-development/#update_trading_rules","text":"<p>  test_update_trading_rules</p> <p>  update_trading_rules</p>","title":"<code>update_trading_rules</code>"},{"location":"developers/connectors/cex-connector-development/#get_fee","text":"","title":"<code>get_fee</code>"},{"location":"developers/connectors/cex-connector-development/#initial_status_dict","text":"<p>  test_initial_status_dict</p> <p>  status_dict</p>","title":"<code>initial_status_dict</code>"},{"location":"developers/connectors/cex-connector-development/#client_order_id_on_order","text":"<p>  test_client_order_id_on_order</p> <p>  get_new_client_order_id</p> <p>  buy</p> <p>  sell</p> <p>  _create_order</p> <p>  quantize_order_price (already implemented)</p> <p>  quantize_order_amount (already implemented)</p> <p>  get_order_price_quantum (already implemented)</p> <p>  get_order_size_quantum (already implemented)</p> <p>  quantize_order_amount (already implemented)</p>","title":"<code>client_order_id_on_order</code>"},{"location":"developers/connectors/cex-connector-development/#restore_tracking_states","text":"<p>  test_restore_tracking_states_only_registers_open_orders (already implemented)</p> <p>  restore_tracking_states (already implemented)</p>","title":"<code>restore_tracking_states</code>"},{"location":"developers/connectors/cex-connector-development/#create_limit_order","text":"<p>  test_create_limit_order_successfully</p> <p>  _simulate_trading_rules_initialized</p> <p>  _validate_auth_credentials_present</p> <p>  _create_order</p>","title":"<code>create_limit_order</code>"},{"location":"developers/connectors/cex-connector-development/#create_limit_maker_order","text":"test_create_limit_maker_order_successfully","title":"<code>create_limit_maker_order</code>"},{"location":"developers/connectors/cex-connector-development/#create_market_order","text":"test_create_market_order_successfully","title":"<code>create_market_order</code>"},{"location":"developers/connectors/cex-connector-development/#create_order_fails","text":"","title":"<code>create_order_fails</code>"},{"location":"developers/connectors/cex-connector-development/#cancel_order","text":"<p>  test_cancel_order_successfully</p> <p>  cancel</p> <p>  _execute_cancel</p> <p>  test_cancel_order_raises_failure_event_when_request_fails</p> <p>  test_cancel_order_without_exchange_order_id_marks_order_as_fail_after_retries?</p>","title":"<code>cancel_order</code>"},{"location":"developers/connectors/cex-connector-development/#cancel_all","text":"<p>  test_cancel_two_orders_with_cancel_all_and_one_fails</p> <p>  cancel_all</p>","title":"<code>cancel_all</code>"},{"location":"developers/connectors/cex-connector-development/#update_time_synchronizer","text":"<p>  test_update_time_synchronizer_successfully</p> <p>  _update_time_synchronizer</p> <p>  test_update_time_synchronizer_failure_is_logged</p> <p>  test_update_time_synchronizer_raises_cancelled_error</p>","title":"<code>update_time_synchronizer</code>"},{"location":"developers/connectors/cex-connector-development/#update_balances","text":"<p>  test_update_balances</p> <p>  _update_balances</p> <p>  get_all_balances</p>","title":"<code>update_balances</code>"},{"location":"developers/connectors/cex-connector-development/#update_order_status","text":"<p>  test_update_order_status_when_filled</p> <p>  _update_order_status</p> <p>  CONSTANTS ORDER STATE</p>","title":"<code>update_order_status</code>"},{"location":"developers/connectors/cex-connector-development/#_user_stream_event_listener","text":"<p>  test_user_stream_update_for_new_order_does_not_update_status</p> <p> _user_stream_event_listener</p> <p> test_user_stream_update_for_cancelled_order</p> <p> test_user_stream_balance_update</p>   <p>  Add <code>connector_name</code>_api_key and <code>connector_name</code>_api_secret to the conf_global_TEMPLATE.yml</p>","title":"<code>_user_stream_event_listener</code>"},{"location":"developers/connectors/debug/","text":"<p>This section will break down some ways to debug and test the code. You are not required to use these options during your development process, but they will greatly help you in it.</p>  <p>Warning</p> <p>As part of the QA process, you are required to include the unit test cases for the code review process to begin. Refer to Option 1: Unit Test Cases to build your unit tests.</p>","title":"Debugging &amp; Testing"},{"location":"developers/connectors/debug/#option-1-unit-test-cases","text":"<p>You are required to provide at least 80% of unit-test code coverage to have your contribution accepted in the <code>hummingbot</code> repository. Examples of unit-tests can be found in the test/integration folder.</p>  <p>Warning</p> <p>When writing unit-tests for submission with your PR, take extra care not to include any API authentication credentials.</p>   <p>Warning</p> <p>Unit-tests submitted for merging in the code base must not access any external servers directly. All server API communications must be mocked \u2014 refer to existing examples provided by the exchange you are basing your implementation on for guidance.</p>","title":"Option 1. Unit Test Cases"},{"location":"developers/connectors/debug/#option-2-aiopython-console","text":"<p>This option is mainly used to test for specific functions. Considering that many of the functions are asynchronous functions,  it would be easier to test for these in the aiopython console. Click here for some documentation on how to use aiopython.</p> <p>Writing short code snippets to examine API responses and/or how certain functions in the code base work would help you understand the expected side-effects of these functions and the overall logic of the Hummingbot client.</p>","title":"Option 2. aiopython console"},{"location":"developers/connectors/debug/#issue-a-api-request","text":"<p>Below is just a short example on how to write a short asynchronous function to mimic a API request to place an order and displaying the response received.</p> <pre><code># Prints the response of a sample LIMIT-BUY Order\n# Replace the URL and params accordingly.\n\n&gt;&gt;&gt; import aiohttp\n&gt;&gt;&gt; URL=\"api.test.com/buyOrder\"\n&gt;&gt;&gt; params = {\n...     \"symbol\": \"ZRXETH\",\n...     \"amount\": \"1000\",\n...     \"price\": \"0.001\",\n...     \"order_type\": \"LIMIT\"\n... }\n&gt;&gt;&gt; async with aiohttp.ClientSession() as client:\n...    async with client.request(\"POST\",\n...                              url=URL,\n...                              params=params) as response:\n...        if response == 200:\n...            print(await response.json())\n</code></pre>","title":"Issue a API Request"},{"location":"developers/connectors/debug/#calling-a-class-method","text":"<p>i.e. Printing the output from <code>get_active_exchange_markets()</code> function in <code>OrderBookTrackerDataSource</code>.</p> <pre><code># In this example, we will be using BittrexAPIOrderBookDataSource\n\n&gt;&gt;&gt; from hummingbot.market.bittrex.BittrexAPIOrderBookDataSource import BittrexAPIOrderBookDataSource as b\n&gt;&gt;&gt; await b.get_active_exchange_markets() \n\n                 askRate baseAsset        baseVolume  ...             volume     USDVolume old_symbol\nsymbol                                                ...\nBTC-USD    9357.49900000       BTC  2347519.11072768  ...       251.26097386  2.351174e+06    USD-BTC\nXRP-BTC       0.00003330       XRP       83.81218622  ...   2563786.10102864  7.976883e+05    BTC-XRP\nBTC-USDT   9346.88236735       BTC   538306.04864142  ...        57.59973765  5.379616e+05   USDT-BTC\n.\n.\n.\n[339 rows x 18 columns]\n</code></pre>","title":"Calling a Class Method"},{"location":"developers/connectors/debug/#option-3-custom-scripts","text":"<p>This option, like in Option 2, is mainly used to test specific functions. This is mainly useful when debugging how various functions/classes interact with one another.</p> <p>e.g. Initializing a simple websocket connection to listen and output all captured messages to examine the user stream message when placing/cancelling an order.  This is helpful when determining the exact response fields to use.</p> <p>e.g. A simple function to craft the Authentication signature of a request. This together with POSTMAN can be used to check if you are generating the appropriate authentication signature for the respective requests.</p>","title":"Option 3. Custom Scripts"},{"location":"developers/connectors/debug/#api-request-post-order","text":"<p>Below is a sample code for POST-ing a LIMIT-BUY order on Bittrex. This script not only tests the <code>BittrexAuth</code> class but also outputs the response from the API server. </p> <pre><code>#!/usr/bin/env python3\n\nimport asyncio\nimport aiohttp\nfrom typing import Dict\nfrom hummingbot.connector.exchange.bittrex.bittrex_auth import BittrexAuth\n\nBITTREX_API_ENDPOINT = \"https://api.bittrex.com/v3\"\n\nasync def _api_request(http_method: str,\n                       path_url: str = None,\n                       params: Dict[str, any] = None,\n                       body: Dict[str, any] = None,\n                       ):\n    url = f\"{BITTREX_API_ENDPOINT}{path_url}\"\n\n    auth = BittrexAuth(\n        \"****\",\n        \"****\"\n    )\n\n    auth_dict = auth.generate_auth_dict(http_method, url, params, body, '')\n\n    headers = auth_dict[\"headers\"]\n\n    if body:\n        body = auth_dict[\"body\"]\n\n    client = aiohttp.ClientSession()\n\n    async with client.request(http_method,\n                              url=url,\n                              headers=headers,\n                              params=params,\n                              data=body) as response:\n        data: Dict[str, any] = await response.json()\n        if response.status not in [200,201]:\n            print(f\"Error occurred. HTTP Status {response.status}: {data}\")\n        print(data)\n\n# POST order\npath_url = \"/orders\"\n\nbody = {\n    \"marketSymbol\": \"FXC-BTC\",\n    \"direction\": \"BUY\",\n    \"type\": \"LIMIT\",\n    \"quantity\": \"1800\",\n    \"limit\": \"3.17E-7\",  # Note: This will throw an error\n    \"timeInForce\": \"GOOD_TIL_CANCELLED\"\n}\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(_api_request(\"POST\",path_url=path_url,body=body))\nloop.close()\n</code></pre>","title":"API Request: POST Order"},{"location":"developers/connectors/debug/#option-4-using-debugger-tools","text":"<p>This section will detail the necessary configurations/setup required to run the debugger tool from your IDE of choice.</p>","title":"Option 4: Using Debugger tools."},{"location":"developers/connectors/debug/#vs-code","text":"<p>Include the following debug configurations into the <code>launch.json</code> configuration file</p> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Python: Hummingbot Application\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceRoot}/bin/hummingbot.py\",\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n</code></pre> <p>By executing the <code>Start Debugging</code> command, the debugger will automatically attach itself to the Hummingbot process. The Hummingbot app will appear in the <code>integratedTerminal</code>. You may change this as desired.</p>","title":"VS Code"},{"location":"developers/connectors/debug/#pycharm","text":"<p>Similarly, for PyCharm, you want to set up the debug configurations, as seen in the screenshot below.</p> <p></p>  <p>Note</p> <p>As of this writing, there is no way to add breakpoints/log points to any of the Cython code in VSCode or PyCharm.</p>","title":"PyCharm"},{"location":"developers/connectors/test/","text":"","title":"QA Testing Process"},{"location":"developers/connectors/test/#basic-validations","text":"","title":"Basic validations"},{"location":"developers/connectors/test/#connecting-an-api-key","text":"<ul> <li>Connects when a valid API key is added.</li> <li>Throws an error or warning if the API key is invalid, expired, or has other issues.</li> <li>The same API key can be used on multiple bots unless specified that can only be used in one instance at a time.</li> </ul>","title":"Connecting an API key"},{"location":"developers/connectors/test/#connecting-an-api-key_1","text":"<ul> <li>Displays the current available balance and should match the balance shown in the exchange.</li> <li>The allocation should be updated whenever there is an open order.</li> </ul>","title":"Connecting an API key"},{"location":"developers/connectors/test/#market-availability-during-strategy-creation","text":"<ul> <li>Autocomplete lists should be available when selecting a market during strategy creation.</li> <li>All markets should work when the created strategy is started.</li> </ul>","title":"Market availability during strategy creation"},{"location":"developers/connectors/test/#order-submission-and-cancellation","text":"<ul> <li>Created orders must include an order ID with broker prefix if there is.</li> <li>Orders are submitted without any error in the client.</li> <li>Submitted order should match the information of the open order in the exchange.</li> <li>Orders are canceled without any error.Orders are not getting stuck or left out unless it is a manual order.</li> <li>The client should not cancel orders that are not created within the instance such as manual orders, orders created by other instances, or third-party bots.</li> <li>Gracefully rejects/cancels orders that don\u2019t pass the exchange rule.</li> </ul>","title":"Order submission and cancellation"},{"location":"developers/connectors/test/#data-integrity","text":"<ul> <li>Orders book in the client is in sync with the order book in the exchange.</li> <li>Constantly update whenever there is a change in the exchange.</li> <li>Prices are updated constantly (status and ticker) whenever there is a change in the exchange.</li> </ul>","title":"Data integrity"},{"location":"developers/connectors/test/#filled-event","text":"","title":"Filled event"},{"location":"developers/connectors/test/#advanced-validations","text":"","title":"Advanced validations"},{"location":"developers/connectors/test/#compatibility-with-available-strategies","text":"<ul> <li>The connector should work on any of the strategies available in the client unless the connector is intended for a specific strategy.</li> <li>The connector should work both as a maker and taker exchange (spot connectors only)</li> </ul>","title":"Compatibility with available strategies"},{"location":"developers/connectors/test/#price-updates-and-balance-updates","text":"<ul> <li>In the status window, the prices are constantly being updated whenever a change takes place in the order book.</li> <li>Available balances are updated whenever an order is created or canceled.</li> <li>A consistent number of orders are created except if there are multiple bots using the asset, there are hanging orders or an order is removed due to a specific parameter.</li> </ul>","title":"Price updates and balance updates"},{"location":"developers/connectors/test/#fast-refresh-rate","text":"<ul> <li>Gracefully cancels orders: No stuck or lost orders, and balance updates accordingly.</li> <li>There should be no error in the logs during the fast cancellation.</li> <li>Filled orders are tracked and saved if a filled event took place.</li> <li>Rate limit warnings are thrown whenever the request is close to maximizing the allowed limit.</li> <li>Stops placing an order when the rate limit is reached but maintains the connectivity with the exchange.</li> </ul>","title":"Fast refresh rate"},{"location":"developers/connectors/test/#long-refresh-rate","text":"<ul> <li>Maintains connectivity when there is an open order.</li> <li>Gracefully cancel an order when not filled.</li> <li>No error should come up during the period that an order is opened (exceptions if there are network issues).</li> <li>If a network issue took place, the open orders should be tracked once the connection is established.</li> <li>Tracked and save filled events that may happen during a disconnection.</li> </ul>","title":"Long refresh rate"},{"location":"developers/connectors/test/#multiple-orders","text":"<ul> <li>Simultaneously submitting multiple orders without any error.</li> <li>Simultaneously cancels all the orders without any error.</li> <li>Available balance and allocations are adjusted accordingly.</li> <li>Order amounts and levels are adjusted accordingly based on the available balance.</li> </ul>","title":"Multiple orders"},{"location":"developers/connectors/test/#hanging-orders","text":"<ul> <li>Continuously tracked hanging orders created within the instance.</li> <li>Tracked and saved a filled hanging order.</li> <li>Hanging order should be canceled whenever the strategy is stopped or reached the cancelation percentage.</li> <li>Hanging orders remain uncanceled whenever non-hanging orders are refreshed.</li> <li>No hanging order duplication.</li> </ul>","title":"Hanging orders"},{"location":"developers/connectors/test/#multiple-bots","text":"<ul> <li>Open orders in each bot should not be affected by cancelation events happening in another bot.</li> <li>There should be no conflicting order IDs.</li> </ul>","title":"Multiple bots"},{"location":"developers/connectors/test/#history-command","text":"<ul> <li>Correctly display filled order information.</li> <li>No duplicate orders.</li> <li>Handles partial fills.</li> <li>Display only orders created by the instance.</li> <li>Correctly displays asset information.</li> </ul>","title":"<code>history</code> command"},{"location":"developers/connectors/test/#trade-fees","text":"<ul> <li>Should use the actual trade fees if available or otherwise the assumed fee levels.</li> <li>The transaction fee recorded in the client (CSV or SQLite) should match the fee shown in the trade history in the exchange.</li> </ul>","title":"Trade fees"},{"location":"developers/connectors/test/#heartbeat","text":"<ul> <li>When enabled, all filled trade volume by exchange is aggregated and reported.</li> <li>If the bot is stopped and a filled event took place within the heartbeat interval, it is still aggregated.</li> </ul>","title":"Heartbeat"},{"location":"developers/connectors/architecture/","text":"<p></p> <p>The Architecture Diagram, given above, depicts the high-level design of a Connector. </p>  <p>Tip</p> <p>Notice that for <code>Derivative</code> connectors, we have a multiple inheritance to <code>ExchangeBase</code> and <code>PerpetualTrading</code>.</p>","title":"Connector Architecture"},{"location":"developers/connectors/architecture/#connector-component-overview","text":"<p></p> <p>Each connector is comprised of the following components. Below are the detailed descriptions of tasks for each component and its corresponding files.</p>","title":"Connector Component Overview"},{"location":"developers/connectors/architecture/#exchangederivativepy","text":"<p>File: <code>*_exchange/derivative.py</code> \u2014 REQUIRED</p> <p>Connector modules are centered around an <code>Exchange/Derivative</code> class, which are ultimately children of <code>ConnectorBase</code>. Each <code>Exchange/Derivative</code> class contains an <code>OrderBookTracker</code> and <code>UserStreamTracker,</code> and they are responsible for maintaining order books and user account information.</p> <p><code>Exchange/Derivative</code> instances also contain a <code>ClientOrderTracker</code> which tracks the connector's <code>InFlightOrders</code>, which are orders placed by Hummingbot currently on the order book. Typically, it is also helpful to have an exchange-specific <code>Auth</code> class, which generates the necessary authentication parameters/headers to access restricted REST endpoints and WebSocket channel, such as for placing orders and listening for order updates.</p> <p>The <code>Derivative</code> class in particular inherits functions that are specifically used in perpetual markets. See the <code>PerpetualTrading</code> class for more info.</p>","title":"Exchange/Derivative.py"},{"location":"developers/connectors/architecture/#connectorauthpy","text":"<p>File: <code>*_auth.py</code> \u2014 OPTIONAL</p> <p>This class generates the appropriate authentication headers for the restricted REST endpoints to be used by the <code>Exchange/Derivative</code> and <code>UserStreamTrackerDataSource</code> classes. Generally, this would mean constructing the appropriate HTTP headers and authentication payload(as specified by the exchange's API documentation)</p> <p>Some arguments tend to include:</p> <ul> <li>HTTP Request Type</li> <li>Endpoint URL</li> <li>Mandatory parameters to pass on to the exchange (e.g. API key, passphrase, request body)</li> </ul> <p>Depending on the specific exchange, different information may be needed for authentication. Typically, the <code>Auth</code> class will:</p> <ul> <li>Generate a timestamp/nonce.   Generate a signature based on the time, access method, endpoint, provided parameters, and the user's private key.</li> <li>Compile the public key, timestamp, provided parameters, and signature into a dictionary to be passed via an <code>http</code> or <code>ws</code> request.</li> </ul>  <p>Note</p> <p>This module is typically required for centralized exchange only. Generally, auth for DEXs is handled by the respective wallet.</p>","title":"ConnectorAuth.py"},{"location":"developers/connectors/architecture/#orderbooktracker","text":"<p>File: <code>*_order_book_tracker.py</code> \u2014 REQUIRED</p> <p>Each <code>Exchange/Derivative</code> class contains an <code>OrderBookTracker</code> to maintain a real-time order book of one/multiple trading pairs and is responsible for applying the order book snapshots and diff messages to the corresponding <code>OrderBook</code>.</p> <ul> <li>An <code>OrderBookTracker</code> contains a Dictionary of <code>OrderBook</code> for each trading pair it is maintaining.</li> <li><code>APIOrderBookTrackerDataSource</code> class contains either API requests or WebSocket feeds to pull order book data from the exchange.</li> <li>The <code>OrderBook</code> class contains methods that convert raw order book snapshots/diff messages from exchanges into usable dictionaries of active bids and asks.</li> </ul>","title":"OrderBookTracker"},{"location":"developers/connectors/architecture/#userstreamtracker","text":"<p>File: <code>*_user_stream_tracker.py</code> \u2014 OPTIONAL</p> <p>Each <code>Exchange/Derivative</code> class contains a <code>UserStreamTracker</code>, to maintain the current state of the user's account, orders and positions.</p> <ul> <li><code>APIUserStreamTrackerDataSource</code> class contains either API requests or WebSocket feeds to maintain user balance and order data from the exchange.</li> <li>The <code>Auth</code> passed from the <code>Exchange/Derivative</code> class contains methods to construct the appropriate authentication requests for REST API calls or WebSocket channel subscription requests.</li> </ul>","title":"UserStreamTracker"},{"location":"developers/connectors/architecture/#orderbooktrackerdatasource","text":"<p>File: <code>*_order_book_data_source.py</code> \u2014 REQUIRED</p> <p>The <code>OrderBookTrackerDataSource</code> class is responsible for order book data retrieval. It simply collects, parses, and queues the data stream to be processed by <code>OrderBookTracker</code>. Generally, this would mean pulling data from the exchange's API/WebSocket servers. For Perpetual connectors, the <code>OrderBookTrackerDataSource</code> is also tasked with maintaining the funding information of the active market.</p> <p>It is necessary to track the timestamp/nonce of each message received from the exchange API servers to maintain a consistent and up-to-date order book. Depending on the exchange responses, we can keep an order book in the following ways:</p> <ol> <li>Presence of Timestamp/Nonce</li> <li>In this ideal scenario, we will only 'apply' delta messages onto the order book if and only if the timestamp/nonce of the message received is above or +1 of <code>_last_diff_uid</code> in the order book.</li> <li>Absence of Timestamp/Nonce</li> <li>In this scenario, we would have to assign a timestamp to every message received from the exchange and apply the delta messages sequentially only if it is received after the snapshot message and greater than the <code>_last_diff_uid</code>.</li> </ol>  <p>Note</p> <p>It is important that the order book being maintained reflects all changes and is consistent with the order book on the exchange. As a safeguard/fallback, in the event when Hummingbot is unable to adequately maintain the order book, executing periodic order book snapshot requests can help to ensure that any deltas missed would be corrected.</p>","title":"OrderBookTrackerDataSource"},{"location":"developers/connectors/architecture/#userstreamtrackerdatasource","text":"<p>File: <code>*_user_stream_data_source.py</code> \u2014 OPTIONAL</p> <p>The <code>UserStreamTrackerDataSource</code> class deals with user data retrieval. It simply collects, parses and queues the data stream to be processed by <code>UserStreamTracker</code>.</p> <p>Unlike <code>OrderBookTrackerDataSource</code>, <code>UserStreamTrackerDataSource</code> only retrieves data about user account balances and orders.</p>","title":"UserStreamTrackerDataSource"},{"location":"developers/connectors/architecture/#inflightorder","text":"<p>File: <code>/hummingbot/core/data_type/in_flight_order.py</code></p> <p>Stores all details pertaining to the current state of an order.</p> <p>It is important to keep a consistent and accurate state of all active orders placed by the user. This ensures that the strategies are given the correct information and are able to perform their tasks accordingly.</p>","title":"InFlightOrder"},{"location":"developers/connectors/architecture/#clientordertracker","text":"<p>File: <code>/hummingbot/connector/client_order_tracker.py</code></p> <p>An instance of <code>ClientOrderTracker</code> holds and manages <code>InFlightOrders</code> by calling the connector's <code>trigger_event</code> method.</p> <p>Provides utilities for connectors to update in-flight orders and to handle order errors.</p> <p>For more details on how to begin implementing the components, please refer to the Connector Tutorial</p>","title":"ClientOrderTracker"},{"location":"developers/connectors/architecture/#protocol-connector-components-overview-tbd","text":"<p>Coming soon.</p>","title":"Protocol Connector Components Overview [TBD]"},{"location":"developers/connectors/architecture/#fee-accounting","text":"<p>The <code>BudgetChecker</code> uses the information from a <code>TradeFeeSchema</code> to generate a specific instance of <code>TradeFeeBase</code> that is then applied to an <code>OrderCandidate</code> in order to asses the order's effects on account balances.</p>","title":"Fee Accounting"},{"location":"developers/connectors/architecture/#tradefee","text":"<p>The <code>TradeFee</code> object contains the necessary information to account for fees when estimating an order's impact on account balances.</p>","title":"TradeFee"},{"location":"developers/connectors/architecture/#tradefeeschema","text":"<p>Contains the necessary information to build the <code>TradeFee</code> object. For both makers and takers specifies percent and fixed fees, and tokens in which the fees are paid. Exchanges must specify their respective default schemas inside their <code>[exchange]_utils.py</code> files: <pre><code>DEFAULT_FEES = TradeFeeSchema(\n    maker_percent_fee_decimal=Decimal(\"0.001\"),\n    taker_percent_fee_decimal=Decimal(\"0.001\")\n)\n</code></pre></p> <ul> <li><code>percent_fee_token: str</code></li> <li><code>maker_percent_fee_decimal: Decimal</code></li> <li><code>taker_percent_fee_decimal: Decimal</code></li> <li><code>buy_percent_fee_deducted_from_returns: bool</code></li> <li><code>maker_fixed_fees: List</code></li> <li><code>taker_fixed_fees: List</code></li> </ul>","title":"TradeFeeSchema"},{"location":"developers/connectors/architecture/#tradefeebase","text":"<p>A specific instance of the <code>TradeFeeBase</code> class defines the fees to be applied to an order - their types, amounts and assets.</p> <ul> <li><code>fee_amount_in_quote()</code>: calculates a total fee in quote asset units as a combination of a percentage fee and fixed fees</li> <li><code>get_fee_impact_on_order_cost()</code>: returns order cost for a particular position opening <code>OrderCandidate</code> with fees accounted for</li> <li><code>get_fee_impact_on_order_returns()</code>: returns order returns for a particular position closing <code>OrderCandidate</code> with fees accounted for</li> </ul>","title":"TradeFeeBase"},{"location":"developers/connectors/architecture/#addedtocosttradefee","text":"<p>Extends <code>TradeFeeBase</code>, implements <code>get_fee_impact_on_order_cost()</code>, <code>get_fee_impact_on_order_returns()</code>. Fees of this class are applied on top of the cost of a buy order (e.g. a buy order of 10 COINX at 9 USDT with a fee of 1% means that the user's account will be deducted 90.9 USDT and added 10 COINX \u2014 this is most exchanges' approach to fees).</p>","title":"AddedToCostTradeFee"},{"location":"developers/connectors/architecture/#deductedfromreturnstradefee","text":"<p>Extends <code>TradeFeeBase</code>, implements <code>get_fee_impact_on_order_cost()</code>, <code>get_fee_impact_on_order_returns()</code>. Fees of this class are deducted from the returns of a buy order (e.g. a buy order of 10 COINX at 9 USDT with a fee of 1% means that the user's account will be deducted 90 USDT and added 9.9 COINX \u2014 this is Binance's approach to fees).</p>","title":"DeductedFromReturnsTradeFee"},{"location":"developers/connectors/architecture/#example-tradefeeschema","text":"<pre><code>trade_fee_schema = TradeFeeSchema(\n    maker_percent_fee_decimal=Decimal(\"1.0\"),\n    taker_percent_fee_decimal=Decimal(\"2.3\")\n)\n</code></pre>","title":"Example - <code>TradeFeeSchema</code>"},{"location":"developers/connectors/architecture/#example-tradefee","text":"<pre><code>from hummingbot.client.settings import AllConnectorSettings\n\ntrade_fee_schema = AllConnectorSettings.get_connector_settings()[exchange].trade_fee_schema\n\npercent = trade_fee_schema.maker_percent_fee_decimal if is_maker else trade_fee_schema.taker_percent_fee_decimal\nfixed_fees = trade_fee_schema.maker_fixed_fees if is_maker else trade_fee_schema.taker_fixed_fees\n\ntrade_fee = AddedToCostTradeFee(percent, trade_fee_schema.percent_fee_token, fixed_fees)\n</code></pre>","title":"Example - <code>TradeFee</code>"},{"location":"developers/connectors/architecture/api_throttler/","text":"<p>This section will detail the necessary steps to integrate the <code>AsyncThrottler</code> into the connector. The <code>AsyncThrottler</code> class utilizes asynchronous context managers to throttle API and/or WebSocket requests and avoid reaching the exchange's server rate limits.</p>  <p>Note</p>  <p>The integration of the <code>AsyncThrottler</code> into the connector is entirely optional, but it is recommended to enable a better user experience as well as allowing users to manually configure the usable rate limits per Hummingbot instance.</p>","title":"API Throttler"},{"location":"developers/connectors/architecture/api_throttler/#ratelimit-linkedlimitweightpair-data-classes","text":"<p>The <code>RateLimit</code> data class is used to represent a rate limit defined by exchanges, while the <code>LinkedLimitWeightPair</code> data class is used to associate an endpoint consumption weight to its API Pool (defaults to 1 if it is not specified)</p>  <p>Note</p>  <p><code>limit_id</code> can be any arbitrarily assigned value. In the examples given in the next few sections, the <code>limit_id</code> assigned to the various rate limits are either a generic API pool name or the path url of the API endpoint.</p>","title":"RateLimit &amp; LinkedLimitWeightPair Data classes"},{"location":"developers/connectors/architecture/api_throttler/#types-of-rate-limits","text":"<p>There are several types of rate limits that can be handled by the <code>AsyncThrottler</code> class. The following sections will detail (with examples) how to initialize the necessary <code>RateLimit</code> and the interaction between the connector and the throttler for each of the different rate limit types.</p>  <p>Warning</p>  <p>It is important to identify the exchange's rate limit implementation.</p>","title":"Types of Rate Limits"},{"location":"developers/connectors/architecture/api_throttler/#1-rate-limit-per-endpoint","text":"<p>This refers to rate limits that are applied on a per endpoint basis. For this rate limit type, the key information to retrieve for each endpoint would be its assigned limit and time interval. Note that the time interval is on a rolling basis. For example, if an endpoint's rate limit is 20 and the time interval is 60, this meant that the throttler will check if there are 20 calls made (to the same endpoint) within the past 60 seconds from the current moment.</p>  <p>Note</p>  <p>Examples of existing connectors that utilizes this rate limit implementation are: (1) Kucoin (2) Crypto.com</p>","title":"1. Rate Limit per endpoint"},{"location":"developers/connectors/architecture/api_throttler/#configuring-rate-limits","text":"<p>As mentioned above, the key information to retrieve from the exchange are the <code>limit</code> and <code>time_interval</code> (in seconds) of each endpoint. We will be referencing the Crypto.com connector as an example for exchanges that implement rate limits per endpoint.</p>  <p>Note</p>  <p>Rate Limits for Crypto.com can be found here.</p> <p>All the rate limits are to be initialized in the <code>crypto_constants.py</code> file.</p> <pre><code>RATE_LIMITS = [\n    RateLimit(limit_id=CHECK_NETWORK_PATH_URL, limit=100, time_interval=1),\n    RateLimit(limit_id=GET_TRADING_RULES_PATH_URL, limit=100, time_interval=1),\n    RateLimit(limit_id=CREATE_ORDER_PATH_URL, limit=15, time_interval=0.1),\n    RateLimit(limit_id=CANCEL_ORDER_PATH_URL, limit=15, time_interval=0.1),\n    RateLimit(limit_id=GET_ACCOUNT_SUMMARY_PATH_URL, limit=3, time_interval=0.1),\n    RateLimit(limit_id=GET_ORDER_DETAIL_PATH_URL, limit=30, time_interval=0.1),\n    RateLimit(limit_id=GET_OPEN_ORDERS_PATH_URL, limit=3, time_interval=0.1),\n]\n</code></pre>  <p>Note</p>  <p><code>time_interval</code> here is in seconds. i.e. The rate limits for <code>CREATE_ORDER_PATH_URL</code> is 15 requests every 100ms</p>","title":"Configuring Rate Limits"},{"location":"developers/connectors/architecture/api_throttler/#2-rate-limit-pools","text":"<p>Rate limit pools refer to a group of endpoints that consumes from a single rate limit. For this rate limit type, the key information to retrieve for each endpoint are its assigned pool(s) and its respective limit and time interval.</p>  <p>Note</p>  <p>Examples of existing connectors that utilizes this rate limit implementation are: (1) Binance, Binance Perpetual (2) Ndax</p>","title":"2. Rate Limit Pools"},{"location":"developers/connectors/architecture/api_throttler/#configuring-rate-limits_1","text":"<p>An example of an exchange implementing this can be seen in the Ndax connector.</p> <p>Note</p> <p>All the rate limit are initialized in the <code>ndax_constants.py</code> file.</p> <pre><code># Pool IDs\nHTTP_ENDPOINTS_LIMIT_ID = \"AllHTTP\"\nWS_ENDPOINTS_LIMIT_ID = \"AllWs\"\n\nRATE_LIMITS = [\n  # REST API Pool(applies to all REST API endpoints)\n  RateLimit(limit_id=HTTP_ENDPOINTS_LIMIT_ID, limit=HTTP_LIMIT, time_interval=MINUTE),\n  # WebSocket Pool(applies to all WS requests)\n  RateLimit(limit_id=WS_ENDPOINTS_LIMIT_ID, limit=WS_LIMIT, time_interval=MINUTE),\n  # Public REST API endpoint\n  RateLimit(\n      limit_id=MARKETS_URL,\n      limit=HTTP_LIMIT,\n      time_interval=MINUTE,\n      linked_limits=[LinkedLimitWeightPair(HTTP_ENDPOINTS_LIMIT_ID)],\n  ),\n  # WebSocket Auth endpoint\n  RateLimit(\n      limit_id=ACCOUNT_POSITION_EVENT_ENDPOINT_NAME,\n      limit=WS_LIMIT,\n      time_interval=MINUTE,\n      linked_limits=[LinkedLimitWeightPair(WS_ENDPOINTS_LIMIT_ID)],\n  ),\n]\n</code></pre>  <p>Note</p>  <p>Notice that we assign an abitruary limit id (i.e. <code>HTTP_ENDPOINTS_LIMIT_ID</code>) to the API pools and we use the <code>LinkedLimitWeightPair</code> to assign an endpoint to the API pool. Also do note that an endpoint may belong to multiple other endpoints. It is also worth noting that there can be more complex implementations to API pools as seen in the ByBit Perpetual connector here.</p>","title":"Configuring Rate Limits"},{"location":"developers/connectors/architecture/api_throttler/#3-weighted-request-rate-limits","text":"<p>For weighted rate limits, each endpoint is assigned a request weight. Generally, these exchanges would utilize Rate Limit Pools in conjunction with the request weights, where different endpoints will have a different impact on the given pool. Key information to retrieve for these exchanges are the weights for each endpoint, limits and the time intervals for the API Pool.</p>  <p>Note</p>  <p>Examples of existing connectors that utilizes this rate limit implementation are: (1) Binance, Binance Perpetual</p>","title":"3. Weighted Request Rate Limits"},{"location":"developers/connectors/architecture/api_throttler/#configuring-rate-limits_2","text":"<p>An example of an exchange implementing this type of rate limit can be seen in the Binance connector.</p>  <p>Note</p>  <p>Rate Limits for Binance can be found in the API response for the <code>GET /api/v3/exchangeInfo</code> endpoint here.</p> <pre><code>RATE_LIMITS = [\n    # Pools\n    RateLimit(limit_id=REQUEST_WEIGHT, limit=1200, time_interval=ONE_MINUTE),\n    RateLimit(limit_id=ORDERS, limit=10, time_interval=ONE_SECOND),\n    RateLimit(limit_id=ORDERS_24HR, limit=100000, time_interval=ONE_DAY),\n    # Weighted Limits\n    RateLimit(limit_id=SNAPSHOT_PATH_URL, limit=MAX_REQUEST, time_interval=ONE_MINUTE,\n              linked_limits=[LinkedLimitWeightPair(REQUEST_WEIGHT, 50)]),\n    RateLimit(limit_id=BINANCE_CREATE_ORDER, limit=MAX_REQUEST, time_interval=ONE_MINUTE,\n              linked_limits=[LinkedLimitWeightPair(REQUEST_WEIGHT, 1),\n                             LinkedLimitWeightPair(ORDERS, 1),\n                             LinkedLimitWeightPair(ORDERS_24HR, 1)]),\n]\n</code></pre>  <p>Note</p>  <p>Binance implements API Pools as well as weighted requests. In the example above, the <code>BINANCE_CREATE_ORDER</code> endpoint has a request weight of 1 for 3 API Pools, while the <code>SNAPSHOT_PATH_URL</code> endpopint has a request weight of 50 for the <code>REQUEST_WEIGHT</code> API Pool. Notice that the API Pools have different rate limits and time intervals.</p>","title":"Configuring Rate Limits"},{"location":"developers/connectors/architecture/api_throttler/#integrating-rate-limits-into-the-connector","text":"<p>The throttler should be consumed by all relevant classes that issue server API calls that are limited by the exchange (either http requests or websocket requests). Namely the <code>Exchange/Derivative</code>, <code>APIOrderBookDataSource</code> and <code>UserStreamDataSource</code> classes. Doing so ensures that the throttler manages all REST API/Websocket requests issued by any of the connector components.</p>","title":"Integrating Rate Limits into the connector"},{"location":"developers/connectors/architecture/api_throttler/#consuming-the-throttler","text":"<p>The throttler is used as an asynchronous context manager.</p> <pre><code>    async with throttler.execute_task(path_url):\n        res = await aiohttp.ClientSession().get(path_url)\n</code></pre>  <p>Warning</p>  <p>The <code>path_url</code> must be match the <code>limit_id</code> of the endpoint as defined in the <code>RATE_LIMITS</code> constant. The throttler will match the <code>path_url</code> to its assigned rate limits or API pools.</p>","title":"Consuming the throttler"},{"location":"developers/connectors/architecture/order_lifecycle/","text":"<p>Exchange connectors track status updates of all orders created in Hummingbot and emit events on status updates of its orders for the strategy modules. Be careful when implementing a new exchange connector to ensure all the status updates and emitted events adhere to the semantics defined by Hummingbot.</p>","title":"Order Lifecycle and Market Events"},{"location":"developers/connectors/architecture/order_lifecycle/#order-tracking","text":"<p>Order tracking starts when <code>_create_order()</code> is called. It is called from within the <code>buy()</code> and <code>sell()</code> functions. An exchange connector should keep tracking the order's status and emit events for any change of states until the order is completed, cancelled, expired, or failed.</p>  <p>Note</p>  <p>This is done by calling <code>start_tracking_order()</code> method in the #Exchange# class. <code>start_tracking_order()</code> should be called before the API request for placing the order is executed.</p>","title":"Order Tracking"},{"location":"developers/connectors/architecture/order_lifecycle/#order-lifecycle-flowchart","text":"<p></p>","title":"Order Lifecycle Flowchart"},{"location":"developers/connectors/architecture/order_lifecycle/#creating-an-order","text":"<p>An order is created by invoking <code>buy()</code> or <code>sell()</code> in an exchange connector - usually by a strategy module. <code>buy()</code> and <code>sell()</code> would return immediately with a client-side order ID that Hummingbot uses to track the order's status. They would schedule the order to be submitted to the exchange as soon as possible but would not wait for the reply from the exchange before returning.</p>","title":"Creating an Order"},{"location":"developers/connectors/architecture/order_lifecycle/#submitting-an-order","text":"<p>In most of our built-in exchange connectors, order submission occurs in the <code>_create_order()</code> function - although it may be different for some decentralized exchange connectors.</p> <p>The <code>_create_order()</code> method is responsible for performing the necessary trading rule checks before submitting the order via the REST API. Upon receiving a successful response, a <code>BuyOrderCreatedEvent</code> or <code>SellOrderCreatedEvent</code> would be emitted. Otherwise, a <code>MarketOrderFailureEvent</code> would be emitted. Note that despite the naming, <code>MarketOrderFailureEvent</code> is emitted even for limit orders.</p>","title":"Submitting an Order"},{"location":"developers/connectors/architecture/order_lifecycle/#order-being-filled","text":"<p>Other market participants could fill an order over time once it's live on an exchange. Depending on the order types, i.e. limit or market, the order could be filled either immediately or after another market participant fulfils it.</p> <p>For every order fill on our orders, whether partially or entirely, the exchange connector must emit an <code>OrderFilledEvent</code>, to notify the strategy modules about the order's progress.</p>","title":"Order Being Filled"},{"location":"developers/connectors/architecture/order_lifecycle/#order-completion","text":"<p>Once an order has been completely filled, the exchange connector must emit a <code>BuyOrderCompletedEvent</code> or <code>SellOrderCompletedEvent</code>. The exchange connector would stop tracking the order afterward.</p> <p><code>BuyOrderCompletedEvent</code> or <code>SellOrderCompletedEvent</code> should always come after an <code>OrderFilledEvent</code> has been emitted.</p>","title":"Order Completion"},{"location":"developers/connectors/architecture/order_lifecycle/#order-cancellation-or-expiry","text":"<p>If an order is canceled or expired before it has been completely filled, an <code>OrderCancelledEvent</code> or an <code>OrderExpiredEvent</code> should be emitted.</p> <p>For centralized exchanges, order tracking should end after emitting an <code>OrderCancelledEvent</code> or <code>OrderExpiredEvent</code>. On decentralized exchanges - since it's possible for orders to be filled after cancellation or even expiry, due to block delays - the exchange connector may keep tracking the order for a certain amount of time afterwards.</p>","title":"Order Cancellation or Expiry"},{"location":"developers/connectors/architecture/order_lifecycle/#order-failure","text":"<p>If a failed order has been rejected for any reason other than cancellation or expiry, <code>MarketOrderFailureEvent</code> must be emitted.</p>","title":"Order Failure"},{"location":"developers/strategies/","text":"","title":"Building Strategies"},{"location":"developers/strategies/#what-is-a-strategy","text":"<p>An algorithmic trading strategy, or \"bot\", is an automated process that creates/cancels orders, executes trades, and manages positions on crypto exchanges. Like a computer program, a strategy enables traders to respond automatically and continually to market conditions.</p> <p>We will start by building simple strategies that build upon one another. This should expose you to different parts of the Hummingbot codebase, help you understand some core classes that are frequently referred to when building strategies, and provide a starting point for developing custom strategies. </p>","title":"What is a strategy?"},{"location":"developers/strategies/#tutorial","text":"<p>The tutorial teaches you how to create a Hummingbot strategy that executes a simple limit order.</p>","title":"Tutorial"},{"location":"developers/strategies/#guides","text":"<ul> <li>Key Concepts: Basic overview and structure of what goes into a Hummingbot strategy</li> <li>Get Started: Create a simple strategy that executes a limit order</li> <li>Define Configs: Define configuration parameters</li> <li>Hanging Orders Tracker: Learn how to use the hanging order tracker in your strategy</li> </ul>","title":"Guides"},{"location":"developers/strategies/architecture/","text":"<p></p> <p>All strategy classes are derived from the <code>StrategyBase</code> class, which is derived from the <code>TimeIterator</code> class.</p> <p>The concrete strategy classes included with Hummingbot, including <code>ArbitrageStrategy</code>, <code>CrossExchangeMarketMakingStrategy</code>, and <code>PureMarketMakingStrategy</code> - are all child classes of <code>StrategyBase</code>.</p> <p>Each <code>StrategyBase</code> object may be managing multiple <code>ConnectorBase</code> and <code>WalletBase</code> objects.</p>","title":"Architecture"},{"location":"developers/strategies/architecture/#how-it-works","text":"<p>All strategy modules are child classes of <code>TimeIterator</code>, which is called via <code>c_tick()</code> every second.</p> <p>What this means is, a running strategy module is called every second via its <code>c_tick()</code> method to check on the markets and wallets, and decide whether it should perform any trades or not. One way to think about it is that a strategy module acts like it's watching a movie frame-by-frame via <code>c_tick()</code>, and reacts to what it sees in real time via trading actions.</p> <p>If you're reading or writing a strategy module, the <code>c_tick()</code> function should be treated as the entry point of a strategy module. If you're reading a strategy module's code, <code>c_tick()</code> should be where you start. If you're writing a new strategy module, <code>c_tick()</code> is also going to where you start writing the important bits of your strategy.</p>","title":"How It Works"},{"location":"developers/strategies/architecture/#connectors","text":"<p>Each <code>StrategyBase</code> object may be associated with multiple connectors.</p> <ul> <li> <p><code>cdef c_add_markets(self, list markets)</code></p> <p>Associates a list of <code>ConnectorBase</code> objects to this <code>StrategyBase</code> object.</p> </li> <li> <p><code>cdef c_remove_markets(self, list markets)</code></p> <p>Disassociates a list of <code>ConnectorBase</code> objects from this <code>StrategyBase</code> object.</p> </li> <li> <p><code>active_markets</code> property</p> <p>List of <code>ConnectorBase</code> objects currently associated with this <code>StrategyBase</code> object.</p> </li> </ul>","title":"Connectors"},{"location":"developers/strategies/architecture/#market-event-interfaces","text":"<p>The <code>StrategyBase</code> class comes with a set of interface functions for handling market events from associated <code>ConnectorBase</code> objects, which may be overridded by child classes to receive and process market events.</p> <p>The event interface functions are as follows:</p> <ul> <li> <p><code>cdef c_did_create_buy_order(self, object order_created_event)</code></p> <p>A buy order has been created. Argument is a <code>BuyOrderCreatedEvent</code> object.</p> </li> <li> <p><code>cdef c_did_create_sell_order(self, object order_created_event)</code></p> <p>A sell order has been created. Argument is a <code>SellOrderCreatedEvent</code> object.</p> </li> <li> <p><code>cdef c_did_fill_order(self, object order_filled_event)</code></p> <p>An order has been filled in the market. Argument is a <code>OrderFilledEvent</code> object.</p> </li> <li> <p><code>cdef c_did_fail_order(self, object order_failed_event)</code></p> <p>An order has failed in the market. Argument is a <code>MarketOrderFailureEvent</code> object.</p> </li> <li> <p><code>cdef c_did_cancel_order(self, object cancelled_event)</code></p> <p>An order has been cancelled. Argument is a <code>OrderCancelledEvent</code> object.</p> </li> <li> <p><code>cdef c_did_expire_order(self, object expired_event)</code></p> <p>An order has expired. Argument is a <code>OrderExpiredEvent</code> object.</p> </li> <li> <p><code>cdef c_did_complete_buy_order(self, object order_completed_event)</code></p> <p>A buy order has been completely filled. Argument is a <code>BuyOrderCompletedEvent</code> object.</p> </li> <li> <p><code>cdef c_did_complete_sell_order(self, object order_completed_event)</code></p> <p>A sell order has been completely filled. Argument is a <code>SellOrderCompletedEvent</code> object.</p> </li> </ul>","title":"Market Event Interfaces"},{"location":"developers/strategies/architecture/#creating-and-cancelling-orders","text":"<p><code>StrategyBase</code> includes pre-defined logic for creating and cancelling trading orders - which are the primary ways for a strategy to interact with associated markets.</p> <p>It is highly encouraged to use these functions to create and remove orders, rather than calling functions like <code>c_buy()</code> and <code>c_sell()</code> in <code>ConnectorBase</code> objects directly - since the functions from <code>StrategyBase</code> provides order tracking functionalities as well.</p>","title":"Creating and Cancelling Orders"},{"location":"developers/strategies/architecture/#place-order","text":"<pre><code>cdef str c_buy_with_specific_market(self, \n                                    object market_trading_pair_tuple,\n                                    object amount,\n                                    object order_type = *,\n                                    object price = *,\n                                    double expiration_seconds = *\n                                    )\n\ncdef str c_sell_with_specific_market(self,\n                                     object market_trading_pair_tuple,\n                                     object amount,\n                                     object order_type = *,\n                                     object price = *,\n                                     double expiration_seconds = *\n                                     )\n</code></pre> <p>Creates a buy or a sell order in the market specified by <code>market_trading_pair_tuple</code>and returns the order ID string.</p> <p>Arguments</p> <ul> <li>market_trading_pair_tuple: a <code>MarketTradingPairTuple</code> object specifying the <code>ConnectorBase</code> object and trading pair to create the order for.</li> <li>amount: a <code>Decimal</code> object, specifying the order size in terms of the base asset.</li> <li>order_type: an optional <code>OrderType</code> enum specifying the order type. Default value is <code>OrderType.MARKET</code>.</li> <li>price: an optional <code>Decimal</code> object, specifying the price for a limit order. This parameter is ignored if <code>order_type</code> is not <code>OrderType.LIMIT</code> or <code>OrderType.LIMIT_MAKER</code>.</li> <li>expiration_seconds: an optional number, which specifies how long a limit should automatically expire. This is only used by Ethereum-based decentralized exchanges like Radar Relay where active order cancellation costs gas. By default, passive cancellation via expiration is used on these exchanges.</li> </ul>","title":"Place order"},{"location":"developers/strategies/architecture/#cancel-order","text":"<pre><code> c_cancel_order(self, object market_pair, str order_id)\n</code></pre> <p>Cancels an active order from a market.</p> <p>Arguments</p> <ul> <li>market_pair: a <code>MarketTradingPairTuple</code> object specifying the <code>ConnectorBase</code> object and the trading pair to cancel order from.</li> <li>order_id: Order ID string returned from a previous call to order creation functions above.</li> </ul>","title":"Cancel order"},{"location":"developers/strategies/architecture/#order-tracking","text":"<p>Each <code>StrategyBase</code> object comes with an internal attribute <code>_sb_order_tracker</code>, which is an <code>OrderTracker</code> object. The <code>OrderTracker</code> object is responsible for tracking all active and in-flight orders created by the <code>StrategyBase</code> object, and also all in-flight order cancels.</p> <p></p> <p>When writing or modifying a strategy module, you can use the built-in <code>OrderTracker</code> object to query the active or in-flight orders / cancels you currently have. It's useful for preventing issuing duplicate orders or order cancels.</p> <p>Below are some of the user functions or properties under <code>OrderTracker</code> that you can use:</p> <ul> <li> <p><code>active_maker_orders</code> property</p> <p>Returns a list of still active limit orders, with their market object.</p> <p>Return type: <code>List[Tuple[ConnectorBase, LimitOrder]]</code></p> </li> <li> <p><code>market_pair_to_active_orders</code> property</p> <p>Returns a dictionary mapping from market trading pair tuples to lists of active limit orders.</p> <p>Return type: <code>Dict[MarketTradingPairTuple, List[LimitOrder]]</code></p> </li> <li> <p><code>active_bids</code> property</p> <p>Returns a list of active limit bid orders, with their market object.</p> <p>Return type: <code>List[Tuple[ConnectorBase, LimitOrder]]</code></p> </li> <li> <p><code>active_asks</code> property</p> <p>Returns a list of active limit ask orders, with their market object.</p> <p>Return type: <code>List[Tuple[ConnectorBase, LimitOrder]]</code></p> </li> <li> <p><code>tracked_taker_orders</code> property</p> <p>Returns a list of in-flight or active market orders, with their market object. This is useful for decentralized exchanges where market orders may take a minute to settle due to block delay.</p> <p>Return type: <code>List[Tuple[ConnectorBase, MarketOrder]]</code></p> </li> <li> <p><code>in_flight_cancels</code> property</p> <p>Returns a dictionary of order IDs that are being cancelled.</p> <p>Return type: <code>Dict[str, float]</code></p> </li> </ul>","title":"Order Tracking"},{"location":"developers/strategies/architecture/#fee-accounting","text":"","title":"Fee Accounting"},{"location":"developers/strategies/architecture/#ordercandidate","text":"<p>An order proposal created by a strategy.</p> <p>A <code>BudgetChecker</code> takes an <code>OrderCandidate</code> and fills in fees to be paid for this particular order (in pre-defined tokens). Then checks if, after accounting for the fees, the account balances allow for a placement of this order, and if not, adjusts the order amount accordingly.</p> <p>Fees can be payable in the base tokens, quote tokens, or 3rd party tokens.</p> <p>In general, if an order opens a position, fees will be charged as an additional cost of the order, and if an order closes a position, fees will be deducted from the returns. A few exchanges however don't follow this principle. Strategies however don't have to handle this and should rely on the BudgetChecker obtained from the exchange to calculate fees the correct way.</p> <p>Once the candidate order has been sized by the <code>BudgetChecker</code>, the strategy can examine the sized order to get more information such as <code>OrderCandidate.collateral_dict</code> to get a dictionary of the costs associated with the order, or <code>OrderCandidate.potential_returns</code> to get an idea of the token and amount of the returns associated with the order.</p>","title":"OrderCandidate"},{"location":"developers/strategies/architecture/#budgetchecker","text":"<p>Is intended to be a single universal solution for fee accounting and checking feasibility of <code>OrderCandidates</code>.</p> <p>Provides utilities for strategies to check the potential impact of <code>OrderCandidates</code> on user account balances. Mainly used to determine if sufficient balances are available to place a set of strategy-proposed orders.</p> <p>It can work with a single <code>OrderCandidate</code> or a list of <code>OrderCandidates</code>. In case of multiple <code>OrderCandidates</code> the <code>BudgetChecker</code> verfies if the set of orders as a whole is feasible.</p> <p>The <code>BudgetChecker</code> also locks in collateral required for orders and adjusts collateral available for future <code>OrderCandidates</code>.</p> <ul> <li><code>reset_locked_collateral()</code></li> <li><code>adjust_candidates()</code></li> <li><code>adjust_candidate_and_lock_available_collateral()</code></li> <li><code>adjust_candidate()</code></li> <li><code>populate_collateral_entries()</code></li> </ul>","title":"BudgetChecker"},{"location":"developers/strategies/architecture/#example","text":"<pre><code>budget_checker = market_info.market.budget_checker\norder_candidate = OrderCandidate(\n    trading_pair=market_info.trading_pair,\n    is_maker=False,\n    order_type=OrderType.LIMIT,\n    order_side=TradeType.BUY,\n    amount=order_amount,\n    price=order_price,\n)\n\nadjusted_candidate_order = budget_checker.adjust_candidate(order_candidate, all_or_none=True)\n\nif adjusted_candidate_order.amount &lt; order_amount:\n    # Order cannot be placed\nelse:\n    # Order can be placed\n</code></pre>","title":"Example"},{"location":"developers/strategies/config/","text":"<p>Hummingbot's config module helps onboard users who are new to running a trading bot. It is helpful in  - Compiling a list of absolutely essential config variables. - Skip or provide default variables that are more advanced / have the potential to confuse new users. - Collecting and validating user inputs as config values. - Check if all configs are present before running any strategy.</p>","title":"Configuration Module"},{"location":"developers/strategies/config/#architecture","text":"<p>Currently, we split all the configuration variables into three different types.</p>    Config type In-memory location Saved to local yml Description     <code>in_memory</code> <code>hummingbot/client/config/in_memory_config_map.py</code> No Configs that are never saved and prompted every time (currently, only the <code>strategy</code> and <code>strategy_config_path</code> are in this config map.   <code>global</code> <code>hummingbot/client/config/global_config_map.py</code> Yes Strategy-agnostic configs such as exchange API keys, wallet selection, etc.   <code>strategy</code> <code>hummingbot/strategy/{STRATEGY_NAME}/{STRATEGY_NAME}_strategy_config_map.py</code> Yes Strategy-specific configs.","title":"Architecture"},{"location":"developers/strategies/config/#default-configuration-flow","text":"<ol> <li>When the bot starts, it automatically reads all the global configurations from a file named <code>conf_global.yml</code>. If     such a file does not exist, it will copy the empty template from <code>hummingbot/templates/conf_global_TEMPLATE.yml</code>.     The bot populates <code>global_config_map</code> object in <code>hummingbot/client/config/global_config_map.py</code> with any values     previously saved in the yml file.</li> <li>When the user enters <code>config</code> command, the bot prompts the user all the items in <code>in_memory_config_map</code>.</li> <li>Once a user inputs her desired strategy, she can choose to <code>import</code> or <code>create</code> a configuration file. <ul> <li>if <code>import</code> is chosen, the user will be prompted to select a strategy config file. The bot will load all variables values and save them in-memory.</li> <li>if <code>create</code> is chosen, the bot will copy a strategy config template from <code>hummingbot/templates/conf_{STRATEGY_NAME}_strategy_{COUNT}.yml</code>.   The user will then fill out each of the configs required by that specific strategy.</li> </ul> </li> <li>With each user input, the bot will validate the input with a custom checker (more details on that in the ConfigVar class). If an input is invalid,     the user is prompted the same question again.</li> <li>After all the strategy configs are filled out, the bot uses the newly acquired info to figure out which variables      are require in global config settings (Which exchange API keys to prompt, etc).</li> <li>Since altering certain variables will trigger requirement for other variables, this prompt-and-config process loops until all variables are complete.</li> <li>When the loop finishes. The bot writes all of the config variables saved in memory to local <code>yml</code> files so that they can be reused for another session.</li> <li>The user can then start running her selected strategy with the set of configs currently stored in memory.</li> </ol>","title":"Default Configuration Flow"},{"location":"developers/strategies/config/#configvar-class","text":"<p>The ConfigVar Class is located in <code>hummingbot/client/config/config_var.py</code>. It standardizes each config setting with a set of attributes.</p>    Attribute Attribute Type Use     <code>key</code> str Unique key that identifies a config variable.   <code>prompt</code> str or callable Question displayed in the client when the bot collects user input for this config setting. You can modify the string in run time by passing a function rather than a static string.   <code>is_secure</code> bool Whether the user input needs to be masked with \"***\".   <code>default</code> any Default value for this variable if user input is None.   <code>type_str</code> str One of {\"str\", \"list\", \"dict\", \"float\", \"int\", \"bool\"}. Defaults to \"str\". This is used by <code>parse_cvar_value</code> to parse user input into correct data type.   <code>required_if</code> callable A condition check for whether this config setting needs to be prompted during the configuration flow.   <code>validator</code> callable A condition check for whether an input is a valid value for this config setting.   <code>on_validated</code> callable A function hook that gets activated if an input passes the validation check (e.g. set wallet requirement to True when a valid DEX name is entered.)    <p>Check <code>hummingbot/client/config/config_var.py</code> for more details.</p>","title":"ConfigVar Class"},{"location":"developers/strategies/config/#config-definition-conventions","text":"<ol> <li>Always place configs that will alters requirement state first.     Example: <code>telegram_token</code> should only be required if <code>telegram_enabled</code> is set to True. Therefore <code>telegram_enabled</code> should be listed before <code>telegram_token</code>.</li> <li>For exchange-specific configurations, use <code>using_exchange(\"exchange_name\")</code> as the <code>required_if</code> condition.</li> <li>When writing prompt questions, be sure to add examples for a better user experience.</li> <li>When prompting for a boolean value, add <code>(Yes/No)</code> as options so that the user knows what to enter.</li> <li>When prompting a question with a few choices as answers e.g. <code>[\"import\", \"create\", etc]</code>, make sure to include all options in the format of <code>(OPTION_1/OPTION_2/OPTION_3)</code>.     This pattern is recognized by our autocomplete system, and the user can hit <code>Tab</code> to have the option autofilled. </li> <li>When prompting for an exchange name, make sure to include 'exchange name', 'name of exchange' or 'name of the exchange' in the prompt text (case insensitive, e.g. Exchange Name is valid), our autocomplete system will list and autofill with exchange names supported by our system.</li> </ol>","title":"Config definition conventions"},{"location":"developers/strategies/hanging-orders/","text":"","title":"Hanging Orders Tracker"},{"location":"developers/strategies/hanging-orders/#introduction","text":"<p>This section of the tutorial provides an overview of the  <code>HangingOrdersTracker</code> helper class designed to assist strategies with managing hanging orders. It automates a large part of the process, including renewing outdated orders and cancelling orders that have drifted too far from the market price. </p> <p>Two examples of its usage can be found in the <code>PureMarketMakingStrategy</code> and the <code>AvellanedaMarketMakingStrategy</code> strategies.</p>","title":"Introduction"},{"location":"developers/strategies/hanging-orders/#fundamental-concepts","text":"<p>An important fundamental concept to be aware of is that the tracker operates by maintaining a list of candidate  hanging orders. This article will refer to that list as \"the candidate list\". Calling the <code>update_strategy_orders_with_equivalent_orders</code> method will perform a check that the candidate list is synchronized with the orders on the exchange and will effectively start tracking the hanging orders.</p> <p>The most basic set of methods are the <code>add_order</code> and <code>remove_order</code> which respectively add and remove orders from the candidate list of hanging orders. However, the <code>add_order</code> function is most likely to be used in the initialization of the strategy, when hanging orders are retrieved from the database and registered with the tracker, while the <code>remove_order</code> function may not have to be used at all as the responsibility of removing tracked hanging orders is transferred to the tracker and automated away.</p>","title":"Fundamental Concepts"},{"location":"developers/strategies/hanging-orders/#registering-the-tracker","text":"<p>During the initialization phase, the <code>HangingOrdersTracker</code> must be registered with the connectors used by the strategy in order to receive updates about the orders and perform its responsibilities. This is achieved by simply calling the <code>register_events</code> method and passing a list of the relevant connectors. When the strategy is being stopped, the tracker's <code>unregister_events</code> must be called to gracefully deregister the tracker from the connectors.</p>","title":"Registering the Tracker"},{"location":"developers/strategies/hanging-orders/#hanging-orders-creation-flow","text":"<p>When creating new orders, use the method aptly named <code>add_current_pairs_of_proposal_orders_executed_by_strategy</code> to register the order pairs by passing them in as <code>CreatedPairOfOrders</code>. The tracker then starts listening for filled  orders and updates the pairs accordingly.</p> <p>Once the current cycle is over and the strategy is about to cancel the current orders and replace them with a new set, calling <code>update_strategy_orders_with_equivalent_orders</code> will detect hanging orders from the currently active <code>CreatedPairOrders</code> and add them to the candidate orders list. Subsequently, as mentioned in the  Fundamental Concepts section, calling the<code>update_strategy_orders_with_equivalent_orders</code> method will ensure the integrity of the candidate orders list and start tracking the hanging orders.</p> <p>After this step is performed, the strategy can proceed to cancelling the orders it wants to cancel as part of the  current cycle termination process. It simply needs to ask the tracker if a given order is a hanging order by calling the <code>is_order_id_in_hanging_orders</code> method. If it is, the strategy doesn't need to worry about that order anymore. If it's not, then the strategy can proceed to cancelling it.</p>","title":"Hanging Orders Creation Flow"},{"location":"developers/strategies/hanging-orders/#the-management-process","text":"<p>Finally, for the tracker to perform its tasks, the <code>process_tick</code> method must be called on every strategy tick. When the method is called, the <code>HangingOrdersTracker</code> performs two tasks: first, it removes hanging orders with  extreme spreads; second, it renews orders that have passed the max order age. To enable renewing old orders, the strategy must implement the  <code>max_order_age</code> attribute.</p>","title":"The Management Process"},{"location":"developers/strategies/key-concepts/","text":"","title":"Key Concepts"},{"location":"developers/strategies/key-concepts/#strategy-folder","text":"<p>Each strategy is contained in its own folder, with the strategy name as the folder name:</p> <ul> <li>__init__.py This file allows one to expose certain variables to all modules inside the package by placing the strategy object under <code>__all__</code>  field.</li> <li>{strategy name}.pxd This file contains type declaration about some variables that are specified in the <code>{strategy name}.pyx</code> file.</li> <li>{strategy name}.pyx This file contains a bulk of functions that define the behavior of strategy. The <code>__init__</code> function defines the variables that were declared in the <code>{strategy name}.pxd</code> file and initializes fields inherited from <code>StrategyBase</code> class. All other functions can be customized depending on the behavior that the developer wants to create. A function that is especially important is <code>format_status()</code> because this function chooses which data to render when <code>status</code> is called on the client.</li> <li>{strategy name}_config_map.py This file handles prompting user for config values when the strategy is called. Each key value of the <code>config_map</code> has a <code>ConfigVar</code> assigned where developer can specify the prompt and assign validators to check for accepted values.</li> <li>start.py The <code>start()</code> function is what gets called when user calls the strategy on client side. This function should handle initialization of configs by calling <code>config_map</code>, set market names and wallets, and eventually execute the strategy.</li> </ul>","title":"Strategy folder"},{"location":"developers/strategies/key-concepts/#strategybase-class","text":"<p>All strategies extend the <code>StrategyBase</code> class. This class allows extraction of logic that would be repetitively written in all strategies otherwise. </p> <ul> <li>Event listeners : The client\u2019s prompt eventually leads to changes on server with the help of event listeners. Depending on action taken by the client, corresponding event listeners are called to execute the appropriate job.</li> <li>Data frames : The base class handles creation of data frames for market status, <code>market_status_data_frame()</code>, and wallet balance, <code>wallet_balance_data_frame()</code>, so it is easy for developers to create and access about particular markets.</li> </ul> <p>The base class also contains methods that are meant to be freshly implemented when new strategies are created.</p> <ul> <li><code>logger()</code> : set up logger for strategy session</li> <li><code>format_status()</code> : define format of status that will be rendered on Hummingbot client</li> </ul> <p>To assist in the development of custom strategies, there are many overridable functions that respond to various events detected by EventListeners. </p> <ul> <li><code>c_did_create_buy_order()</code>: called in response to an <code>order_created_event</code></li> <li><code>c_did_create_sell_order()</code>: called in response to an <code>order_created_event</code></li> <li><code>c_did_fail_order()</code>: called in response to an <code>order_filled_event</code></li> <li><code>c_did_create_sell_order()</code>: called in response to an <code>order_failed_event</code></li> <li><code>c_did_cancel_order()</code>: called in response to a <code>cancelled_event</code></li> <li><code>c_did_expire_order()</code>: called in response to an <code>expired_event</code></li> <li><code>c_did_complete_buy_order()</code>: called in response to an <code>order_completed_event</code></li> <li><code>c_did_complete_sell_order()</code>: called in response to an <code>order_completed_event</code></li> <li><code>c_did_fail_order_tracker()</code>: called in response to an <code>order_failed_event</code></li> <li><code>c_did_cancel_order_tracker()</code>: called in response to an <code>order_cancelled_event</code></li> <li><code>c_did_expire_order_tracker()</code>: called in response to an <code>order_expired_event</code></li> <li><code>c_did_complete_buy_order_tracker()</code>: called in response to an <code>order_completed_event</code></li> <li><code>c_did_complete_sell_order_tracker()</code>: called in response to an <code>order_completed_event</code></li> </ul>","title":"StrategyBase class"},{"location":"developers/strategies/key-concepts/#market-class","text":"<p>The <code>ExchangeBase</code> class contains overridable functions that can help get basic information about an exchange that a strategy is operating on, which can include the balance, prices, and order books for any particular asset traded on the exchange. </p> <ul> <li><code>c_buy()</code>: called when the user wants to place a buy order</li> <li><code>c_sell()</code>: called when the user wants to place a sell order</li> <li><code>c_cancel()</code>: called when the user wants to place an order cancellation</li> <li><code>c_get_balance()</code>: called to get the user\u2019s balance of assets</li> <li><code>c_get_available_balance()</code>: called to get the user\u2019s available balance of assets</li> <li><code>c_withdraw()</code>: called when the user wants to withdraw assets</li> <li><code>c_get_order_book()</code>: called to get the order book for any particular asset</li> <li><code>c_get_price()</code>: called to get the price for any particular asset</li> <li><code>c_get_order_price_quantum()</code>: called to get the quantum price of an order</li> <li><code>c_get_order_size_quantum()</code>: called to get the quantum size of an order</li> <li><code>c_quantize_order_price()</code>: called to quantize the price of an order</li> <li><code>c_quantize_order_amount()</code>: called to quantize the amount of an order</li> <li><code>c_get_fee()</code>: called to get the fee for exchange use</li> </ul> <p>Additionally, this strategy leverages the <code>OrderTracker</code> listener object, in order to check if buy/sell orders have been filled or completed, the user has enough balance to place certain orders, and if there are any order cancellations. The <code>HummingbotLogger</code> object is also used to log the specific events when they occur. </p>","title":"Market class"},{"location":"developers/strategies/key-concepts/#configuration","text":"","title":"Configuration"},{"location":"developers/strategies/key-concepts/#important-commands","text":"<p>Important commands on Hummingbot client:</p> <ul> <li><code>status</code> : Renders information about the current strategy and markets. The information that you want displayed can be customized with <code>format_status()</code> function in <code>{strategy name}.pyx</code></li> <li><code>config</code> : Prompts users asking for details about strategy set up (e.g. token, market name, etc). Prompts can be modified in <code>{strategy name}_config_map.py</code></li> </ul>","title":"Important commands"},{"location":"developers/strategies/key-concepts/#exposing-new-strategy-to-hummingbot-client","text":"<p>The strategy name is made known to the client automatically in hummingbot/client/settings.py under <code>STRATEGIES</code> variable. There should also be a template file that contains config variables and its documentation in the hummingbot/templates directory. The naming convention for this yml file is <code>conf_{strategy name}_TEMPLATE</code>. </p>","title":"Exposing new strategy to Hummingbot client"},{"location":"developers/strategies/key-concepts/#setting-question-prompts-for-strategy-parameters","text":"<p>Strategy parameters can be set in the <code>config_map</code> file. Each parameter (represented as dictionary key) is mapped to a <code>ConfigVar</code> type where developer can specify the name of the parameter, prompts that will be provided to the user, and validator that will check the values entered. </p>","title":"Setting question prompts for strategy parameters"},{"location":"developers/strategies/tutorial/","text":"","title":"Tutorial"},{"location":"developers/strategies/tutorial/#what-youll-learn","text":"<p>This tutorial is intended to get you familiarized with the basic concepts of creating a basic Hummingbot strategy that executes a simple limit order. </p> <p>By the end of this tutorial, you should: </p> <ul> <li>Have a general understanding of the base classes that serve as building blocks of the strategies</li> <li>Have a working strategy </li> <li>Be able to build new custom strategies from scratch</li> </ul>","title":"What you'll learn"},{"location":"developers/strategies/tutorial/#getting-started","text":"<p>Follow the instructions in Installation and install Hummingbot from source. If the installation was successful, you should see the Hummingbot welcome screen afterwards:</p> <p></p>","title":"Getting started"},{"location":"developers/strategies/tutorial/#create-a-strategy","text":"<p>Let\u2019s create a simple LimitOrder strategy that places a limit order!</p>","title":"Create a strategy"},{"location":"developers/strategies/tutorial/#strategy-files","text":"<p>For the purposes of this article, we assume that you have installed Hummingbot in a directory <code>~/hummingbot-instance</code>. From that directory, navigate to the <code>strategy</code> directory that contains all the strategies. Each sub-folder is a different strategy. <pre><code>cd ~/hummingbot-instance\ncd hummingbot/strategy\n</code></pre> In this directory, create a <code>limit_order</code> folder which will contain the files for our strategy: <pre><code>mkdir limit_order\ncd limit_order\n</code></pre></p> <p>Next, go into the folder and create the four files that we need for our strategy: <pre><code>touch __init__.py limit_order_config_map.py limit_order.py start.py\n</code></pre></p> <p>Each of these files has a specific purpose and naming convention. See the Developer Tutorial to learn more about the file structure and naming conventions for different strategies. </p> <p>Lastly, we also need to create a strategy configuration template, which defines the user-configurable parameters defined by the strategy. Like the strategy files and folders, the template file name also follows a convention. </p> <p>Let\u2019s look at these files individually.</p>","title":"Strategy files"},{"location":"developers/strategies/tutorial/#__init__py","text":"<p>The init file exposes your strategy. Paste the following code into the file using a code editor: <pre><code># Initializing the project\nfrom .limit_order import LimitOrder\n__all__ = [limit_order]\n</code></pre></p> <p>Here, the <code>__all__</code> field is used to expose the public module <code>LimitOrder</code> for use.</p>","title":"<code>__init__.py</code>"},{"location":"developers/strategies/tutorial/#limit_order_config_mappy","text":"<p>The config map file sets the user prompts to set the strategy parameters. The naming convention for this file is <code>{strategy_name}_config_map.py</code>. </p> <p>Use the following code in your config map file: <pre><code>from hummingbot.client.config.config_var import ConfigVar\n\n# Returns a market prompt that incorporates the connector value set by the user\ndef market_prompt() -&gt; str:\n    connector = limit_order_config_map.get(\"connector\").value\n    return f'Enter the token trading pair on {connector} &gt;&gt;&gt; '\n\n# List of parameters defined by the strategy\nlimit_order_config_map ={\n    \"strategy\":\n        ConfigVar(key=\"strategy\",\n                  prompt=\"\",\n                  default=\"limit_order\",\n    ),\n    \"connector\":\n        ConfigVar(key=\"connector\",\n                  prompt=\"Enter the name of the exchange &gt;&gt;&gt; \",\n                  prompt_on_new=True,\n    ),\n    \"market\": ConfigVar(\n        key=\"market\",\n        prompt=market_prompt,\n        prompt_on_new=True,\n    ),\n}\n</code></pre> The parameters in this file are mapped as key-value pairs. Each field uses a ConfigVar method to accept parameters. ConfigVar is a variable that you can use to control the trading behavior of the bot. </p> <p>The <code>key</code> parameter identifies the field, while the <code>prompt</code> parameter lets you choose the prompt message. If you include <code>prompt_on_new</code>, the prompt will be asked each time the user creates a new strategy. Otherwise, it will only be displayed when the user configures the parameter with <code>config</code>.</p> <p>In the above example, the <code>strategy</code> field identifies the trading strategy: <code>LimitOrder</code>. Similarly, we use <code>connector</code> field to prompt for the name of the exchange, and the <code>market</code> field to prompt for trading pair that you want to trade. Note that the prompt for <code>market</code> uses a function which uses the value for <code>connector</code> set by the user in the previous question.</p> <p>Additionally, you can supply validators as parameters to ensure only accepted values are entered, and you can use the <code>default</code> parameter to supply a default value to the parameters. See the ConfigVar file for all the ways that you can set strategy parameters.</p>","title":"<code>limit_order_config_map.py</code>"},{"location":"developers/strategies/tutorial/#startpy","text":"<p>The start file initializes the configuration for a strategy. Paste the following code into the file:</p> <pre><code>from hummingbot.strategy.market_trading_pair_tuple import MarketTradingPairTuple\nfrom hummingbot.strategy.limit_order import LimitOrder\nfrom hummingbot.strategy.limit_order.limit_order_config_map import limit_order_config_map as c_map\n\ndef start(self):\n    connector = c_map.get(\"connector\").value.lower()\n    market = c_map.get(\"market\").value\n\n    self._initialize_markets([(connector, [market])])\n    base, quote = market.split(\"-\")\n    market_info = MarketTradingPairTuple(self.markets[connector], market, base, quote)\n    self.market_trading_pair_tuples = [market_info]\n\n    self.strategy = LimitOrder(market_info)\n</code></pre> <p>In the above code, the <code>connector</code> variable stores the exchange name, whereas the <code>market</code> variable stores the trading pair. These variables fetch the required values from the config map file, which we defined in the previous step. </p> <p>Similarly, the <code>MarketTradingPairTuple</code> object accepts the exchange name, trading pair, base asset and quote asset for as its parameters.</p> <p>This information allows us to initialize the <code>LimitOrder</code> object.</p>","title":"<code>start.py</code>"},{"location":"developers/strategies/tutorial/#limit_orderpy","text":"<p>The strategy file defines its behavior. Paste the following code into the file:</p> <pre><code>#!/usr/bin/env python\n\nfrom decimal import Decimal\nimport logging\n\nfrom hummingbot.core.event.events import OrderType\nfrom hummingbot.strategy.market_trading_pair_tuple import MarketTradingPairTuple\nfrom hummingbot.logger import HummingbotLogger\nfrom hummingbot.strategy.strategy_py_base import StrategyPyBase\n\nhws_logger = None\n\nclass LimitOrder(StrategyPyBase):\n    # We use StrategyPyBase to inherit the structure. We also \n    # create a logger object before adding a constructor to the class. \n    @classmethod\n    def logger(cls) -&gt; HummingbotLogger:\n        global hws_logger\n        if hws_logger is None:\n            hws_logger = logging.getLogger(__name__)\n        return hws_logger\n\n    def __init__(self,\n                 market_info: MarketTradingPairTuple,\n                 ):\n\n        super().__init__()\n        self._market_info = market_info\n        self._connector_ready = False\n        self._order_completed = False\n        self.add_markets([market_info.market])\n\n    # After initializing the required variables, we define the tick method. \n    # The tick method is the entry point for the strategy. \n    def tick(self, timestamp: float):\n        if not self._connector_ready:\n            self._connector_ready = self._market_info.market.ready\n            if not self._connector_ready:\n                self.logger().warning(f\"{self._market_info.market.name} is not ready. Please wait...\")\n                return\n            else:\n                self.logger().warning(f\"{self._market_info.market.name} is ready. Trading started\")\n\n        if not self._order_completed:\n            # The get_mid_price method gets the mid price of the coin and\n            # stores it. This method is derived from the MarketTradingPairTuple class.\n            mid_price = self._market_info.get_mid_price() \n\n            # The buy_with_specific_market method executes the trade for you. This     \n            # method is derived from the Strategy_base class. \n            order_id = self.buy_with_specific_market(\n                self._market_info,  # market_trading_pair_tuple\n                Decimal(\"0.005\"),   # amount\n                OrderType.LIMIT,    # order_type\n                mid_price           # price\n            )\n            self.logger().info(f\"Submitted limit buy order {order_id}\")\n            self._order_completed = True\n\n    # Emit a log message when the order completes\n    def did_complete_buy_order(self, order_completed_event):\n        self.logger().info(f\"Your limit buy order {order_completed_event.order_id} has been executed\")\n        self.logger().info(order_completed_event)\n</code></pre> <p>Check out the MarketTradingPairTuple class for more methods to add to your bot.</p> <p>Both StrategyPyBase class and <code>buy_with_specific_market</code> method derive from the strategy base class. To learn more about other methods you can use using the class, visit Strategy_base.</p>","title":"<code>limit_order.py</code>"},{"location":"developers/strategies/tutorial/#conf_limit_order_strategy_templateyml","text":"<p>Lastly, we also need an additional file inside the templates folder, which acts as a placeholder for the strategy parameters. First, let\u2019s navigate to the <code>templates</code> folder and create the file. Run the following commands. <pre><code>cd ~/hummingbot instance\ncd hummingbot/templates\ntouch conf_limit_order_strategy_TEMPLATE.yml  \n</code></pre></p> <p>Add the following code to this file: <pre><code>template_version: 1\nstrategy: null\nconnector: null\nmarket: null\n</code></pre></p>  <p>Note</p> <p>The template filename convention is <code>conf_{strategy_name}_strategy_TEMPLATE.yml</code>.</p>","title":"<code>conf_limit_order_strategy_TEMPLATE.yml</code>"},{"location":"developers/strategies/tutorial/#running-our-strategy","text":"<p>Now that we have created a new trading strategy let\u2019s run it in paper trading mode!</p> <p>First, let\u2019s recompile the code. It's good practice to recompile the code every time you make changes to rebuild any altered Cython code. <pre><code>cd ~/hummingbot-instance\n./compile\n</code></pre> Now, start Hummingbot: <pre><code>bin/hummingbot.py\n</code></pre></p>","title":"Running our strategy"},{"location":"developers/strategies/tutorial/#the-hummingbot-ui","text":"<p>Your Hummingbot UI comprises three sections:</p> <ol> <li>the main interface</li> <li>logger</li> <li>the input interface</li> </ol> <p></p>","title":"The Hummingbot UI"},{"location":"developers/strategies/tutorial/#create-the-strategy","text":"<p>Follow the steps below to use the strategy we have created.</p> <ol> <li>Run the command <code>create</code> to start a new bot</li> <li>For \u201cWhat is your market making strategy?\u201d, enter <code>limit_order</code></li> <li>For \"Enter the name of the exchange &gt;&gt;&gt; \", enter <code>binance</code></li> <li>For \"Enter the token trading pair on binance &gt;&gt;&gt; \", enter <code>ETH-USDT</code></li> <li>Save the configuration file</li> </ol>","title":"Create the strategy"},{"location":"developers/strategies/tutorial/#run-the-strategy","text":"<p>Run <code>start</code> to run your bot in paper trading mode. You should see the following log messages:</p> <p></p> <p>You can also run the <code>history</code> command to see the results of the trade:</p> <p></p>","title":"Run the strategy"},{"location":"developers/strategies/tutorial/#conclusion","text":"<p>Congratulations - you have just created your first trading bot! This bot is very simple but should provide the foundation for you to experiment further. Can you prompt the user to change the order amount or trade type, or chain a series of trades?</p> <p>Before you know it, you will be creating complex trading strategies combining different exchanges with Hummingbot! To learn more about creating Hummingbot strategies, check out our Developer Tutorial.</p>","title":"Conclusion"},{"location":"exchanges/","text":"","title":"Exchange Connectors"},{"location":"exchanges/#exchange-types","text":"<p>Hummingbot connectors standardize trading logic and order types across different exchange types. All code related to each connector is housed in a folder located in the Hummingbot codebase.</p> <p>We classify connectors using the following labels:</p> <ul> <li>SPOT: An exchange that trades spot markets</li> <li>PERP: An exchange that trades perpetual swap markets</li> <li>CEX: A centralized exchange that takes custody of user assets</li> <li>DEX: A decentralized exchange in which user assets are stored non-custodially in smart contracts</li> <li>CLOB: An exchange that uses a Central Limit Order Book to match makers and takers</li> <li>AMM: A DEX that uses Automatic Market Maker (AMM) smart contracts, popularized by Uniswap-V2</li> <li>AMM-RANGE: A DEX that uses Automatic Market Maker (AMM) smart contracts that let liquidity providers specify a range, popularized by Uniswap-V3</li> </ul>","title":"Exchange Types"},{"location":"exchanges/#connector-tiers","text":"<p>Quarterly Polls allow the Hummingbot community to vote using HBOT tokens to rank the exchanges in the codebase. This decides which connectors should be included going forward, and how they are maintained:</p>","title":"Connector Tiers"},{"location":"exchanges/#gold","text":"<p></p> <p>The two Gold exchanges are the top CEX and DEX selected by HBOT voters in the latest Poll. Their connectors are maintained by Hummingbot Foundation and are continually improved, serving as the \"gold standard\" template for all other connectors of that type.</p>    Exchange Type Signup code     Binance SPOT CLOB CEX FQQNNGCD   Binance (perp) PERP CLOB CEX hummingbot   Uniswap SPOT AMM-RANGE DEX","title":"Gold"},{"location":"exchanges/#silver","text":"<p></p> <p>Silver exchanges are prioritized by HBOT holders in the latest Poll. Their connectors are maintained by Hummingbot Foundation via community developer bounties, tracking improvements made to the Gold connectors.</p>    Exchange Type Signup code     Kucoin SPOT CLOB CEX 272KvRf   Gate.io SPOT CLOB CEX 5868285   Gate.io (perp) PERP CLOB CEX 5868285   AscendEx SPOT CLOB CEX UEIXNXKW   Pancakeswap SPOT AMM DEX    Sushiswap SPOT AMM DEX    dYdX PERP CLOB DEX","title":"Silver"},{"location":"exchanges/#bronze","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"Bronze"},{"location":"exchanges/#connector-maintenance","text":"<p>Exchange connectors may have a maintainer who is responsible for ongoing maintenance: fixing bugs, addressing user issues, and keeping up with exchange API and Hummingbot connector standard updates. Specifically, maintainer responsibilities include:</p> <ul> <li>Addressing user Github issues and pull requests related to the connector</li> <li>Keeping the connector updated for changes to the exchange API and Hummingbot connector standard for that exchange type</li> <li>Keeping the connector's documentation page updated</li> </ul> <p>Hummingbot Foundation is the maintainer for the GOLD and SILVER exchange connectors.</p> <p>Our sister company CoinAlpha maintains the following BRONZE connectors:</p>    Exchange Type Signup code     Bitget PERP CLOB CEX    Bitmart SPOT CLOB CEX UM6fQV   BTC-Markets SPOT CLOB CEX    CI-EX SPOT CLOB CEX    Himalaya SPOT CLOB CEX    NDAX SPOT CLOB CEX    LBank SPOT CLOB CEX    Mad Meerkat SPOT AMM DEX    Pangolin SPOT AMM DEX    Ref SPOT AMM DEX    Trader Joe SPOT AMM DEX    VVS SPOT AMM DEX","title":"Connector Maintenance"},{"location":"exchanges/#contributing-connectors","text":"<p>Developers may submit connectors as pull requests. See Contribution Guidelines for the process to get pull requests merged into the codebase.</p>","title":"Contributing Connectors"},{"location":"exchanges/altmarkets/","text":"","title":"<code>altmarkets</code>"},{"location":"exchanges/altmarkets/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/altmarkets</li> <li>Maintainer: TheHolyRoger</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/altmarkets/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/altmarkets/#i-exchange-info","text":"<ul> <li>Website: https://v2.altmarkets.io/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/altmarkets/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/altmarkets</li> <li>API docs: https://app.swaggerhub.com/apis-docs/Altmarkets/PublicApi/2.3.12</li> <li>Fees: https://v2.altmarkets.io/fees</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/altmarkets/#connection","text":"<p>Run <code>connect altmarkets</code> in order to enter your API keys:</p> <pre><code>Enter your AltMarkets API key &gt;&gt;&gt;\nEnter your AltMarkets secret API key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful: <pre><code>You are now connected to altmarkets.\n</code></pre></p>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/ascend-ex/","text":"","title":"<code>ascend_ex</code>"},{"location":"exchanges/ascend-ex/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/ascend_ex</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/ascend-ex/#exchange-tier","text":"<p></p> <p>Silver exchanges are prioritized by HBOT holders in the latest Poll. Their connectors are maintained by Hummingbot Foundation via community developer bounties, tracking improvements made to the Gold connectors.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/ascend-ex/#i-exchange-info","text":"<ul> <li>Website: https://ascendex.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/ascendex/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/ascendex</li> <li>API docs: https://ascendex.github.io/ascendex-pro-api/#ascendex-pro-api-documentation</li> <li>Fees: https://ascendex.com/en/feerate/transactionfee-traderate</li> <li>Hummingbot Referral Link: https://ascendex.com/register?inviteCode=UEIXNXKW (10% off fees)</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/ascend-ex/#connection","text":"<p>Run <code>connect ascend_ex</code> in order to enter your API keys:</p> <pre><code>Enter your AscendEx API key &gt;&gt;&gt;\nEnter your AscendEx secret API key &gt;&gt;&gt;\nEnter your AscendEx group ID &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to ascend_ex.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/binance-perpetual/","text":"","title":"<code>binance_perpetual</code>"},{"location":"exchanges/binance-perpetual/#connector-info","text":"<ul> <li>Type: PERP CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/binance</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/binance-perpetual/#exchange-tier","text":"<p></p> <p>The Gold exchange is the top CEX or DEX selected by HBOT voters in the latest Poll. Their connectors are maintained by Hummingbot Foundation and are continually improved, serving as the \"gold standard\" template for all other connectors of that type.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/binance-perpetual/#i-exchange-info","text":"<ul> <li>Website: https://www.binance.com/en/futures</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/binance/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/binance</li> <li>API docs: https://binance-docs.github.io/apidocs/futures/en/#change-log</li> <li>Fees: https://www.binance.com/en/support/faq/360033544231</li> <li>Hummingbot Referral Link: https://www.binance.com/en/futures/ref/hummingbot (10% off fees)</li> </ul>  <p>Enable Futures</p> <p>Ensure that the option Enable Futures is checked when you create your API key. If you don't see this option, you may need to open a Binance Futures account first.</p>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/binance-perpetual/#connection","text":"<p>Run <code>connect binance_perpetual</code> in order to enter your API keys:</p> <pre><code>Enter your binance_perpetual API key &gt;&gt;&gt;\nEnter your binance_perpetual secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to binance_perpetual.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/binance-perpetual/#testnet","text":"<p>This connector supports testnet trading. To connect to the testnet exchange, run <code>connect binance_perpetual_testnet</code> and enter your API keys.</p>","title":"\ud83d\udee0 Testnet"},{"location":"exchanges/binance-us/","text":"","title":"<code>binance_us</code>"},{"location":"exchanges/binance-us/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/binance</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/binance-us/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/binance-us/#i-exchange-info","text":"<ul> <li>Website: https://binance.us/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/binance-us/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/binance_us</li> <li>API docs: https://github.com/binance-us/binance-official-api-docs/blob/master/rest-api.md</li> <li>Fees: https://www.binance.us/en/fee/schedule</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/binance-us/#connection","text":"<p>Run <code>connect binance_us</code> in order to enter your API keys:</p> <pre><code>Enter your Binance US API key &gt;&gt;&gt;\nEnter your Binance US secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to binance_us.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/binance/","text":"","title":"<code>binance</code>"},{"location":"exchanges/binance/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/binance</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/binance/#exchange-tier","text":"<p></p> <p>The Gold exchange is the top CEX or DEX selected by HBOT voters in the latest Poll. Their connectors are maintained by Hummingbot Foundation and are continually improved, serving as the \"gold standard\" template for all other connectors of that type.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/binance/#i-exchange-info","text":"<ul> <li>Website: https://binance.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/binance/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/binance</li> <li>API docs: https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md</li> <li>Fees: https://www.binance.com/en/fee/schedule</li> <li>Hummingbot Referral Link: https://www.binance.com/en/register?ref=FQQNNGCD (100 USDT in fee rebates)</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/binance/#connection","text":"<p>Run <code>connect binance</code> in order to enter your API keys:</p> <pre><code>Enter your binance API key &gt;&gt;&gt;\nEnter your binance secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to binance.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/bitfinex/","text":"","title":"<code>bitfinex</code>"},{"location":"exchanges/bitfinex/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/bitfinex</li> <li>Maintainer: None</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/bitfinex/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/bitfinex/#i-exchange-info","text":"<ul> <li>Website: https://www.bitfinex.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/bitfinex/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/bitfinex</li> <li>API docs: https://docs.bitfinex.com/docs/introduction</li> <li>Fees: https://www.bitfinex.com/fees/</li> <li>Hummingbot Referral Link: https://bitfinex.com/?refcode=-dxCUrjvc</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/bitfinex/#connection","text":"<p>Run <code>connect bitfinex</code> in order to enter your API keys:</p> <pre><code>Enter your Bitfinex API key &gt;&gt;&gt;\nEnter your Bitfinex secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to bitfinex.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/bitget-perpetual/","text":"","title":"<code>bitget_perpetual</code>"},{"location":"exchanges/bitget-perpetual/#connector-info","text":"<ul> <li>Type: PERP CLOB CEX</li> <li>Folder: /hummingbot/connector/derivative/bitget_perpetual</li> <li>Maintainer: CoinAlpha</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/bitget-perpetual/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/bitget-perpetual/#i-exchange-info","text":"<ul> <li>Website: https://www.bitget.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/bitget/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/bitget</li> <li>API docs: https://bitgetlimited.github.io/apidoc/en/spot/#welcome</li> <li>Fees: https://www.bitget.com/academy/en/article-details/Fee-Structure-and-Fee-Calculations-on-Bitget</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/bitget-perpetual/#connection","text":"<p>Run <code>connect bitget_perpetual</code> in order to enter your API keys:</p> <pre><code>Enter your bitget_perpetual API key &gt;&gt;&gt;\nEnter your bitget_perpetual secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful: <pre><code>You are now connected to bitget_perpetual.\n</code></pre></p>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/bitmart/","text":"","title":"<code>bitmart</code>"},{"location":"exchanges/bitmart/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/bitmart</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/bitmart/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/bitmart/#i-exchange-info","text":"<ul> <li>Website: https://www.bitmart.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/bitmart/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/bitmart</li> <li>API\u00a0docs:\u00a0https://developer-pro.bitmart.com/en/</li> <li>Fees:\u00a0https://support.bmx.fund/hc/en-us/articles/360002043633-Fees</li> <li>Hummingbot Referral Link: https://www.bitmart.com/en?r=UM6fQV</li> </ul>","title":"\u2139\ufe0f\u00a0Exchange\u00a0Info"},{"location":"exchanges/bitmart/#connection","text":"<p>Run\u00a0<code>connect\u00a0bitmart</code>\u00a0in\u00a0order\u00a0to\u00a0enter\u00a0your\u00a0API\u00a0keys:</p> <pre><code>Enter\u00a0your\u00a0bitmart\u00a0API\u00a0key\u00a0&gt;&gt;&gt;\nEnter\u00a0your\u00a0bitmart\u00a0secret key\u00a0&gt;&gt;&gt;\nEnter your bitmart API Memo &gt;&gt;&gt;\n</code></pre> <p>If\u00a0connection\u00a0is\u00a0successful:</p> <pre><code>You\u00a0are\u00a0now\u00a0connected\u00a0to\u00a0bitmart.\n</code></pre>","title":"\ud83d\udd11\u00a0Connection"},{"location":"exchanges/bitmex-perpetual/","text":"","title":"<code>bitmex_perpetual</code>"},{"location":"exchanges/bitmex-perpetual/#connector-info","text":"<ul> <li>Type: PERP CLOB CEX</li> <li>Folder: /hummingbot/connector/derivative/bitmex_perpetual</li> <li>Maintainer: None</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/bitmex-perpetual/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/bitmex-perpetual/#i-exchange-info","text":"<ul> <li>Website: https://www.bitmex.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/bitmex/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/bitmex</li> <li>API docs: https://www.bitmex.com/api/explorer/</li> <li>Fees: https://www.bitmex.com/app/fees</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/bitmex-perpetual/#connection","text":"<p>Run <code>connect bitmex_perpetual</code> in order to enter your API keys:</p> <pre><code>Enter your bitmex_perpetual API key &gt;&gt;&gt;\nEnter your bitmex_perpetual secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful: <pre><code>You are now connected to bitmex_perpetual.\n</code></pre></p>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/bitmex/","text":"","title":"<code>bitmex</code>"},{"location":"exchanges/bitmex/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/bitmex</li> <li>Maintainer: None</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/bitmex/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/bitmex/#i-exchange-info","text":"<ul> <li>Website: https://www.bitmex.com/)</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/bitmex/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/bitmex</li> <li>API docs: https://www.bitmex.com/api/explorer/</li> <li>Fees: https://www.bitmex.com/wallet/fees/spot</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/bitmex/#connection","text":"<p>Run <code>connect bitmex</code> in order to enter your API keys:</p> <pre><code>Enter your bitmex API key &gt;&gt;&gt;\nEnter your bitmex secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful: <pre><code>You are now connected to bitmex.\n</code></pre></p>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/bittrex/","text":"","title":"<code>bittrex</code>"},{"location":"exchanges/bittrex/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/bittrex</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/bittrex/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/bittrex/#i-exchange-info","text":"<ul> <li>Website: https://international.bittrex.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/bittrex/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/bittrex</li> <li>API docs: https://bittrex.github.io/api/v3</li> <li>Transaction fees: https://bittrexglobal.zendesk.com/hc/en-us/articles/360009625260</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/bittrex/#connection","text":"<p>Run <code>connect bittrex</code> in order to enter your API keys:</p> <pre><code>Enter your Bittrex API key &gt;&gt;&gt;\nEnter your Bittrex secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to bittrex.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/btc-markets/","text":"","title":"<code>btc-markets</code>"},{"location":"exchanges/btc-markets/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/btc_markets</li> <li>Maintainer: vdmerweandre</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/btc-markets/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/btc-markets/#i-exchange-info","text":"<ul> <li>Website: https://www.btcmarkets.net/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/btc-markets/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/btcmarkets</li> <li>API docs: https://docs.btcmarkets.net/v3/</li> <li>Fees: https://www.btcmarkets.net/fees</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/btc-markets/#connection","text":"<p>Run <code>connect btc_markets</code> in order to enter your API keys:</p> <pre><code>Enter your btc_markets API key &gt;&gt;&gt;\nEnter your btc_markets secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to btc_markets.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/bybit-perpetual/","text":"","title":"<code>bybit_perpetual</code>"},{"location":"exchanges/bybit-perpetual/#connector-info","text":"<ul> <li>Type: PERP CLOB CEX</li> <li>Folder: /hummingbot/connector/derivative/bybit_perpetual</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/bybit-perpetual/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/bybit-perpetual/#i-exchange-info","text":"<ul> <li>Website: https://www.bybit.com/en-US/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/bybit/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/bybit</li> <li>API docs: https://bybit-exchange.github.io/docs/inverse/#t-introduction</li> <li>Transaction fees: https://help.bybit.com/hc/en-us/articles/360039261154-Taker-s-Fee-and-Maker-s-Rebate-Calculation</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/bybit-perpetual/#connection","text":"<p>Run <code>connect bybit_perpetual</code> in order to enter your API keys:</p> <pre><code>Enter your Bybit Perpetual API key &gt;&gt;&gt;\nEnter your Bybit Perpetual secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to bybit_perpetual.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/bybit-perpetual/#testnet","text":"<p>Hummingbot supports the testnet version of this exchange. To connect to the testnet exchange, run <code>connect bybit_perpetual_testnet</code> and enter your API keys.</p>","title":"\ud83e\uddea Testnet"},{"location":"exchanges/bybit/","text":"","title":"<code>bybit</code>"},{"location":"exchanges/bybit/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/bybit</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/bybit/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/bybit/#i-exchange-info","text":"<ul> <li>Website: https://www.bybit.com/en-US/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/bybit/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/bybit</li> <li>API docs: https://bybit-exchange.github.io/docs/inverse/#t-introduction</li> <li>Transaction fees: https://help.bybit.com/hc/en-us/articles/360039261154-Taker-s-Fee-and-Maker-s-Rebate-Calculation</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/bybit/#connection","text":"<p>Run <code>connect bybit</code> in order to enter your API keys:</p> <pre><code>Enter your Bybit API key &gt;&gt;&gt;\nEnter your Bybit secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to Bybit.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/bybit/#fees","text":"<p>Hummingbot assumes -0.1% maker fees and 0.1% taker fees (source).</p> <p>Users can override these assumptions with Override Fees.</p>","title":"\ud83e\ude99 Fees"},{"location":"exchanges/ci-ex/","text":"","title":"<code>ciex</code>"},{"location":"exchanges/ci-ex/#connector-info","text":"<ul> <li>Type: SPOT CLOB DEX</li> <li>Folder: hummingbot/connector/exchange/ciex</li> <li>Maintainer: CoinAlpha</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/ci-ex/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/ci-ex/#i-exchange-info","text":"<ul> <li>Website: https://ci-ex.com/en_US/</li> <li>CoinMarketCap:</li> <li>CoinGecko:</li> <li>API docs:</li> <li>SDK:</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/ci-ex/#connection","text":"<p>Run <code>connect ciex</code> in order to enter your API keys:</p> <pre><code>Enter your CI-EX API key &gt;&gt;&gt;\nEnter your CI-EX secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to ciex.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/ci-ex/#fees","text":"<p>Hummingbot assumes 0.75% maker fees and 0.75% taker fees (source).</p> <p>Users can override these assumptions with Override Fees.</p>","title":"\ud83e\ude99 Fees"},{"location":"exchanges/coinbase/","text":"","title":"<code>coinbase_pro</code>"},{"location":"exchanges/coinbase/#connector-info","text":"<ul> <li>Type: PERP CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/coinbase_pro</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/coinbase/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/coinbase/#i-exchange-info","text":"<ul> <li>Website: https://pro.coinbase.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/coinbase-exchange/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/coinbase-exchange</li> <li>API docs: https://docs.pro.coinbase.com/</li> <li>Transaction fees: https://help.coinbase.com/en/pro/trading-and-funding/trading-rules-and-fees/fees</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/coinbase/#connection","text":"<p>Run <code>connect coinbase_pro</code> in order to enter your API keys:</p> <pre><code>Enter your Coinbase Pro API key &gt;&gt;&gt;\nEnter your Coinbase Pro secret API key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to coinbase_pro.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/coinbase/#fees","text":"<p>Hummingbot assumes 0.5% maker fees and 0.5% taker fees (source).</p> <p>Users can override these assumptions with Override Fees.</p>","title":"\ud83e\ude99 Fees"},{"location":"exchanges/crypto-com/","text":"","title":"<code>crypto_com</code>"},{"location":"exchanges/crypto-com/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: hummingbot/connector/exchange/crypto_com</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/crypto-com/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/crypto-com/#i-exchange-info","text":"<ul> <li>Website: https://crypto.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/crypto-com-exchange/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/crypto_com</li> <li>API docs: https://exchange-docs.crypto.com/spot/index.html#introduction</li> <li>Transaction fees: https://crypto.com/exchange/document/fees-limits</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/crypto-com/#connection","text":"<p>Run <code>connect crypto_com</code> in order to enter your API keys:</p> <pre><code>Enter your Crypto_com API key &gt;&gt;&gt;\nEnter your Crypto_com secret API key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to crypto_com.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/crypto-com/#fees","text":"<p>Hummingbot assumes 0.1% maker fees and 0.1% taker fees (source).</p> <p>Users can override these assumptions with Override Fees.</p>","title":"\ud83e\ude99 Fees"},{"location":"exchanges/defikingdoms/","text":"","title":"<code>defikingdoms</code>"},{"location":"exchanges/defikingdoms/#connector-info","text":"<ul> <li>Type: SPOT AMM DEX</li> <li>Folder: /gateway/src/connectors/defikingdoms</li> <li>Configs: /gateway/src/templates/defikingdoms.yml</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/defikingdoms/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/defikingdoms/#i-exchange-info","text":"<ul> <li>Website: https://defikingdoms.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/currencies/defi-kingdoms/</li> <li>CoinGecko: https://www.coingecko.com/en/coins/defi-kingdoms</li> <li>API docs: https://docs.defikingdoms.com/</li> <li>SDK: https://github.com/DefiKingdoms/sdk</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/defikingdoms/#supported-chains-and-networks","text":"<ul> <li><code>harmony</code>: <code>mainnet</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/defikingdoms/#connection","text":"<p>Run <code>gateway connect defikingdoms</code> in order to connect your wallet:</p> <pre><code>Which chain do you want defikingdoms to connect to? (harmony) &gt;&gt;&gt;\nWhich network do you want defikingdoms to connect to? (mainnet) &gt;&gt;&gt;\nEnter your harmony-mainnet private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>The defikingdoms connector now uses wallet [pubKey] on harmony-mainnet\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/defira/","text":"","title":"<code>defira</code>"},{"location":"exchanges/defira/#connector-info","text":"<ul> <li>Type: SPOT AMM DEX</li> <li>Folder: /gateway/src/connectors/defira</li> <li>Configs: /gateway/src/templates/defira.yml</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/defira/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/defira/#i-exchange-info","text":"<ul> <li>Website: https://defira.com</li> <li>CoinMarketCap: https://coinmarketcap.com/currencies/defira/</li> <li>CoinGecko: https://www.coingecko.com/en/coins/fira</li> <li>API docs: https://docs.defira.com/</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/defira/#supported-chains-and-networks","text":"<ul> <li><code>harmony</code>: <code>mainnet</code>, <code>testnet</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/defira/#connection","text":"<p>Run <code>gateway connect defira</code> in order to connect your wallet:</p> <pre><code>Which chain do you want defira to connect to? (harmony) &gt;&gt;&gt;\nWhich network do you want defira to connect to? (mainnet, testnet) &gt;&gt;&gt;\nEnter your harmony-mainnet private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>The defira connector now uses wallet [pubKey] on harmony-mainnet\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/dydx-perpetual/","text":"","title":"<code>dydx_perpetual</code>"},{"location":"exchanges/dydx-perpetual/#connector-info","text":"<ul> <li>Type: PERP CLOB DEX</li> <li>Folder: /hummingbot/connector/derivative/dydx_perpetual</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/dydx-perpetual/#exchange-tier","text":"<p></p> <p>Silver exchanges are prioritized by HBOT holders in the latest Poll. Their connectors are maintained by Hummingbot Foundation via community developer bounties, tracking improvements made to the Gold connectors.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/dydx-perpetual/#i-exchange-info","text":"<ul> <li>Website: https://dydx.exchange/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/dydx/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/dydx-margin</li> <li>API docs: https://docs.dydx.exchange</li> <li>Fees: https://help.dydx.exchange/en/articles/4800191-are-there-fees-to-using-dydx</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/dydx-perpetual/#connection","text":"<p>Run <code>connect dydx_perpetual</code> in Hummingbot in order to add your API keys.</p> <p>You will need the following to connect Hummingbot to <code>dydx_perpetual</code>:</p> <ul> <li>API key</li> <li>API secret key</li> <li>Passphrase</li> <li>Account number: set this value to <code>0</code></li> <li>Stark private key</li> </ul> <p>API credentials and a stark private key can be obtained programmatically using their documentation:</p> <ul> <li>Recover Default API Credentials</li> <li>Derive StarkKey</li> </ul> <p>Alternatively, you can follow these steps to get the required credentials:</p> <ol> <li>From the dydx Perpetuals exchange, right-click anywhere on your web browser, and select Inspect to open Developer Tools</li> <li>Go to Application &gt; Local Storage &gt; https://trade.dydx.exchange</li> <li>Select STARK_KEY_PAIRS and click the drop-down next to your wallet address to get the stark private key</li> <li>Select API_KEY_PAIRS and click the drop-down next to your wallet address to get the API key, secret key, and passphrase</li> </ol> <p>Depositing assets:</p> <p>Follow the instructions below to deposit assets onto dYdX's Layer 2 side-chain:</p> <ul> <li>How to deposit USDC or any ERC-20 token into your L2 Perpetual account</li> </ul>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/gate-io-perpetual/","text":"","title":"<code>gate_io perpetual</code>"},{"location":"exchanges/gate-io-perpetual/#connector-info","text":"<ul> <li>Type: PERP CLOB CEX</li> <li>Folder: /hummingbot/connector/derivative/gate_io_perpetual</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/gate-io-perpetual/#exchange-tier","text":"<p></p> <p>Silver exchanges are prioritized by HBOT holders in the latest Poll. Their connectors are maintained by Hummingbot Foundation via community developer bounties, tracking improvements made to the Gold connectors.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/gate-io-perpetual/#i-exchange-info","text":"<ul> <li>Website: https://www.gate.io</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/gate-io/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/gate-io</li> <li>API docs: https://www.gate.io/docs/apiv4/en/index.html</li> <li>Fees: https://www.gate.io/fee</li> <li>Hummingbot Referral Link: https://www.gate.io/signup/5868285</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/gate-io-perpetual/#connection","text":"<p>Run <code>connect gate_io_perpetual</code> in order to enter your API keys:</p> <pre><code>Enter your gate_io_perpetual API key &gt;&gt;&gt;\nEnter your gate_io_perpetual secret key &gt;&gt;&gt;\nEnter your gate_io_perpetual user id &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to gate_io_perpetual\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/gate-io/","text":"","title":"<code>gate_io</code>"},{"location":"exchanges/gate-io/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/gate_io</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/gate-io/#exchange-tier","text":"<p></p> <p>Silver exchanges are prioritized by HBOT holders in the latest Poll. Their connectors are maintained by Hummingbot Foundation via community developer bounties, tracking improvements made to the Gold connectors.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/gate-io/#i-exchange-info","text":"<ul> <li>Website: https://www.gate.io</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/gate-io/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/gate-io</li> <li>API docs: https://www.gate.io/docs/apiv4/en/index.html</li> <li>Fees: https://www.gate.io/fee</li> <li>Hummingbot Referral Link: https://www.gate.io/signup/5868285</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/gate-io/#connection","text":"<p>Run <code>connect gate_io</code> in order to enter your API keys:</p> <pre><code>Enter your gate_io API key &gt;&gt;&gt;\nEnter your gate_io secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to gate_io\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/himalaya/","text":"<p>The Himalaya connector will be active in a later release. For now, visit the Himalaya Exchange to learn more and register.</p>","title":"Himalaya"},{"location":"exchanges/hitbtc/","text":"","title":"<code>hitbtc</code>"},{"location":"exchanges/hitbtc/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/hitbtc</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/hitbtc/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/hitbtc/#i-exchange-info","text":"<ul> <li>Website: https://hitbtc.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/hitbtc/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/hitbtc</li> <li>API docs: https://api.hitbtc.com/</li> <li>Transaction fees: https://hitbtc.com/fee-tier</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/hitbtc/#connection","text":"<p>Run <code>connect hitbtc</code> in order to enter your API keys:</p> <pre><code>Enter your hitbtc API key &gt;&gt;&gt;\nEnter your hitbtc secret API key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to hitbtc.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/huobi/","text":"","title":"<code>huobi</code>"},{"location":"exchanges/huobi/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/huobi</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/huobi/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/huobi/#i-exchange-info","text":"<ul> <li>Website: https://www.hbg.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/huobi-global/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/huobi</li> <li>API docs: https://huobiapi.github.io/docs/spot/v1/en/#change-log</li> <li>Transaction fees: https://www.hbg.com/en-us/about/fee/</li> <li>Hummingbot Referral Link: https://www.huobi.com/en-us/v/register/double-invite/?inviter_id=25530615&amp;invite_code=en9k2223</li> </ul>  <p>Referral Link bonuses</p> <p>Special fee rate by registering through the link above. Spot trading: Maker/taker 0.099%, 0.08% with HT deduction</p>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/huobi/#connection","text":"<p>Run <code>connect huobi</code> in order to enter your API keys:</p> <pre><code>Enter your Huobi API key &gt;&gt;&gt;\nEnter your Huobi secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to huobi.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/kraken/","text":"","title":"<code>kraken</code>"},{"location":"exchanges/kraken/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/kraken</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/kraken/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/kraken/#i-exchange-info","text":"<ul> <li>Website: https://www.kraken.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/kraken/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/kraken</li> <li>API docs: https://docs.kraken.com/rest/</li> <li>Transaction fees: https://www.kraken.com/features/fee-schedule</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/kraken/#connection","text":"<p>Run <code>connect kraken</code> in order to enter your API keys:</p> <pre><code>Enter your Kraken API key &gt;&gt;&gt;\nEnter your Kraken secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to kraken.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/kraken/#fees","text":"<p>Hummingbot assumes 0.16% maker fees and 0.26% taker fees (source).</p> <p>Users can override these assumptions with Override Fees.</p>","title":"\ud83e\ude99 Fees"},{"location":"exchanges/kucoin/","text":"","title":"<code>kucoin</code>"},{"location":"exchanges/kucoin/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/kucoin</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/kucoin/#exchange-tier","text":"<p></p> <p>Silver exchanges are prioritized by HBOT holders in the latest Poll. Their connectors are maintained by Hummingbot Foundation via community developer bounties, tracking improvements made to the Gold connectors.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/kucoin/#i-exchange-info","text":"<ul> <li>Website: https://www.kucoin.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/kucoin/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/kucoin</li> <li>API docs: https://docs.kucoin.com/#general</li> <li>Fees: https://www.kucoin.com/vip/level</li> <li>Hummingbot Referral Link: https://www.kucoin.com/ucenter/signup?rcode=272KvRf</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/kucoin/#connection","text":"<p>Run <code>connect kucoin</code> in order to enter your API keys:</p> <pre><code>Enter your kucoin API key &gt;&gt;&gt;\nEnter your kucoin secret key &gt;&gt;&gt;\nEnter your kucoin passphrase &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to kucoin.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/lbank/","text":"","title":"<code>lbank</code>"},{"location":"exchanges/lbank/#connector-info","text":"<ul> <li>Type: SPOT CLOB DEX</li> <li>Folder: /gateway/src/connectors/lbank</li> <li>Maintainer: CoinAlpha</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/lbank/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/lbank/#i-exchange-info","text":"<ul> <li>Website: https://www.lbank.info/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/lbank/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/lbank</li> <li>API docs: https://www.lbank.info/en-US/docs/index.html#introduction</li> <li>SDK:</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/lbank/#connection","text":"<p>Run <code>connect lbank</code> in order to enter your API keys:</p> <pre><code>Enter your LBank API key &gt;&gt;&gt;\nEnter your LBank secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to LBank.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/lbank/#fees","text":"<p>Hummingbot assumes 0.1% maker fees and 0.1% taker fees (source).</p> <p>Users can override these assumptions with Override Fees.</p>","title":"\ud83e\ude99 Fees"},{"location":"exchanges/loopring/","text":"","title":"<code>loopring</code>"},{"location":"exchanges/loopring/#connector-info","text":"<ul> <li>Type: SPOT CLOB DEX</li> <li>Folder: /hummingbot/connector/exchange/loopring</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/loopring/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/loopring/#i-exchange-info","text":"<ul> <li>Website: https://loopring.io/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/loopring-exchange/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/loopring</li> <li>API docs: https://docs.loopring.io/</li> <li>Transaction fees: https://blogs.loopring.org/loopring-exchange-faq/</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/loopring/#connection","text":"<p>Run, <code>connect loopring</code> in Hummingbot in order to enter your API keys:</p> <pre><code>Enter your Loopring account id &gt;&gt;&gt;\nEnter the Loopring exchange address &gt;&gt;&gt;\nEnter your Loopring private key &gt;&gt;&gt;\nEnter your loopring api key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to loopring.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/loopring/#fees","text":"<p>Hummingbot assumes 0% maker fees and 0.2% taker fees (source).</p> <p>Users can override these assumptions with Override Fees.</p>","title":"\ud83e\ude99 Fees"},{"location":"exchanges/mad-meerkat/","text":"","title":"<code>mad_meerkat</code>"},{"location":"exchanges/mad-meerkat/#connector-info","text":"<ul> <li>Type: SPOT AMM DEX</li> <li>Folder: /gateway/src/connectors/mad_meerkat</li> <li>Configs: /hummingbot/gateway/src/templates/mad_meerkat.yml</li> <li>Maintainer: CoinAlpha</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/mad-meerkat/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/mad-meerkat/#i-exchange-info","text":"<ul> <li>Website: https://mm.finance</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/mm-finance/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/mm_finance</li> <li>API docs: https://mmfinance.gitbook.io/docs/troubleshooting-errors</li> <li>SDK:</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/mad-meerkat/#supported-chains-and-networks","text":"<ul> <li><code>cronos</code>: <code>mainnet</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/mad-meerkat/#connection","text":"<p>Run <code>gateway connect mad_meerkat</code> in order to connect your wallet:</p> <pre><code>Which chain do you want mad_meerkat to connect to? (cronos) &gt;&gt;&gt;\nWhich network do you want mad_meerkat to connect to? (mainnet) &gt;&gt;&gt;\nEnter your cronos-mainnet private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>The mad_meerkat connector now uses wallet [pubKey] on cronos-mainnet\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/mexc/","text":"","title":"<code>mexc</code>"},{"location":"exchanges/mexc/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/mexc</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/mexc/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/mexc/#i-exchange-info","text":"<ul> <li>Website: https://www.mexc.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/mxc/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/mexcglobal</li> <li>API docs: https://mxcdevelop.github.io/APIDoc/</li> <li>Transaction fees: https://www.mexc.com/fee</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/mexc/#connection","text":"<p>Run <code>connect mexc</code> in order to enter your API keys:</p> <pre><code>Enter your mexc API key &gt;&gt;&gt;\nEnter your mexc secret API key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to mexc.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/ndax/","text":"","title":"<code>ndax</code>"},{"location":"exchanges/ndax/#connector-info","text":"<ul> <li>Type: SPOT CLOB DEX</li> <li>Folder: /gateway/src/connectors/ndax</li> <li>Maintainer: CoinAlpha</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/ndax/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/ndax/#i-exchange-info","text":"<ul> <li>Website: https://ndax.io/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/ndax/</li> <li>CoinGecko:</li> <li>API docs: https://ndaxlo.github.io/API/#introduction</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/ndax/#connection","text":"<p>Run <code>connect ndax</code> in order to enter your API keys:</p> <pre><code>Enter your ndax user ID (uid) &gt;&gt;&gt;\nEnter the name of the account you want to use &gt;&gt;&gt;\nEnter your ndax API key &gt;&gt;&gt;\nEnter your ndax secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to ndax.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/okx/","text":"","title":"<code>okx</code>"},{"location":"exchanges/okx/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/okx</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/okx/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/okx/#i-exchange-info","text":"<ul> <li>Website: https://www.okx.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/okx/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/okx</li> <li>API docs: https://www.okx.com/docs/en/</li> <li>Hummingbot Referral Link: https://www.okx.com/join/1931920</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/okx/#connection","text":"<p>Run <code>connect okx</code> in order to enter your API keys:</p> <pre><code>Enter your okx API key &gt;&gt;&gt;\nEnter your okx secret key &gt;&gt;&gt;\nEnter your okx passphrase key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to okx.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/openocean/","text":"","title":"<code>openocean</code>"},{"location":"exchanges/openocean/#connector-info","text":"<ul> <li>Type: SPOT AMM DEX</li> <li>Folder: /gateway/src/connectors/openocean</li> <li>Configs: /gateway/src/templates/openocean.yml</li> <li>Maintainer: kanghoulin</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/openocean/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/openocean/#i-exchange-info","text":"<ul> <li>Website: https://openocean.finance/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/openocean/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/openocean_finance</li> <li>API docs: https://github.com/openocean-finance/openocean-api</li> <li>SDK: https://github.com/openocean-finance/OpenOcean-SDK-API</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/openocean/#supported-chains-and-networks","text":"<ul> <li><code>avalanche</code>: <code>avalanche</code></li> <li><code>ethereum</code>: <code>mainnet</code></li> <li><code>polygon</code>: <code>mainnet</code></li> <li><code>harmony</code>: <code>mainnet</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/openocean/#setup","text":"<p>Run <code>gateway connect openocean</code> in order to connect your wallet:</p> <pre><code>Which chain do you want openocean to connect to? (avalanche, ethereum, polygon, harmony) &gt;&gt;&gt;\nWhich network do you want openocean to connect to? (mainnet) &gt;&gt;&gt;\nEnter your polygon-mainnet private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>The openocean connector now uses wallet [pubKey] on polygon-mainnet\n</code></pre>","title":"\ud83d\udd11 Setup"},{"location":"exchanges/pancakeswap/","text":"","title":"<code>pancakeswap</code>"},{"location":"exchanges/pancakeswap/#connector-info","text":"<ul> <li>Type: SPOT AMM DEX</li> <li>Folder: /gateway/src/connectors/pancakeswap</li> <li>Configs: /gateway/src/templates/pancakeswap.yml</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Connector info"},{"location":"exchanges/pancakeswap/#exchange-tier","text":"<p></p> <p>Silver exchanges are prioritized by HBOT holders in the latest Poll. Their connectors are maintained by Hummingbot Foundation via community developer bounties, tracking improvements made to the Gold connectors.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/pancakeswap/#i-exchange-info","text":"<ul> <li>Website: https://pancakeswap.finance/</li> <li>CoinMarketCap: https://coinmarketcap.com/currencies/pancakeswap/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/pancakeswap</li> <li>API docs:\u00a0https://github.com/pancakeswap/pancake-info-api/blob/develop/v2-documentation.md</li> <li>SDK:\u00a0https://github.com/pancakeswap/pancake-frontend/tree/develop/packages/swap-sdk</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/pancakeswap/#supported-chains-and-networks","text":"<ul> <li><code>binance-smart-chain</code>: <code>mainnet</code>, <code>testnet</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/pancakeswap/#connection","text":"<p>Run <code>gateway connect pancakeswap</code> in order to connect your wallet:</p> <pre><code>Which chain do you want pancakeswap to connect to? (binance-smart-chain) &gt;&gt;&gt;\nWhich network do you want pancakeswap to connect to? (mainnet, testnet) &gt;&gt;&gt;\nEnter your binance-smart-chain-mainnet private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful: <pre><code>The pancakeswap connector now uses wallet [pubKey] on binance-smart-chain-mainnet\n</code></pre></p>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/pangolin/","text":"","title":"<code>pangolin</code>"},{"location":"exchanges/pangolin/#connector-info","text":"<ul> <li>Type: SPOT AMM DEX</li> <li>Folder: /gateway/src/connectors/pangolin</li> <li>Configs: /gateway/src/templates/pangolin.yml</li> <li>Maintainer: CoinAlpha</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/pangolin/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/pangolin/#i-exchange-info","text":"<ul> <li>Website: https://pangolin.exchange/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/pangolin/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/pangolin</li> <li>API docs: https://github.com/pangolindex/pangolin-api</li> <li>SDK: https://github.com/pangolindex/sdk</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/pangolin/#supported-chains-and-networks","text":"<ul> <li><code>avalanche</code>: <code>avalanche</code>, <code>fuji</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/pangolin/#connection","text":"<p>Run <code>gateway connect pangolin</code> in order to connect your wallet:</p> <pre><code>Which chain do you want pangolin to connect to? (avalanche) &gt;&gt;&gt;\nWhich network do you want pangolin to connect to? (avalanche, fuji) &gt;&gt;&gt;\nEnter your avalanche-avalanche private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>The pangolin connector now uses wallet [pubKey] on avalanche-avalanche\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/perp/","text":"","title":"<code>perp</code>"},{"location":"exchanges/perp/#connector-info","text":"<ul> <li>Type: PERP AMM DEX</li> <li>Folder: /gateway/src/connectors/perp</li> <li>Configs: /gateway/src/templates/perp.yml</li> <li>Maintainer: None</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/perp/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/perp/#i-exchange-info","text":"<ul> <li>Website: https://perp.com/</li> <li>CoinMarketCap](https://coinmarketcap.com/exchanges/perpetual-protocol/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/perpetual_protocol</li> <li>API docs: https://perp.com/developers</li> <li>SDK: https://github.com/perpetual-protocol/sdk-curie</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/perp/#supported-chains-and-networks","text":"<ul> <li><code>ethereum</code>: <code>optimism</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/perp/#connection","text":"<pre><code>Which chain do you want perp to connect to? (ethereum) &gt;&gt;&gt;\nWhich network do you want perp to connect to? (optimism) &gt;&gt;&gt;\nEnter your ethereum-optimism private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful: <pre><code>The perp connector now uses wallet [pubKey] on ethereum-optimism\n</code></pre></p>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/probit/","text":"","title":"<code>probit</code>"},{"location":"exchanges/probit/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/probit</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/probit/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/probit/#i-exchange-info","text":"<ul> <li>Website: https://www.probit.com/en-us/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/probit-exchange/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/probit</li> <li>API docs: https://docs-en.probit.com/docs</li> <li>Fees:</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/probit/#connection","text":"<p>Run <code>connect probit</code> in order to enter your API keys:</p> <pre><code>Enter your ProBit Client ID &gt;&gt;&gt;\nEnter your ProBit secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to probit.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/quickswap/","text":"","title":"<code>quickswap</code>"},{"location":"exchanges/quickswap/#connector-info","text":"<ul> <li>Type: SPOT AMM DEX</li> <li>Folder: /gateway/src/connectors/quickswap</li> <li>Configs: /gateway/src/templates/quickswap.yml</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/quickswap/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/quickswap/#i-exchange-info","text":"<ul> <li>Website: https://quickswap.exchange/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/quickswap/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/quickswap</li> <li>API docs: https://docs.quickswap.exchange/reference/</li> <li>Fees:  https://docs.quickswap.exchange</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/quickswap/#supported-chains-and-networks","text":"<ul> <li><code>polygon</code>: <code>mainnet</code>, <code>mumbai</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/quickswap/#setup","text":"<p>Run <code>gateway connect quickswap</code> in order to connect your wallet:</p> <pre><code>Which chain do you want quickswap to connect to? (polygon) &gt;&gt;&gt;\nWhich network do you want quickswap to connect to? (mainnet, mumbai) &gt;&gt;&gt;\nEnter your polygon-mainnet private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>The quickswap connector now uses wallet [pubKey] on polygon-mainnet\n</code></pre>","title":"\ud83d\udd11 Setup"},{"location":"exchanges/ref/","text":"","title":"<code>ref</code>"},{"location":"exchanges/ref/#connector-info","text":"<ul> <li>Type: SPOT AMM DEX</li> <li>Folder: /gateway/src/connectors/ref</li> <li>Configs: /gateway/src/templates/ref.yml</li> <li>Maintainer: CoinAlpha</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/ref/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/ref/#i-exchange-info","text":"<ul> <li>Website: https://www.ref.finance/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/ref-finance/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/ref_finance</li> <li>API docs: https://guide.ref.finance/</li> <li>SDK: https://github.com/ref-finance/ref-sdk</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/ref/#supported-chains-and-networks","text":"<ul> <li><code>near</code>: <code>mainnet</code>, <code>testnet</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/ref/#connection","text":"<p>Run <code>gateway connect ref</code> in order to connect your wallet:</p> <pre><code>Which chain do you want ref to connect to? (near) &gt;&gt;&gt;\nWhich network do you want ref to connect to? (mainnet, testnet) &gt;&gt;&gt;\nEnter your near-mainnet private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>The ref connector now uses wallet [pubKey] on near-mainnet\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/sushiswap/","text":"","title":"<code>sushiswap</code>"},{"location":"exchanges/sushiswap/#connector-info","text":"<ul> <li>Type: SPOT AMM DEX</li> <li>Folder: /gateway/src/connectors/sushiswap</li> <li>Configs: /gateway/src/templates/sushiswap.yml</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Connector info"},{"location":"exchanges/sushiswap/#exchange-tier","text":"<p></p> <p>Silver exchanges are prioritized by HBOT holders in the latest Poll. Their connectors are maintained by Hummingbot Foundation via community developer bounties, tracking improvements made to the Gold connectors.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/sushiswap/#i-exchange-info","text":"<ul> <li>Website: https://sushi.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/sushiswap/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/sushiswap</li> <li>API docs: https://docs.sushi.com/</li> <li>SDK: https://github.com/sushiswap/sdk</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/sushiswap/#supported-chains-and-networks","text":"<ul> <li><code>ethereum</code>: <code>mainnet</code>, <code>goerli</code></li> <li><code>binance-smart-chain</code>: <code>mainnet</code>, <code>testnet</code></li> <li><code>polygon</code>: <code>mainnet</code>, <code>mumbai</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/sushiswap/#connection","text":"<p>Run <code>gateway connect sushiswap</code> in order to connect your wallet:</p> <pre><code>Which chain do you want sushiswap to connect to? (ethereum, binance-smart-chain, polygon) &gt;&gt;&gt;\nWhich network do you want sushiswap to connect to? (mainnet, goerli) &gt;&gt;&gt;\nEnter your ethereum-mainnet private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>The sushiswap connector now uses wallet [pubKey] on ethereum-mainnet\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/traderjoe/","text":"","title":"<code>traderjoe</code>"},{"location":"exchanges/traderjoe/#connector-info","text":"<ul> <li>Type: SPOT AMM DEX</li> <li>Folder: /gateway/src/connectors/traderjoe</li> <li>Configs: /gateway/src/templates/traderjoe.yml</li> <li>Maintainer: CoinAlpha</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/traderjoe/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/traderjoe/#i-exchange-info","text":"<ul> <li>Website: https://traderjoexyz.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/traderjoe/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/traderjoe</li> <li>API docs: https://docs.traderjoexyz.com/</li> <li>SDK: https://github.com/traderjoe-xyz/joe-sdk</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/traderjoe/#supported-chains-and-networks","text":"<ul> <li><code>avalanche</code>: <code>avalanche</code>, <code>fuji</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/traderjoe/#connection","text":"<p>Run <code>gateway connect traderjoe</code> in order to connect your wallet:</p> <pre><code>Which chain do you want traderjoe to connect to? (avalanche) &gt;&gt;&gt;\nWhich network do you want traderjoe to connect to? (avalanche, fuji) &gt;&gt;&gt;\nEnter your avalanche-avalanche private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>The traderjoe connector now uses wallet [pubKey] on avalanche-avalanche\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/uniswap/","text":"","title":"<code>uniswap</code>"},{"location":"exchanges/uniswap/#connector-info","text":"<ul> <li>Type: SPOT AMM-RANGE DEX</li> <li>Folder: /gateway/src/connectors/uniswap</li> <li>Configs: /gateway/src/templates/uniswap.yml</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/uniswap/#exchange-tier","text":"<p></p> <p>The Gold exchange is the top CEX or DEX selected by HBOT voters in the latest Poll. Their connectors are maintained by Hummingbot Foundation and are continually improved, serving as the \"gold standard\" template for all other connectors of that type.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/uniswap/#supported-chains-and-networks","text":"<ul> <li>Ethereum: <code>mainnet</code>, <code>goerli</code>, <code>arbitrum_one</code>, <code>optimism</code></li> <li>Polygon: <code>mainnet</code>, <code>mumbai</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/uniswap/#i-exchange-info","text":"<ul> <li>Website: https://uniswap.org/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/uniswap-v2/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/uniswap_v2</li> <li>API docs: https://docs.uniswap.org/</li> <li>SDK: https://docs.uniswap.org/sdk/v3/overview</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/uniswap/#connection","text":"<p>The <code>uniswap</code> connector fetches prices and creates swaps. Run <code>gateway connect uniswap</code> in order to connect your wallet:</p> <pre><code>Which chain do you want uniswap to connect to? (ethereum, polygon) &gt;&gt;&gt;\nWhich network do you want uniswap to connect to? (mainnet, goerli, arbitrum_one) &gt;&gt;&gt;\nEnter your ethereum-mainnet private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful: <pre><code>The uniswap connector now uses wallet [pubKey] on ethereum-mainnet\n</code></pre></p> <p>Liquidity provision: The  <code>uniswapLP</code> connector interfaces with liquidity provision-related functions. Run <code>gateway connect uniswapLP</code> in order to connect your wallet to perform LP functions.</p>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/vvs/","text":"","title":"<code>vvs</code>"},{"location":"exchanges/vvs/#connector-info","text":"<ul> <li>Type: SPOT AMM DEX</li> <li>Folder: /hummingbot/gateway/src/connectors/vvs</li> <li>Configs: /hummingbot/gateway/src/templates/vvs.yml</li> <li>Maintainer: CoinAlpha</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/vvs/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/vvs/#i-exchange-info","text":"<ul> <li>Website: https://vvs.finance/</li> <li>CoinMarketCap: https://coinmarketcap.com/currencies/vvs-finance/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/vvs_finance</li> <li>API docs: https://github.com/vvs-finance/vvs-ui/tree/master/packages/vvs-swap-sdk</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/vvs/#supported-chains-and-networks","text":"<ul> <li><code>cronos</code>: <code>mainnet</code></li> </ul>","title":"\ud83d\udd78\ufe0f Supported Chains and Networks"},{"location":"exchanges/vvs/#connection","text":"<p>Run <code>gateway connect vvs</code> in order to connect your wallet:</p> <pre><code>Which chain do you want vvs to connect to? (cronos) &gt;&gt;&gt;\nWhich network do you want vvs to connect to? (mainnet) &gt;&gt;&gt;\nEnter your cronos-mainnet private key &gt;&gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>The vvs connector now uses wallet [pubKey] on cronos-mainnet\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"exchanges/whitebit/","text":"","title":"<code>whitebit</code>"},{"location":"exchanges/whitebit/#connector-info","text":"<ul> <li>Type: SPOT CLOB CEX</li> <li>Folder: /hummingbot/connector/exchange/whitebit</li> <li>Maintainer:</li> </ul>","title":"\ud83d\udcc1 Connector Info"},{"location":"exchanges/whitebit/#exchange-tier","text":"<p></p> <p>Bronze exchange connectors have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Exchange Tier"},{"location":"exchanges/whitebit/#i-exchange-info","text":"<ul> <li>Website: https://whitebit.com/</li> <li>CoinMarketCap: https://coinmarketcap.com/exchanges/whitebit/</li> <li>CoinGecko: https://www.coingecko.com/en/exchanges/whitebit</li> <li>API docs: https://whitebit-exchange.github.io/api-docs/docs/category/public</li> <li>Fees:  https://whitebit.com/fees</li> </ul>","title":"\u2139\ufe0f Exchange Info"},{"location":"exchanges/whitebit/#connection","text":"<p>Run <code>connect whitebit</code> in order to enter your API keys:</p> <pre><code>Enter your WhiteBit API key &gt;&gt;&gt;\nEnter your WhiteBit secret key &gt;&gt;&gt;\n</code></pre> <p>If connection is successful:</p> <pre><code>You are now connected to WhiteBit.\n</code></pre>","title":"\ud83d\udd11 Connection"},{"location":"gateway/","text":"","title":"Hummingbot Gateway"},{"location":"gateway/#what-is-gateway","text":"<p>Hummingbot Gateway, sometimes called Gateway-V2, is standalone API middleware that helps Hummingbot and other trading clients to connect to decentralized exchanges (DEX) on various blockchain networks. </p> <p>Gateway manages interfacing with DEX connectors and exposes standard REST API endpoints for trading and liquidity-related functionality on these DEXs.</p> <p>Essentially, Gateway is a light web server that enables Hummingbot to send and receive data from different blockchain protocols and provides an easier entry point for external devs to build connectors to other protocols.</p>","title":"What is Gateway?"},{"location":"gateway/#how-to-use-gateway","text":"<p>Following the guides below to install, configure and use Gateway:</p> <ul> <li>Installation: How to install Gateway from source or via Docker</li> <li>Testing with Postman: How to test Gateway API endpoints on a standalone basis using Postman and other tools</li> <li>Using Gateway with Hummingbot : How to send commands to Gateway from Hummingbot</li> <li>Working with Tokens: Adding tokens, approving tokens and getting testnet tokens</li> <li>Running DEX Bots: How to run the <code>amm-arb</code> strategy and scripts that use Gateway DEX connectors</li> <li>Adding Connectors: Developer guide for contributing new DEX connectors into the open source Gateway codebase</li> <li>API Reference: List of the API endpoints that each DEX type exposes</li> </ul>","title":"How to use Gateway"},{"location":"gateway/#supported-dexs","text":"<p>See Exchanges for the DEXs that Gateway currently supports. All DEXs with either the AMM and AMM-RANGE labels are Gateway connectors, along with certain CLOB DEX connectors.</p>","title":"Supported DEXs"},{"location":"gateway/#supported-chains","text":"<p>See Chains for a list of blockchains and their networks that Gateway currently supports.</p>","title":"Supported Chains"},{"location":"gateway/#history","text":"<p>See the following blog posts from CoinAlpha CTO Martin Kou for more information about Gateway's history, background, and intended developer experience:</p> <ul> <li>Hummingbot Gateway V2 Architecture - Part 1</li> <li>Hummingbot Gateway V2 Architecture - Part 2</li> </ul>  <p>Note</p> <p>Gateway-V1 is a deprecated version of Gateway compatible with pre-1.0 Hummingbot releases that is no longer supported.</p>","title":"History"},{"location":"gateway/adding-dex-connectors/","text":"<p>This page shows you how to add a decentralized exchange (DEX) connector to Hummingbot's Gateway module and configure which chains and networks it supports.</p> <p>We'll use the Uniswap and Pangolin connectors as examples to help guide you through the development process. Please note that there might be changes that you have to implement depending on the needs of your DEX.</p>","title":"Building DEX Connectors"},{"location":"gateway/adding-dex-connectors/#requirements","text":"<p>Introducing a connector into the Hummingbot codebase requires a mutual commitment from both the contributing developer as wel the Hummingbot Foundation team to maintain a high standard of code quality and software reliability.</p> <p>We encourage and welcome contributions from the community, subject to the guidelines and expectations outlined below:</p> <ol> <li>Connector folder: A complete set of connector files based on the available examples.</li> <li>Unit tests: Tests that cover at least 80% of the new code. Check coverage using <code>yarn test:cov</code>.</li> <li>Inline code comments: Highly recommended, particularly for any code that is materially different from the templates</li> <li>Documentation: Documentation that contains useful information about the exchange for bot runners</li> </ol> <p>First, install and run Gateway by following the developer setup guide.</p> <p>Afterwards, follow the steps below to develop a Gateway connector:</p>","title":"Requirements"},{"location":"gateway/adding-dex-connectors/#1-create-configuration-template","text":"<p>\ud83d\udcc1 Folder <code>gateway/src/templates</code></p> <p>Create a template in the templates folder and name it <code>&lt;exchange_name&gt;.yml</code>. This file will include the configurations needed for connecting to the exchange.</p> <p>Below are example configurations from Uniswap (Ethereum) and Pangolin (Avalanche). Configurations for other EVM-compatible exchanges should be similar.</p>","title":"1. Create configuration template"},{"location":"gateway/adding-dex-connectors/#uniswap","text":"<pre><code>versions:\n  v2:\n    # allowedSlippage: how much the execution price is allowed to move unfavorably from the trade\n    # execution price. It uses a rational number for precision.\n    allowedSlippage: '2/100'\n    # ttl: how long a trade is valid in seconds. After this time passes uniswap will not\n    # perform the trade, but the gas will still be sent.\n    ttl: 600\n  v3:\n    allowedSlippage: '2/100'\n    ttl: 600\ncontractAddresses:\n  # constant used for each supported network\n  mainnet: \n    uniswapV2RouterAddress: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\n    uniswapV3RouterAddress: '0xE592427A0AEce92De3Edee1F18E0157C05861564'\n    uniswapV3NftManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n  kovan: \n    uniswapV2RouterAddress: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\n    uniswapV3RouterAddress: '0xE592427A0AEce92De3Edee1F18E0157C05861564'\n    uniswapV3NftManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n  ropsten: \n    uniswapV2RouterAddress: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\n    uniswapV3RouterAddress: '0xE592427A0AEce92De3Edee1F18E0157C05861564'\n    uniswapV3NftManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n</code></pre>","title":"Uniswap"},{"location":"gateway/adding-dex-connectors/#pangolin","text":"<pre><code># allowedSlippage: how much the execution price is allowed to move unfavorably from the trade\n# execution price. It uses a rational number for precision.\nallowedSlippage: '1/100'\n# ttl: how long a trade is valid in seconds. After this time passes pangolin will not\n# perform the trade, but the gas will still be sent.\nttl: 300\ncontractAddresses:\n  fuji:\n      routerAddress: '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106'\n  avalanche:\n      routerAddress: '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106'\n</code></pre> <p>This template will then be checked against the schema, in the next step, to generate the configuration under the <code>gateway/conf</code> directory.</p>","title":"Pangolin"},{"location":"gateway/adding-dex-connectors/#2-create-configuration-schema","text":"<p>\ud83d\udcc1 Folder <code>gateway/src/services/schema</code></p> <p>Create a schema in the directory above for the configuration that you set up. This tells Gateway how to validate and type the entries in the configuration template that you created earlier. The schema should be named <code>&lt;exchange_name&gt;-schema.json</code>.</p> <p>Below is an example of the schema file for Pangolin:</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"allowedSlippage\": { \"type\": \"string\" },\n    \"ttl\": { \"type\": \"integer\" },\n    \"contractAddresses\": {\n      \"type\": \"object\",\n      \"patternProperties\": {\n        \"^\\\\w+$\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"routerAddress\": { \"type\": \"string\" }\n          },\n          \"required\": [\"routerAddress\"],\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false,\n  \"required\": [\"allowedSlippage\", \"ttl\", \"contractAddresses\"]\n}\n</code></pre>","title":"2. Create configuration schema"},{"location":"gateway/adding-dex-connectors/#3-create-connector","text":"<p>\ud83d\udcc1 Folder <code>gateway/src/connectors</code></p> <p>Now, you can start creating the connector. Following the steps below:</p> <ul> <li>Create a new directory inside the <code>connectors</code> directory and name it <code>&lt;exchange_name&gt;</code>.</li> <li>Inside this new directory, create the following two files:</li> <li><code>&lt;exchange_name&gt;.config.ts</code>: This file contains the connector configuration.</li> <li><code>&lt;exchange_name&gt;.ts</code>: This file contains functions that interact with the DEX, such as fetching price and pair data, executing trades, and adding/removing liquidity.</li> <li>Add the DEX ABI (interface for the smart contract functions and variables) as a json file in the same folder, i.e. <code>uniswap_v2_router_abi.json</code>.</li> <li>See pangolin.config.ts as an example for the <code>&lt;exchange_name&gt;.config.ts</code> file. Copy it and update the changes made in step 1 depending on the template configuration for your exchange.</li> <li>The <code>&lt;exchange_name&gt;.ts</code> file contains three main functions: <code>estimateSellTrade()</code>, <code>estimateBuyTrade()</code> and <code>executeTrade()</code>. The implementation of these functions depends on the exchange SDK. For EVM-compatible exchanges, the implementation should be similar to pangolin.ts.</li> <li>The other functions in the <code>&lt;exchange_name&gt;.ts</code> should follow the examples available and not require many changes.</li> <li>Keep in mind that this process is heavily dependent on the needs of your exchange and how the exchange SDK, if available, is implemented.</li> </ul>","title":"3. Create connector"},{"location":"gateway/adding-dex-connectors/#4-add-connector-routes","text":"<p>\ud83d\udcc1 File <code>gateway/src/connectors/connectors.routes.ts</code></p> <p>Add your new connector to the list of connectors available in Gateway. The step should be similar to the examples available in the file, and the new entry should look like this:</p> <pre><code>{\n    name: '&lt;exchange_name&gt;',\n    trading_type: Exchange_nameConfig.config.tradingTypes,\n    available_networks:Exchange_nameConfig.config.availableNetworks,\n},\n</code></pre>","title":"4. Add connector routes"},{"location":"gateway/adding-dex-connectors/#5-add-sdk-classes-to-uniswapish-interface","text":"<p>\ud83d\udcc1 File <code>gateway/src/services/common-interfaces.ts</code></p> <p>Under <code>gateway/src/services/common-interfaces.ts</code>, most of the EVM-compatible DEX connectors in the gateway v2 can make use of the Uniswapish interface.</p> <p>To use this interface, you will need to make additions to the <code>Tokenish</code> type, <code>UniswapishTrade</code> type, and  <code>Fractionish</code> type with the relevant classes from your exchange SDK. An example of the changes needed can be found in <code>common-interfaces.ts</code> above.</p>","title":"5. Add SDK classes to Uniswapish interface"},{"location":"gateway/adding-dex-connectors/#6-add-connector-to-spender-list","text":"<p>\ud83d\udcc1 File (Ethereum) <code>`gateway/src/chains/ethereum/ethereum.ts</code></p> <p>Add your exchange to the spender list for the chain where your exchange is located. The changes needed should be similar to those in <code>ethereum.ts</code> if the exchange is on an EVM-compatible chain.</p> <p>Below is an example of the changes required:</p> <pre><code>getSpender(reqSpender: string): string {\n    let spender: string;\n    if (reqSpender === 'uniswap') {\n      spender = UniswapConfig.config.uniswapV2RouterAddress(this._chain);\n    } \n    else if (reqSpender === '&lt;exchange_name&gt;') {\n      spender = Exchange_nameConfig.config.routerAddress(this._chain);\n    }\n\n  else {\n      spender = reqSpender;\n    }\n    return spender;\n  }\n</code></pre>","title":"6. Add connector to spender list"},{"location":"gateway/adding-dex-connectors/#7-add-connector-to-gateway-list","text":"<p>\ud83d\udcc1 File <code>gateway/src/app.ts</code></p> <p>Add your connector to the list of connectors to be accessible via Gateway. The changes needed for this step are simple and should be similar to the example below.</p> <pre><code>interface ConnectorsResponse {\n  uniswap: Array&lt;AvailableNetworks&gt;;\n  pangolin: Array&lt;AvailableNetworks&gt;;\n  traderjoe: Array&lt;AvailableNetworks&gt;;\n  &lt;exchange_name&gt;:Array&lt;AvailableNetworks&gt;; \n}\ngatewayApp.get(\n  '/connectors',\n  asyncHandler(async (_req, res: Response&lt;ConnectorsResponse, {}&gt;) =&gt; {\n    res.status(200).json({\n      uniswap: UniswapConfig.config.availableNetworks,\n      pangolin: PangolinConfig.config.availableNetworks,\n      traderjoe: TraderjoeConfig.config.availableNetworks,\n   &lt;exchange_name&gt;: Exchange_nameConfig.config.availableNetworks,\n    });\n  })\n);\n</code></pre>","title":"7. Add connector to Gateway list"},{"location":"gateway/adding-dex-connectors/#8-add-connector-tests","text":"<p>\ud83d\udcc1 Folder <code>gateway/test/chains</code></p> <p>Under <code>gateway/test/chains/&lt;chain&gt;/&lt;exchange_name&gt;</code></p> <p>Automated test coverage is a crucial step for maintaining high-quality connectors. The Hummingbot Foundation QA team runs these tests when reviewing connectors on an ongoing basis.</p> <p>Follow the Pangolin tests to create tests for the routes and functions of your connector.</p> <p>Before submitting a pull request for your connector, you should have a minimum testing coverage of 80%. You can determine test coverage by running <code>yarn test:cov</code>.</p>","title":"8. Add connector tests"},{"location":"gateway/adding-dex-connectors/#9-perform-manual-testing","text":"<p>Make sure to perform extensive manual testing of your connector to ensure that users can use it when running various Hummingbot strategies.</p> <p>Follow the guides below:</p> <ul> <li>Manual testing under Gateway V2</li> <li>Client testing and Postman: Gateway V2 connector testing guide</li> </ul>","title":"9. Perform manual testing"},{"location":"gateway/adding-dex-connectors/#10-create-connector-documentation-page","text":"<p>\ud83d\udcc1 Folder <code>hummingbot-site: docs/gateway/exchanges</code></p> <p>As a last step, create a Markdown documentation page in the <code>hummingbot-site</code> Github repository that provides descriptive information about the new DEX connector for Hummingbot users.</p> <p>The format should be similar to those of other pages in the same directory, i.e. <code>uniswap.md</code> or <code>pangolin.md</code>.</p> <p>Feel free to add more sections as needed, such as guides or best practices that help users make use of your new connector.</p>","title":"10. Create connector documentation page"},{"location":"gateway/adding-dex-connectors/#11-add-documentation-page-to-index","text":"<p>\ud83d\udcc1 File <code>hummingbot-site: mkdocs.yml</code></p> <p>Finally, modify <code>mkdocs.yml</code> in the root <code>hummingbot-site</code> directory to include the newly created page in the site index.</p> <p>In <code>mkdocs.yml</code>, add an entry for your connector to the following section:</p> <pre><code>- Gateway Connectors:\n      - Gateway Connectors: gateway/index.md\n      - DEXs:\n        - DEXs: gateway/exchanges/index.md\n        - Uniswap: gateway/exchanges/uniswap.md\n        - Pangolin: gateway/exchanges/pangolin.md\n</code></pre>","title":"11. Add documentation page to index"},{"location":"gateway/api-reference/","text":"<p>This work-in-progress document defines the standardized API endpoints that each Gateway decentralized exchange (DEX) connector should implement. </p> <p>Each DEX should implement the NetworkBase interface, as well as its chain/network-specific interface:</p> <ul> <li>NetworkBase: General endpoints for all chains</li> <li>EVM: Endpoints for DEXs on EVM-specific chains (Mainnet, Avalanche, BNB Chain, Polygon, Harmony, etc)</li> </ul> <p>In addition, each DEX should implement the ConnectorBase interface, as well as the interface(s) for its exchange types:</p> <ul> <li>ConnectorBase: Endpoints for all DEXs</li> <li>AMM: Endpoints for AMM connectors needed to enable swapping assets</li> <li>AMM-RANGE: *Additional endpoints for spot AMM connectors that support concentrated liquidity ranges (example: <code>uniswap</code>)</li> <li>PERP AMM: Endpoints for perpetual futures AMMs (example: <code>perp</code>)</li> </ul>  <p>TypeScript interface naming conventions</p> <p>TypeScript interfaces for the requests and responses below should be named according to their corresponding URL endpoints. For example, a request and a response interface for <code>/evm/allowances</code> should be named <code>EVMAllowancesRequest</code> and <code>EVMAllowancesResponse</code>.</p>","title":"API Reference"},{"location":"gateway/api-reference/#network","text":"<p>General endpoints for all chains.</p> <p>GET <code>/network/status</code></p> <ul> <li>Description: Get the current status of a chain/network</li> <li>Request params: <code>{chain?, network?}</code></li> <li>Response: array of <code>{ chain, network, rpcUrl, currentBlockNumber, currentBlockSeconds(seconds since block) }</code> for each chain/network combination</li> </ul> <p>GET <code>/network/chain_config</code></p> <ul> <li>Description: Display the configuration options for a chain</li> <li>Request params: <code>{chain}</code></li> <li>Response: chain config map (example)</li> </ul> <p>GET <code>/network/tokens</code></p> <ul> <li>Description: Get token list for a chain/network</li> <li>Request: <code>{chain, network, tokenSymbols?}</code></li> <li>Response: array of <code>{ chain, network, symbol, address, decimals }</code></li> </ul> <p>GET <code>/network/balances</code></p> <ul> <li>Description: Get balances for an address</li> <li>Request: <code>{chain, network, address, tokenSymbols}</code></li> <li>Response: <code>{ balances }</code></li> </ul> <p>GET <code>/network/poll</code></p> <ul> <li>Description: Fetch the current status for a transaction hash</li> <li>Request: <code>{chain, network, txHash}</code></li> <li>Response: <code>{ currentBlock, txHash, txStatus, txBlock, txData, txReceipt }</code></li> </ul>","title":"Network"},{"location":"gateway/api-reference/#evm","text":"<p>Endpoints interacting with chains that use the Ethereum Virtual Machine.</p> <p>GET <code>/evm/allowances</code></p> <ul> <li>Description: Get allowances for a spender</li> <li>Request: <code>{chain, network, address, spender, tokenSymbols}</code></li> <li>Response: <code>{ spender, approvals }</code></li> </ul> <p>GET <code>/evm/nonce</code></p> <ul> <li>Description: Get nonce for an address</li> <li>Request: <code>{chain, network, address}</code></li> <li>Response: <code>{ nonce }</code></li> </ul> <p>POST <code>/evm/cancel</code></p> <ul> <li>Description: Cancel a transaction</li> <li>Request: <code>{ chain, network, address, nonce? }</code></li> <li>Response: <code>{ txHash }</code></li> </ul> <p>POST <code>/evm/approve</code></p> <ul> <li>Description: Approve a token to be spent by a spender</li> <li>Request: <code>{ chain, network, address, spender, token, amount?, nonce? }</code></li> <li>Response: <code>{ spender, tokenAddress, amount, nonce, txHash }</code></li> </ul>","title":"EVM"},{"location":"gateway/api-reference/#spot-amm","text":"<p>Endpoints for spot AMM connectors needed to enable swapping assets.</p> <p>GET <code>/amm/price</code></p> <ul> <li>Description: Get price for a swap</li> <li>Request: <code>{chain, network, connector, quote, base, amount, side}</code></li> <li>Response: <code>{ base, quote, amount, expectedAmount, price, gasPrice, gasLimit, gasCost }</code></li> </ul> <p>POST <code>/amm/trade</code></p> <ul> <li>Description: Execute a swap</li> <li>Request: <code>{ chain, network, connector, address, quote, base, amount, side, limitPrice?, nonce?, maxFeePerGas?, maxPriorityFeePerGas? }</code></li> <li>Response: <code>{ base, quote, price, gasPrice, gasLimit, gasCost, nonce, txHash }</code></li> </ul>","title":"SPOT AMM"},{"location":"gateway/api-reference/#spot-amm-range","text":"<p>Additional endpoints for AMM-RANGE connectors that support concentrated liquidity ranges</p> <p>POST <code>/amm/liquidity/add</code></p> <ul> <li>Description: add liquidity to a pool</li> <li>Request: <code>{ chain, network, connector, address, token0, token1, amount0, amount1, lowerPrice, upperPrice, nonce?, maxFeePerGas?, maxPriorityFeePerGas? }</code></li> <li>Response: <code>{ token0, token1, liquidity, nonce, txHash }</code></li> </ul> <p>POST <code>/amm/liquidity/remove</code></p> <ul> <li>Description: Remove liquidity from a pool</li> <li>Request: <code>{ chain, network, connector, address, tokenId, nonce?, maxFeePerGas?, maxPriorityFeePerGas? }</code></li> <li>Response: <code>{ nonce, txHash }</code></li> </ul> <p>POST <code>/amm/liquidity/collect_fees</code></p> <ul> <li>Description: Remove liquidity from a pool</li> <li>Request: <code>{ chain, network, connector, address, tokenId, nonce?, maxFeePerGas?, maxPriorityFeePerGas? }</code></li> <li>Response: <code>{ nonce, txHash }</code></li> </ul> <p>POST <code>/amm/liquidity/price</code></p> <ul> <li>Description: Returns the current pool price</li> <li>Request: <code>{ chain, network, connector, address, token0, token1, liquidity, fee, period, interval }</code></li> <li>Response: <code>{ token0, token1, fee, period, interval }</code></li> </ul> <p>POST <code>/amm/liquidity/position</code></p> <ul> <li>Description: Returns the current pool price</li> <li>Request: <code>{ chain, network, connector, tokenId }</code></li> <li>Response: <code>{ tokenId, token0, token1, fee, lowerPrice, upperPrice, amount0, amount1, unclaimedToken0, unclaimedToken1 }</code></li> </ul>","title":"SPOT AMM-RANGE"},{"location":"gateway/api-reference/#perp-amm","text":"<p>Endpoints for perpetual futures AMM DEXs.</p> <p>GET <code>/perp/position</code></p> <ul> <li>Description: Get info on a position</li> <li>Request: <code>{chain, network, connector, wallet_address, quote, base}</code></li> <li>Response: <code>{ position }</code></li> </ul> <p>POST <code>/perp/open</code></p> <ul> <li>Description: Open a position</li> <li>Request: <code>{ chain, network, connector, address, quote, base, amount, side, margin, leverage, limitPrice?, nonce?, maxFeePerGas?, maxPriorityFeePerGas? }</code></li> <li>Response: <code>{ position, price, gasPrice, gasLimit, gasCost, nonce, txHash }</code></li> </ul> <p>POST <code>/perp/close</code></p> <ul> <li>Description: Close a position</li> <li>Request: <code>{ chain, network, connector, address, quote, base, limitPrice?, nonce?, maxFeePerGas?, maxPriorityFeePerGas? }</code></li> <li>Response: <code>{ gasPrice, gasLimit, gasCost, nonce, txHash }</code></li> </ul> <p>GET <code>/perp/market-prices</code></p> <p>GET <code>/perp/market-status</code></p> <p>GET <code>/perp/pairs</code></p> <p>GET <code>/perp/balance</code></p> <p>POST <code>/perp/estimateGas</code></p>","title":"PERP AMM"},{"location":"gateway/installation/","text":"<p>The official Github repository for Gateway is https://github.com/hummingbot/gateway. Gateway is released monthly  with the same cadence as the Hummingbot client, and it follows the same conventions for releases, contributions, etc.</p>","title":"Installation"},{"location":"gateway/installation/#prerequisites","text":"<p>These instructions assumes that you have already installed Hummingbot on the machine where you are installing Gateway, either from source or via Docker. See Installation for more information.</p>","title":"Prerequisites"},{"location":"gateway/installation/#generate-certs","text":"<p>The first step is to generate self-signed certificates from the Hummingbot client. These certificates let your bots securely communicate with Gateway.</p> <p>Start Hummingbot. After entering your password, run <code>gateway generate-certs</code>:</p> <p></p> <p>Enter a secure passphrase, and then Hummingbot will generate self-signed certificates that a server can use to authenticate its connection with this client.</p> <p>Take note of the path where they are stored. This is also stored as <code>certs_path</code> in the Hummingbot's <code>conf_client.yml</code>, the global configuration file in the <code>/conf/</code> directory.</p> <p></p>  <p>Tip</p> <p>Make sure to save both passphrase and certs_path since you\u2019ll need them later.</p>","title":"Generate certs"},{"location":"gateway/installation/#install-gateway","text":"<p>Select only one of the methods below, since multiple Gateways on the same machine may result in conflicts.</p>","title":"Install Gateway"},{"location":"gateway/installation/#from-source","text":"<p>Install the following dependencies:</p> <ul> <li>NodeJS (use 16.0.0 or higher)</li> <li>Yarn: run <code>npm install -g yarn</code> after installing NodeJS</li> </ul> <p>Then, follow the instructions below:</p> <pre><code># Clone repo and enter the created directory\n$ git clone https://github.com/hummingbot/gateway.git\n$ cd gateway\n\n# Install dependencies\n$ yarn\n\n# Complile Typescript into Javascript\n$ yarn build\n\n# Run Gateway setup script, which helps you set configs and certificates\n$ chmod a+x gateway-setup.sh\n$ ./gateway-setup.sh\n</code></pre> <p>The <code>gateway-setup</code> script configures Gateway by:</p> <ul> <li>Copying the default configuration files from <code>/src/templates</code> to <code>/conf/</code> folder</li> <li>Copying the Hummingbot self-signed certificates into the <code>/certs/</code> folder. Enter certs_path when prompted.</li> </ul>  <p>Alternative to copying certs files</p> <p>The <code>gateway-setup.sh</code> script creates a copy of the Hummingbot certificates in the Gateway folder. Alternatively, you can override the certs_path parameter in <code>conf/server.yml</code> and enter the path to the Hummingbot certificates.</p>  <p>Afterwards, start Gateway using passphrase:</p> <pre><code>$ yarn start --passphrase=&lt;passphrase&gt;\n</code></pre>","title":"From source"},{"location":"gateway/installation/#using-docker","text":"<p>See the Deploy Examples repo for example for deploying various configurations of Hummingbot and Gateway using Docker. The <code>/bash_scripts</code> folder and the README file in that repo contains scripts that help you install the Docker version of Gateway.</p> <p>Note that you will be prompted to enter passphrase and certs_path during the installation process.</p>","title":"Using Docker"},{"location":"gateway/installation/#running-gateway","text":"<p>After a successful installation using via either method, you should see Gateway running on the default port 15888:</p> <pre><code>2023-02-09 12:56:50 | info |    \u26a1\ufe0f Starting Gateway API on port 15888...\n2023-02-09 12:56:50 | info |    The gateway server is secured behind HTTPS.\n2023-02-09 12:56:50 | info |    \u26a1\ufe0f Swagger listening on port 8080. Read the Gateway API documentation at 127.0.0.1:8080\n</code></pre> <p>Go back to your Hummingbot client or restart it if you have exited. In the upper right corner, you should see GATEWAY: ONLINE if your Hummingbot client is connected to Gateway.</p> <p></p> <p>After Gateway is running, see Testing to understand how to test the endpoints on a standalone basis before using it with Hummingbot.</p>","title":"Running Gateway"},{"location":"gateway/running-dex-bots/","text":"<p>Now that you have properly installed, tested, and configured Gateway, it's time to run a bot that calls the Gateway DEX endpoints.</p> <p>You can either run the AMM-Arbitrage Strategy, or the sample Scripts that utilize Gateway if you want more fine-grained control.</p>  <p>Approval needed!</p> <p>Currently, if any tokens do not have sufficient allowance, both strategies and scripts will not start and the logs will show messages like <code>[connector] is not ready. Please wait...</code> continually. See Approving tokens for information on how to approve tokens.</p>","title":"Running DEX Bots"},{"location":"gateway/running-dex-bots/#amm-arbitrage-strategy","text":"<p>A good way to safely test Gateway is to run the AMM-Arbitrage strategy between a testnet DEX connector and a CEX connector in paper trading mode.</p> <p>The guide below shows you how to run this strategy using the <code>uniswap-ethereum-goerli</code> connector versus the <code>binance-paper-trade</code> connector.</p>","title":"AMM-Arbitrage Strategy"},{"location":"gateway/running-dex-bots/#setup","text":"<ol> <li> <p>Connect a wallet to Uniswap Goerli with <code>gateway connect uniswap</code>. Afterwards, you should be able to see <code>uniswap_ethereum_goerli</code> when you run <code>balance.</code></p> </li> <li> <p>Convert some test ETH into WETH and DAI on Uniswap.</p> </li> <li> <p>Approve both WETH and DAI - see Working with Tokens for more details.</p> </li> <li> <p>Make sure that your wallet still have a balance of at least 0.2 test ETH for gas costs.</p> </li> <li> <p>Check your paper trading balances with <code>balance paper</code> and add balances for ETH and USDT if needed.</p> </li> </ol>","title":"Setup"},{"location":"gateway/running-dex-bots/#create-strategy","text":"<p>Use <code>create</code> command to set up an <code>amm_arb</code> strategy. Answer the question prompts presented so that you to generate the following configuration:</p> <pre><code>template_version: 5\nstrategy: amm_arb\nconnector_1: uniswap_ethereum_goerli\nmarket_1: WETH-DAI\nconnector_2: binance_paper_trade\nmarket_2: ETH-USDT\nmin_profitability: 1.0\nmarket_1_slippage_buffer: 1.0\nmarket_2_slippage_buffer: 0.0\nconcurrent_orders_submission: false\ndebug_price_shim: false\ngateway_transaction_cancel_interval: 600\n</code></pre> <p>Alternatively, you can copy the section above into a <code>*.yml</code> file and use the <code>import</code> command to import it as a strategy.</p>","title":"Create strategy"},{"location":"gateway/running-dex-bots/#run-strategy","text":"<p>Use the <code>start</code> command, and then answer <code>Yes</code> when asked to confirm the strategy settings.</p> <p>After starting the <code>amm_arb</code> strategy, you\u2019ll see the apparent prices on the AMM market will track the prices on the CEX exchange, and if there is none, the strategy will report no arbitrage opportunities. </p> <p>When it detects an arbitrage opportunity where the total cost to execute the transactions (including gas and fees) still results in a profit higher than (<code>min_profitability</code>), then the bot will automatically execute the two transactions.</p> <p>If <code>concurrent_orders_submission</code> is false, then the bot will try to execute and confirm the transaction on <code>connector_1</code> before executing the transaction on <code>connector_2</code>.</p>","title":"Run strategy"},{"location":"gateway/running-dex-bots/#triggering-arbitrage-with-debug_price_shim","text":"<p>On testnets like Goerli, prices are typically out of line with CEXs, so getting transactions executed is trivial. However, when testing on mainnets, triggering an arbitrage transaction may be trickier.</p> <p>One option is to set the <code>min_profitability</code> to be negative, but that may result in losses when testing on mainnet. Therefore, we have added a <code>debug_price_shim</code> feature that lets you modify the apparent prices on the AMM market in the Debug Console and trigger mock arbitrage transactions.</p> <p>To use this feature, set <code>debug_price_shim</code> to True in your <code>amm-arb</code> configuration, either by modifying the config file or running the <code>config</code> command:</p> <pre><code>&gt;&gt;&gt; config debug_price_shim True\n</code></pre> <p>Let\u2019s say you want to raise the WETH prices on the AMM connector by 40 USDT, in order to trigger a sell on the AMM connector and a buy on the CEX connector. </p> <p>The code snippet below will cause <code>amm_arb</code> to send sell transactions to Uniswap Goerli and simulated buys on Binance paper trade market. The price delta will persist in the AMM market for 1 minute. Afterwards, it\u2019ll return back to tracking the CEX paper trade market.</p> <pre><code>from hummingbot.connector.gateway_price_shim import GatewayPriceShim\nfrom decimal import Decimal\nGatewayPriceShim.get_instance().apply_price_delta(\"uniswap\", \"ethereum\", \"goerli\", \"WETH-DAI\", Decimal(40))\n</code></pre> <p>Conversely, if you want to trigger buys on the AMM side and sells on the CEX paper trade side, you can give negative delta prices to make WETH-DAI on the AMM side cheaper.</p> <pre><code>GatewayPriceShim.get_instance().apply_price_delta(\"uniswap\", \"ethereum\", \"goerli\", \"WETH-DAI\", Decimal(-40))\n</code></pre> <p>Again, the negative delta price will persist on the AMM market for 1 minute.</p> <p>If the price delta isn\u2019t enough to trigger an arb opportunity due to high gas fees, feel free to use large delta values, e.g. <code>Decimal(200)</code> or even <code>Decimal(500)</code>. While the price deltas needed seem unrealistically large - this is reflective of real trading constraints because a small order size would need a large price delta to cover the gas fees.</p>","title":"Triggering arbitrage with <code>debug_price_shim</code>"},{"location":"gateway/running-dex-bots/#sample-gateway-scripts","text":"<p>You can also run the following sample Gateway scripts in the <code>/scripts/</code> folder of the Hummingbot repo:</p> <ul> <li> <p><code>amm_price_example.py</code>: Fetches and prints the price from an AMM connector</p> </li> <li> <p><code>amm_trade_example.py</code>: Fetches the price from an AMM connector and executes a trade using that price</p> </li> </ul>","title":"Sample Gateway scripts"},{"location":"gateway/setup/","text":"<p>After you have installed Gateway, you should be ready to interact with it. This page shows you various commands that help you configure Gateway from inside the Hummingbot client.</p>","title":"Using Gateway with Hummingbot"},{"location":"gateway/setup/#checking-gateway-status","text":"<p>Once you see <code>GATEWAY: ONLINE</code> in the top status bar in the Hummingbot client, your Gateway is ready to use with Hummingbot.</p> <p></p> <p>You can also run the <code>gateway status</code> command, which prints a list of the connected chains/networks and their current block number.</p> <pre><code>&gt;&gt;&gt; gateway status\n\n    network     chainID     rpcURL                          currentBlockNumber  nativeCurrency\n    mainnet     1           https://rpc.ankr.com/eth        16699791            ETH\n    goerli      5           https://rpc.ankr.com/eth_goerli 8549282             ETH\n</code></pre>","title":"Checking Gateway status"},{"location":"gateway/setup/#listing-gateway-commands","text":"<p>Run the command <code>gateway -h</code> to print out the different commands you can use with gateway.</p> <pre><code>&gt;&gt;&gt; gateway -h\n\nusage: gateway [-h] {create,config,connect,connector-tokens,generate-certs,start,status,stop,test-connection} ...\n\npositional arguments: {create,config,connect,connector-tokens,generate-certs,start,status,stop,test-connection}\nconfig              View or update gateway configuration\nconnect             Create/view connection info on gateway connector\nconnector-tokens    Report token balances for gateway connectors\ngenerate-certs      Create ssl certificate for gateway\ntest-connection     Ping gateway api server\n\noptional arguments:\n-h, --help          show this help message and exit\n</code></pre>","title":"Listing Gateway commands"},{"location":"gateway/setup/#getting-help","text":"<p>To get help before running a command, run <code>gateway [command] -h</code>.</p> <pre><code>&gt;&gt;&gt; gateway config -h\nusage: gateway config [-h] [key] [value]\n\npositional arguments:\n    key     Name of the parameter you want to change\n    value   New value for the parameter\n\noptional arguments:\n    -h, --help show this help message and exit\n</code></pre>","title":"Getting help"},{"location":"gateway/setup/#listing-dex-connectors","text":"<p>Running the <code>gateway list</code> command will list all available Gateway DEX connectors, the blockchains where they are supported, and their Connector Tier, which determines the level of maintenance effort allocated to the connector.</p> <pre><code>&gt;&gt;&gt; gateway list\n    +----------+------------------------+---------+\n    | Exchange | Chains                 | Tier    |\n    |----------|------------------------|---------|\n    | uniswap  | ethereum, polygon      | GOLD    |\n</code></pre>","title":"Listing DEX connectors"},{"location":"gateway/setup/#connecting-to-a-dex","text":"<p>Use <code>gateway connect [exchange]</code> to add connections to DEXs. See Exchanges for all available connectors.</p> <p>You will then be asked about which instance of Uniswap you want to connect. You'll be asked to specify <code>chain</code> (a Layer 1 blockchain architecture like <code>ethereum</code> or <code>polygon</code>), <code>network</code> (mainnet or testnet networks available for the chain like <code>mainnet</code>, <code>arbitrum_one</code>, <code>optimism</code>), and the private key of your wallet. </p> <pre><code>&gt;&gt;&gt; gateway connect uniswap\n\nWhich chain do you want uniswap to connect to? (ethereum, polygon)\n&gt;&gt;&gt; ethereum\n\nWhich network do you want uniswap to connect to? (mainnet, goerli, arbitrum_one, optimism)?\n&gt;&gt;&gt; mainnet\n\nDo you want to continue to use node url 'https://rpc.ankr.com/eth' for ethereum-mainnet? (Yes/No)\n&gt;&gt;&gt; Yes\n\nEnter your ethereum-mainnet wallet private key\n&gt;&gt;&gt; *****************************************\n\nThe uniswap connector now uses wallet [public address] on ethereum-mainnet.\n</code></pre>","title":"Connecting to a DEX"},{"location":"gateway/setup/#fetching-wallet-balances","text":"<p>Once your wallet has been connected to a Gateway DEX, you can the test the connection by running the <code>balance</code> command. </p> <p>You should see your wallet balance on the native blockchain asset (i.e. ETH for Uniswap/Ethereum, BNB for PancakeSwap/BSC) for each connection.</p> <pre><code>&gt;&gt;&gt; balance\n\nuniswap_ethereum_mainnet:\n    Asset   Total   Total($)    Allocated\n    ETH     0.0000         0\n\nuniswap_ethereum_goerli:\n    Asset   Total   Total($)    Allocated\n    ETH     0.0000         0\n</code></pre>","title":"Fetching wallet balances"},{"location":"gateway/setup/#adding-new-symbols-to-balance","text":"<p>Use the <code>gateway connector-tokens</code> command to display additional tokens in the <code>balance</code> command.</p> <pre><code>&gt;&gt;&gt; gateway connector-tokens uniswap_ethereum_mainnet WETH,DAI\n\nThe 'balance' command will now report token balances WETH,DAI for 'uniswap_ethereum_mainnet'.\n\n&gt;&gt;&gt; balance\n\nuniswap_ethereum_mainnet:\n    Asset   Total   Total($)    Allocated\n    ETH     0.0000         0\n    WETH    0.0000         0\n    DAI     0.0000         0\n</code></pre>","title":"Adding new symbols to <code>balance</code>"},{"location":"gateway/setup/#updating-config-parameters","text":"<p>Gateway supports a robust configuration management system for each supported chain, network and exchange. You can see all the current configuration by running <code>gateway config</code></p> <pre><code>&gt;&gt;&gt; gateway config\n\nGateway Configurations (localhost:15888):\nserver:\n    certificatePath: ./certs/\n    logPath: ./logs\n    ...\n</code></pre> <p>You can filter and see a specific configuration parameter with <code>gateway config &lt;param&gt;</code>:</p> <pre><code>&gt;&gt;&gt; gateway config ethereum.gasLimitTransaction\n\nGateway Configurations (localhost:15888):\nethereum:\n    gasLimitTransaction: 3000000\n</code></pre> <p>To change it, simply add an updated value after it: <code>gateway config &lt;param&gt; &lt;new-value&gt;</code>:</p> <pre><code>&gt;&gt;&gt; gateway config ethereum.gasLimitTransaction 1000000\n\nThe config has been updated.\n</code></pre> <p>Gateway will automatically restart to incorporate the new settings.</p> <p>Alternatively, you may find it easier to edit the configuration files for each chain and connector directly. These are located in the <code>/conf</code> directory in your Gateway files. Make sure to stop and start the Gateway server after each change.</p>","title":"Updating config parameters"},{"location":"gateway/setup/#configuring-node-providers","text":"<p>The node provider that you use to communicate with a blockchain network is critically important. The speed/latency of your node connection and its ability to read/write to the network may fluctuate greatly, especially in congested, volatile markets. </p> <p>Whether you use a cloud node service like Alchemy or run your own node client, you will connect to the node via the RPC URL, defined for each chain/network combination. This is set by the <code>nodeURL</code> configuration parameter for each chain/network, defined in the configuration file for each chain.</p> <p>To help new users use Gateway, Hummingbot assumes a default <code>nodeURL</code> for each supported chain/network and automatically connects to it when users connect to a DEX. </p> <p>Currently, the default <code>nodeURL</code> for each chain/network uses Ankr RPC endpoints where available, since they do not require users to sign up for an account.</p> <p>For certain testnet or other networks that Ankr doesn't support, the default <code>nodeURL</code> may be an alternate public endpoint, or in certain cases, an Infura endpoint, which users need to configure with their Infura key to use.</p> <p>Here are the current default <code>nodeURL</code> settings for Ethereum mainnet and testnet networks, which are defined in the default config file:</p> <pre><code>mainnet:\n    nodeURL: https://rpc.ankr.com/eth\ngoerli:\n    nodeURL: https://rpc.ankr.com/eth_goerli\n</code></pre> <p>Here's how to change this setting from inside the Hummingbot client:</p> <pre><code>&gt;&gt;&gt; gateway config ethereum.networks.mainnet.nodeURL\n\nGateway Configurations (localhost:15888):\nethereum:\n    mainnet:\n        nodeURL: https://rpc.ankr.com/eth\n\n&gt;&gt;&gt; gateway config ethereum.networks.mainnet.nodeURL https://eth-mainnet.g.alchemy.com/v2/ALCHEMY-KEY\n\nThe config has been updated.\n</code></pre>","title":"Configuring node providers"},{"location":"gateway/setup/#working-with-tokens","text":"<p>Since token symbols are not unique and may have duplicates on each network, it's very important to understand how symbols map to addresses for each chain/network. Also, you may also need to approve tokens before you can trade them.</p> <p>See Working with Tokens for more details.</p>","title":"Working with tokens"},{"location":"gateway/testing/","text":"<p>After the Gateway server is running, we recommend testing out the endpoints using the supplied Postman collection and environment. </p> <p>In addition, you can also run unit tests and manual test scripts if you have installed Gateway from source.</p> <p>These methods allows you to test out the endpoints and understand how Gateway works, before interacting with it through the Hummingbot client. This is an important step because you will likely need to configure your node provider, gas settings, wallet, and other dependencies in order to run DEX trading bots successfully, and understanding Gateway's behavior on a standalone basis helps tremendously.</p>","title":"Testing Gateway"},{"location":"gateway/testing/#testing-with-postman","text":"<p>Postman is an app that helps you interact with API endpoints. </p> <p>The official Hummingbot Postman workspace is: https://www.postman.com/hummingbot. Here, you can download collections and environments for use with Hummingbot.</p> <p>Postman is the easiest way to test Gateway on a standalone basis. In the future, we should encourage community maintainers to upload DEX and chain-specific collections to the Hummingbot workspace.</p>","title":"Testing with Postman"},{"location":"gateway/testing/#adding-certificates","text":"<p>Download and install the desktop version of Postman on your machine. You first have to establish a secure connection with your Gateway instance using certificates in the settings section, so the web version won\u2019t work.</p> <p>First, go to Settings &gt;&gt; Certificates in Postman:</p> <p></p> <p>In this view, eable the CA Certificates toggle, Then go to the certs_path folder location from Installation - Generating Certs. Add the <code>ca_cert.pem</code> from this folder to PEM file in Postman.</p> <p></p> <p>In the Client Certificates section, set the following:</p> <ul> <li>Host: localhost:15888 (or the port where you are running Gateway)</li> <li>CRT file: path to the <code>client_cert.pem</code> file in your certs_path</li> <li>KEY file: path to the <code>client_key.pem</code> file in your certs_path</li> <li>Passphrase: the passphrase you defined from Installation - Generating Certs</li> </ul>","title":"Adding certificates"},{"location":"gateway/testing/#importing-collectionenvironment","text":"<p>You can also find Postman collections and environments from the /postman folder in the Gateway repo.</p> <p>Import the GatewayAPI collection and the acccompanying Gateway environment into your Postman app in order to test the Gateway endpoints.</p>","title":"Importing collection/environment"},{"location":"gateway/testing/#running-tests","text":"<p>After you have imported the collection and environment, test the various endpoints and change the request parameters to understand the their behavior. This will help you understand the speed/latency of each endpoint and configure important setting, especially your node provider, to match your trading style.</p> <p>By convention, the POST requests have sample request payloads in the Body field, which allows you to run the same</p> <p></p>","title":"Running tests"},{"location":"gateway/testing/#testing-with-curl-scripts","text":"<p>If you have installed Gateway from source, you can also run the <code>curl</code> test scripts, defined in the /test-helpers/curl/curl.sh file. </p>","title":"Testing with <code>curl</code> scripts"},{"location":"gateway/testing/#setup","text":"<p>To run the scripts, ensure that you have curl and envsubst installed in your system first.</p> <p>On Linux and Windows/WSL systems, you can install these with <code>sudo apt install curl</code> and <code>sudo apt install envsubst</code> On MacOS, you can run <code>brew install curl</code> and <code>brew install envsubst</code> if you have Homebrew.</p> <p>Next, go into the /test-helpers/curl/ directory in your machine, since the curl commands reference request payload JSON files stored in the /test-helpers/curl/requests/ folder.</p> <p>Finally, define the <code>GATEWAY_CERT</code> and <code>GATEWAY_KEY</code> environment variables. These are the paths to <code>client_cert.pem</code> and <code>client_key.pem</code> in your certs_path, respectively. </p> <p>Here's an example: <pre><code>$ export GATEWAY_CERT=\"/Users/feng/hummingbot/certs/client_cert.pem\"\n$ export GATEWAY_KEY=\"/Users/feng/hummingbot/certs/client_cert.key\"\n$ export ETH_ADDRESS='&lt;publicAddress&gt;\n</code></pre></p>","title":"Setup"},{"location":"gateway/testing/#running-tests_1","text":"<p>Now, you an copy and paste individual commands into Bash/Terminal to execute the tests accordingly.</p>  <p>Tip</p> <p>When using curl any of the tests that can be run using <code>uniswap</code> can be run on <code>sushiswap</code> connector or any future compatible connector that is similar to Uniswap by simply replacing the connector value in the JSON file.</p>  <p>Here are a few examples:</p>","title":"Running tests"},{"location":"gateway/testing/#get","text":"<pre><code>$ curl -s -X GET -k --key $GATEWAY_KEY --cert $GATEWAY_CERT https://localhost:15888/ | jq\n\n{\n  \"status\": \"ok\"\n}\n</code></pre>","title":"GET /"},{"location":"gateway/testing/#get-connectors","text":"<pre><code>$ curl -s -X GET -k --key $GATEWAY_KEY --cert $GATEWAY_CERT https://localhost:15888/connectors | jq\n\n{\n    \"connectors\": [\n            ......,\n        {\n            \"name\": \"sushiswap\",\n            \"trading_type\": [\n                \"EVM_AMM\"\n            ],\n            \"available_networks\": [\n                {\n                    \"chain\": \"ethereum\",\n                    \"networks\": [\n                        \"mainnet\",\n                        \"kovan\",\n                        \"ropsten\"\n                    ]\n                }\n            ]\n        }\n    ]\n}\n</code></pre>","title":"GET /connectors"},{"location":"gateway/testing/#unit-tests","text":"<p>To maintain a high quality bar, connector developers must add unit tests when contributing connectors.</p> <p>If you have installed Gateway from source, you can run these unit tests locally from the root directory:</p> <pre><code># run all unit tests\n$ yarn test:unit \n\n# run all unit tests for a single connector\n$ yarn jest test/connector/uniswap\n\n# run all unit tests for a single chain\n$ yarn jest test/chain/ethereum\n\n# run a single unit test\n$ yarn jest test/chains/ethereum/ethereum.controller.test.ts\n</code></pre>  <p>Writing unit tests</p> <p>If you are looking to add a connector to Gateway, read this document for more details about how to write unit tests:\u00a0Writing unit tests for gateway.</p>","title":"Unit tests"},{"location":"gateway/tokens/","text":"","title":"Working with Tokens"},{"location":"gateway/tokens/#what-are-token-lists","text":"<p>When trading on DEXs, you should understand how symbols map to addresses for each chain/network. Token symbols are not unique and may have duplicates or scammy clones on each network, so it's very important to be aware of which token address you are actually trading.</p> <p>Hummingbot uses the Token Lists standard to define a token dictionary for each network. For example, here are the DAI and HBOT entries from the default Token List for Ethereum Mainnet:</p> <pre><code>{\n    \"chainId\": 1,\n    \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n    \"name\": \"Dai\",\n    \"symbol\": \"DAI\",\n    \"decimals\": 18,\n    \"logoURI\": \"https://assets.coingecko.com/coins/images/9956/thumb/4943.png?1636636734\"\n},\n{\n    \"chainId\": 1,\n    \"address\": \"0xe5097d9baeafb89f9bcb78c9290d545db5f9e9cb\",\n    \"name\": \"Hummingbot\",\n    \"symbol\": \"HBOT\",\n    \"decimals\": 18,\n    \"logoURI\": \"https://assets.coingecko.com/coins/images/21717/thumb/PDPuf0tJ_400x400.jpg?1639863782\"\n},\n</code></pre> <p>When you reference the symbols DAI and HBOT in a strategy, transactions on the <code>ethereum_mainnet</code> chain/network will use its Token List to  identify the corresponding address.</p>","title":"What are Token Lists?"},{"location":"gateway/tokens/#default-lists","text":"<p>In Gateway, each blockchain's config file defines a <code>tokenListType</code> (<code>FILE</code> or <code>URL</code>) and <code>tokenListSource</code> (path to the designated file or URL) for each network.</p> <p>Starting with the v1.11.0 release the <code>tokenlistType</code> by default is <code>FILE</code>, and there is a JSON file that contains the dictionary for each network - see ethereum.yml as an example.</p> <p>This reduces latency compared to accessing the Token List via URL, but users are free to change this setting by configuring the <code>tokenListType</code> and <code>tokenListSource</code> parameters for each network - see Updating config parameters</p>","title":"Default lists"},{"location":"gateway/tokens/#adding-tokens-to-a-list","text":"<p>Go to Token Lists and look for a list that contains the tokens you wish to trade. You can download the list change <code>tokenListType</code> and <code>tokenListSource</code> to refer to it, or copy the token entries that you need into the default Token List.</p>","title":"Adding tokens to a list"},{"location":"gateway/tokens/#approving-tokens","text":"<p>On Ethereum and EVM-compatible chains, wallets need to approve other addresses (such as DEXs) before transferring tokens to them. You can inspect the allowance for a spender address to see how much of a specific token you can tranfer to it.</p> <p>When you <code>start</code> a strategy or script, Gateway automatically checks whether both base and quote tokens are approved for the DEX that you are using. If they are not approved or if allowance is insufficient, you will see an log message like \"Waiting for allowances..\" and the strategy will not start.</p> <p>Here is how you can approve tokens:</p>","title":"Approving tokens"},{"location":"gateway/tokens/#use-approve-token-command","text":"<p>Hummingbot has a command that allows you to approve tokens for spending on Gateway one token at a time. </p> <p>Here is an example of the approve-tokens command: <pre><code>&gt;&gt;&gt; gateway approve-tokens uniswap_ethereum_goerli WETH\n</code></pre></p> <p></p>","title":"Use <code>approve-token</code> command"},{"location":"gateway/tokens/#use-evmapprove-in-postman","text":"<p>Alternatively, you can call the <code>/evm/approve</code> endpoint directly from Postman. Afterwards, you can paste the <code>hash</code> value in the response in the <code>txHash</code> parameter in <code>network/poll</code> endpoint to check when the transaction is confirmed.</p> <p></p> <p>After it's confirmed, you can use the <code>/evm/allowances</code> endpoint to check whether the approval was successful:</p> <p></p>","title":"Use <code>/evm/approve</code> in Postman"},{"location":"gateway/tokens/#testnet-faucets","text":"<p>An testnet faucet is a tool that allows developers and users to obtain testnet ETH or other test assets for free. Testnet ETH is a cryptocurrency that is used exclusively for testing purposes on the Ethereum network and has no real-world value.</p> <p>Using an Ethereum testnet faucet is a simple process that involves the following steps:</p> <ol> <li> <p>Visit a faucet website for your chain. For example, see Ethereum for a list of testnet faucets.</p> </li> <li> <p>Enter your testnet wallet address where indicaated.</p> </li> <li> <p>Complete any additional verification steps: Depending on the testnet faucet you are using, you may be required to complete additional verification steps, such as solving a captcha or proving that you are not a robot.</p> </li> <li> <p>Receive your testnet ETH: After you have completed the verification steps, the testnet ETH will be sent to your Ethereum testnet address. You can then use this ETH to experiment with the Ethereum testnet network.</p> </li> </ol>","title":"Testnet faucets"},{"location":"gateway/tokens/#wrapped-tokens","text":"<p>DEXs like Uniswap and TraderJoe automatically wrap native tokens that are not ERC-20, so that users can trade native tokens such as <code>ETH</code> and <code>AVAX</code> through the interface. Behind the scenes, these exchanges automatically wrap these tokens into ERC-20 compliant <code>WETH</code> and <code>WAVAX</code> tokens.</p> <p>Gateway does not auto-wrap tokens by default,</p> <p>so users need to wrap native tokens into ERC-20 tokens before using them with Gateway. As of the <code>v1.4.0</code> release, there is no error message that lets you know if the token can't be used when it's not wrapped and instead will just display <code>\"Markets are not ready\"</code> but we are working on adding more informative messages within the next few releases.</p>","title":"Wrapped tokens"},{"location":"global-configs/","text":"<p>Advanced features allow you to further control and customize Hummingbot:</p> <ul> <li>Auto-start Bot from Command Line</li> <li>Balance Limit</li> <li>Clock Tick Size</li> <li>Color Settings</li> <li>Connect External Database</li> <li>Kill Switch</li> <li>Override Exchange Fees</li> <li>Paper Trading</li> <li>Rate Limits Share Pct</li> <li>Rate Oracle</li> <li>Telegram Integration</li> </ul>","title":"Advanced Features"},{"location":"global-configs/balance-limit/","text":"<p>Updated on version 0.35.0</p> <p>Sets the amount limit on how much assets Hummingbot can use in an exchange or wallet. This can be useful when running multiple bots on different trading pairs with same tokens e.g. running a BTC-USDT pair and another bot on ETH-USDT using the same account.</p>","title":"Balance Limit"},{"location":"global-configs/balance-limit/#how-it-works","text":"<p>You can set how much of a particular token the bot can use by running the command <code>balance limit [exchange] [asset] [amount]</code>. You can disable this feature by editing it in the global config file and set it to -1. While setting it to 0 will initially not place any order for a specific asset until a trade is executed to accumulate the said asset.</p> <p>For example:</p> <pre><code>&gt;&gt;&gt;  balance limit binance USDT 100\nLimit for USDT on binance exchange set to 100.0\n</code></pre> <p>Run the <code>balance</code> command again or <code>balance limit</code> to confirm the limit has been applied.</p> <pre><code>&gt;&gt;&gt;  balance\nUpdating balances, please wait...\n\nbinance:\n     Asset    Amount     Limit\n       BNB    0.0000         -\n       BTC    0.0000         -\n       ETH    0.0000         -\n     TFUEL    0.0187         -\n     THETA    0.5880         -\n      USDC    0.0090         -\n      USDT  158.8197  100.0000\n       XRP    0.8440         -\n       XZC    0.0076         -\n</code></pre> <pre><code>&gt;&gt;&gt;  balance limit\nBalance Limits per exchange...\n\nbinance\n    Asset     Limit\n     USDT  100.0000\n</code></pre>","title":"How It Works"},{"location":"global-configs/balance-limit/#example-scenario","text":"<p>Create pure market making strategy, run <code>config</code> to view the whole configuration.</p> <p></p> <p>Run <code>balance limit binance ETH 0.0513</code> to set the balance limit to 0.0513 ETH. Run <code>balance limit binance USDT 30</code> to set the balance limit to 30 USDT. Both ETH and USDT value is equivalent to $30.</p> <p></p> <p>Each order is 0.0188 equivalent to $11.20</p> <p></p> <p>Sell order gets filled. USDT available balance is now 30.1657</p> <p></p> <p>Another sell order gets filled, the available balance now shows 41.2069. Plus the open buy order, the \"usable\" balance on USDT is now at around $52.</p> <p></p> <p>After the two sell orders gets filled the remaining available balance in ETH is 0.0137 equivalent to $8.17. It means that after the next <code>order_refresh_time</code> it won't create sell order because the minimum order amount is $11.</p> <p></p> <p></p> <p>Same process as the scenario above. After the two buy orders gets filled the remaining available balance in USDT is 7.5317 equivalent to $7.53. It means that after the next <code>order_refresh_time</code> it won't create buy order because the minimum order amount is $11.</p> <p></p> <p></p>","title":"Example Scenario"},{"location":"global-configs/clock-tick/","text":"<p>Starting with version 1.8.0, the <code>tick_size</code> is now added as a variable in the ClientConfigMap, this means that you will be able to change the value of the tick size in the <code>conf_client.yml</code> file or by running <code>config tick_size</code> from within Hummingbot</p>","title":"Clock tick size"},{"location":"global-configs/clock-tick/#how-it-works","text":"<p>All the major components of Hummingbot are Time Iterators like the connectors and the strategies. The Clock notifies all the components involved in the strategy by calling the method <code>c_tick()</code> of the time iterators every <code>tick_size</code>. By default the <code>tick_size</code> (or how long it takes Hummingbot to loop through a strategy iteration) is currently set to 1 second.</p>","title":"How it works"},{"location":"global-configs/clock-tick/#how-to-configure-tick-size","text":"<p>There are two ways to configure the tick size</p> <ul> <li>From within Hummingbot, run the command <code>config tick_size</code> and enter the desired tick size in decimal form.</li> </ul> <p></p> <ul> <li>Stop and exit Hummingbot then edit the <code>conf_client.yml</code> file located inside the <code>hummingbot_conf</code> folder using a text editor. Look for <code>tick_size: 1.0</code> and change <code>1.0</code> to whatever tick size you want. Save the changes to the yml file then run Hummingbot again for the changes to take effect.</li> </ul> <p></p>  <p>Note</p> <p>Due to connector limitations, the tick size cannot be set lower than <code>0.1</code> seconds</p>  <p>To check what the current <code>tick_size</code> is, you can run the <code>config</code> command and check the tick_size value under the Global Configurations section</p> <p></p>","title":"How to configure Tick Size"},{"location":"global-configs/clock-tick/#more-resources","text":"<p>Here's a short video where Foundation developer Federico shows how the tick_size works: https://www.loom.com/share/138d49d3ceb34da9943f114d848dbe77</p>","title":"More Resources"},{"location":"global-configs/color-settings/","text":"<p>Starting with version 0.45, we added new global configuration parameters that allows users to customize the client's background colors.</p> <p></p> <ol> <li><code>top-pane</code></li> <li><code>output-pane</code></li> <li><code>input-pane</code></li> <li><code>bottom-pane</code> </li> <li><code>log-pane</code></li> <li><code>terminal-primary</code></li> </ol>","title":"Color Settings"},{"location":"global-configs/color-settings/#changing-the-panel-colors","text":"<p>To make changes to the panel colors, run <code>config [parameter_name]</code> inside the Hummingbot client. For example, the command for changing the log pane color is <code>config log-pane</code> and enter the hex code of the desired color.</p>  <p>Tip</p> <p>You can use a hexadecimal color picker like the one here to choose colors: https://www.w3schools.com/colors/colors_picker.asp</p>  <p>Alternatively, you can edit these values in the <code>conf_client.yml</code> file located under the <code>hummingbot_conf</code> folder using a text editor.</p>  <p>Note</p> <p>In past versions of Hummingbot (1.5.0 and below), the <code>conf_client.yml</code> file is named <code>conf_global.yml</code></p>","title":"Changing the panel colors"},{"location":"global-configs/color-settings/#reset-colors-to-default","text":"<p>Press <code>CTRL + R</code> while inside Hummingbot to reset the style to use its default colors.</p> <pre><code># Background color of the top pane\ntop-pane: '#000000'\n\n# Background color of the bottom pane\nbottom-pane: '#000000'\n\n# Background color of the output pane\noutput-pane: '#282C2F'\n\n# Background color of the input pane\ninput-pane: '#151819'\n\n# Background color of the logs pane\nlogs-pane: '#151819'\n\n# Terminal primary color (text)\nterminal-primary: '#00FFE5'\n</code></pre>","title":"Reset colors to default"},{"location":"global-configs/external-db/","text":"<p>Community contibution</p> <p>Contributor: fengkiej from Rupiah Token</p>  <p>Hummingbot stores trades in a local SQLite for database by default, but it may be limiting for some cases such as sharing data to external system, in some cases user may want to use their own preferred client/server RDBMS for it.</p> <p>Other RDBMS are supported on Hummingbot through SQLAlchemy, it has included some widely used RDBMS dialects, i.e.:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>Oracle</li> <li>Microsoft SQL Server</li> </ul> <p>These dialects requires separate DBAPI driver to be installed on Hummingbot's conda environment, see SQLAlchemy documentation for more information on appropriate DBAPI driver for each RDBMS. For example, to use PostgreSQL, <code>psycopg2</code> need to be installed. Run the following command to install it using conda:</p> <pre><code>conda install psycopg2\n</code></pre> <p>To configure RDBMS connection, we need to edit <code>conf_client.yml</code> in the <code>/hummingbot_conf</code> directory.</p>  <p>Note</p> <p>In past versions of Hummingbot (1.5.0 and below), the <code>conf_client.yml</code> file is named <code>conf_global.yml</code></p>  <pre><code>- Advanced database options, currently supports SQLAlchemy's included dialects\n- Reference: https://docs.sqlalchemy.org/en/13/dialects/\n\ndb_engine: sqlite\ndb_host: 127.0.0.1\ndb_port: '3306'\ndb_username: username\ndb_password: password\ndb_name: dbname\n</code></pre>","title":"Connect External Database"},{"location":"global-configs/external-db/#configuration-parameters","text":"Configuration Parameter Possible Values     db_engine <code>sqlite</code>,<code>postgresql</code>,<code>mysql</code>,<code>oracle</code>,<code>mssql</code>   db_host any string e.g. <code>127.0.0.1</code>   db_port any string e.g. <code>3306</code>   db_username any string e.g. <code>username</code>   db_password any string e.g. <code>password</code>   db_name any string e.g. <code>dbname</code>","title":"Configuration parameters"},{"location":"global-configs/external-db/#sqlalchemy-dialects","text":"<p>It is also possible to connect with available SQLAlchemy's external dialects (e.g. Amazon Redshift). But the feature is not currently supported in Hummingbot due to its various DSN format, use this at your own risk.</p>","title":"SQLAlchemy dialects"},{"location":"global-configs/external-db/#additional-resources","text":"<p>In this Youtube Video the Foundation's lead developer Fede, shows you how you can use <code>Docker Compose</code> to launch multiple instances that all save to a single Postgres database.</p>","title":"\ud83d\udcd8 Additional Resources"},{"location":"global-configs/kill-switch/","text":"<p>Automatically stops the bot when it reaches a certain performance threshold, which can be either positive or negative. This feature uses the same performance calculation methodology as the history command.</p> <pre><code>Select your kill-switch mode (kill_switch_enabled/kill_switch_disabled)  &gt;&gt;&gt;\nAt what profit/loss rate would you like the bot to stop? (e.g. -5 equals 5 percent loss) &gt;&gt;&gt;\n</code></pre> <p>You can always reconfigure this feature in two ways:</p> <ol> <li>Inside Hummingbot run command <code>config kill_switch_mode</code> and/or <code>config kill_switch_mode.kill_switch_rate</code>.</li> <li>Edit the <code>conf_client.yml</code> file located inside the <code>hummingbot_conf</code> folder using a text editor.</li> </ol>  <p>Note</p> <p>In past versions of Hummingbot (1.5.0 and below), the <code>conf_client.yml</code> file is named <code>conf_global.yml</code></p>  <p>Note that when the market prices changes, so does the bot's performance and may trigger the kill switch. For example, we executed 13 trades and our performance are shown below.</p> <pre><code>kill_switch_mode:\n  kill_switch_rate: -5.0\n</code></pre> <pre><code>Inventory:\n      Market Asset  Starting   Current  Net Delta Trade Delta\n  0  binance   ETH   10.0000   11.0000     1.0000      3.0000\n  1  binance  USDT  500.0000  297.1580  -202.8420   -610.6340\n\nMarkets:\n      Market     Pair Start Price       End Price  Trades Trade Value Delta\n  0  binance  ETHUSDT     203.913  202.7150000000      13  -2.48900000 USDT\n\nPerformance:\n  Started: 2020-05-26 10:28:03\n  Duration: 0 days 00:07:06\n  Total Trade Value Delta: -2.489 USDT\n  Return %: -0.0985 %\n</code></pre> <p>After a while, the end price changed from 202.715 to 200.54 and so did our bot's performance even without making more trades. Since <code>kill_switch_rate</code> is set to <code>-0.3</code> this will stop the strategy.</p> <pre><code>Inventory:\n      Market Asset  Starting   Current  Net Delta Trade Delta\n  0  binance   ETH   10.0000   11.0000     1.0000      3.0000\n  1  binance  USDT  500.0000  297.1580  -202.8420   -610.6340\n\nMarkets:\n      Market     Pair Start Price       End Price  Trades Trade Value Delta\n  0  binance  ETHUSDT     203.913  200.5400000000      13  -9.01400000 USDT\n\nPerformance:\n  Started: 2020-05-26 10:28:03\n  Duration: 0 days 02:09:13\n  Total Trade Value Delta: -9.014 USDT\n  Return %: -0.3598 %\n</code></pre> <pre><code>[Kill switch triggered]\nCurrent profitability is -0.003550034854458\u202c. Stopping the bot...\nkill_switch - Kill switch threshold reached. Stopping the bot...\n</code></pre>","title":"Kill Switch"},{"location":"global-configs/override-fees/","text":"<p>By default, Hummingbot uses the default fees of the exchange. However, if you're on a VIP level getting discounts on fees, you can override this by editing the <code>conf_fee_overrides.yml</code> inside the <code>conf</code> or <code>hummingbot_conf</code> directory, depending on your installation method.</p> <ul> <li>Installed from source: <code>hummingbot/conf</code></li> <li>Installed via Docker: <code>hummingbot_files/hummingbot_conf</code></li> <li><code>hummingbot_files</code> is the default name of the parent directory. This can be different depending on the setup     when the instance was created.</li> <li>Installed via Binary (Windows): <code>%localappdata%\\hummingbot.io\\Hummingbot\\conf</code></li> <li>Installed via Binary (MacOS): <code>~/Library/Application\\ Support/Hummingbot/Conf</code></li> </ul> <p></p>  <p>Note</p> <p>Exit and restart Hummingbot for the changes to take effect.</p>","title":"Override Fees"},{"location":"global-configs/paper-trade/","text":"<p>This feature allows users to test Hummingbot and simulate trading strategies without risking any actual assets.</p>  <p>Note</p> <p>Exchange APIs are not required to run the bot on paper_trade for Pure Market making, Cross Exchange Market Making and Avellaneda Market Making. </p>","title":"Paper Trade"},{"location":"global-configs/paper-trade/#adding-exchanges","text":"<p>Users can now add paper exchanges by adding the exchange of choice in <code>conf_client.yml</code>. Previously, it was only available for AscendEX, Binance, Gate io, and Kucoin. Users can find <code>conf_client.yml</code> in <code>hummingbot/conf/conf_client.yml</code></p> <p>Add the paper trade exchange, for example kraken, to conf_client.yml:</p> <pre><code>paper_trade:\n  paper_trade_exchange:\n    - binance\n    - kucoin\n    - ascend_ex\n    - gate_io\n    - kraken\n</code></pre> <p>In the Hummingbot client, kraken_paper_trade should now be available when you select an exchange:</p> <p>Enter your maker spot connector &gt;&gt;&gt; kraken_paper_trade</p>","title":"Adding Exchanges"},{"location":"global-configs/paper-trade/#enabling-and-disabling","text":"<p>Paper trading can be enabled when creating a strategy and choosing an exchange when prompted <code>Enter your maker spot connector</code> during the creation of the strategy.</p> <p></p> <p>Alternatively, you can enable paper trading by inputting <code>config exchange</code> then choose the exchange that supports paper trade. </p> <p></p> <p>To choose a different connector and go live, simply choose the exchange name without the <code>paper_trade</code> suffix then do the command <code>stop</code> and <code>start</code> so the changes will reflect on your configuration.</p> <p></p>","title":"Enabling and Disabling"},{"location":"global-configs/paper-trade/#adding-paper-trade-balance","text":"<p>By default, the paper trade account has the following tokens and balances which you can see when you run the <code>balance paper</code> command.</p> <pre><code>&gt;&gt;&gt;  balance paper\nPaper account balances:\n    Asset    Balance\n      DAI  1000.0000\n      ETH    10.0000\n      ONE  1000.0000\n     TUSD  1000.0000\n     USDC  1000.0000\n     USDQ  1000.0000\n     USDT  1000.0000\n     WETH    10.0000\n      ZRX  1000.0000\n</code></pre> <p>When adding balances, specify the asset and balance you want by running this command <code>balance paper [asset] [amount]</code>.</p> <p>For example, we want to add 0.5 BTC and check our paper account balance to confirm.</p> <pre><code>&gt;&gt;&gt;  balance paper BTC 0.5\nPaper balance for BTC token set to 0.5\n\n&gt;&gt;&gt;  balance paper\nPaper account balances:\n    Asset    Balance\n      BTC     0.5000\n      DAI  1000.0000\n      ETH    10.0000\n      ONE  1000.0000\n     TUSD  1000.0000\n     USDC  1000.0000\n     USDQ  1000.0000\n     USDT  1000.0000\n     WETH    10.0000\n      ZRX  1000.0000\n</code></pre>","title":"Adding Paper Trade Balance"},{"location":"global-configs/rate-limits-share-pct/","text":"<p>Some exchanges impose rate limits per account. When running multiple bots using a single account, <code>rate_limits_share_pct</code> users to set a certain percentage of the total limit to each instance. When the bot is near the allocated limit, Hummingbot sends a notification as a warning so users can adjust their configuration before the account is banned.</p> <p>For example, the rate limit for AscendEX is 100 requests per second. Your account will be banned for a certain period of time if you keep hitting the rate limit in 10 minutes (status code <code>429</code> or <code>100014</code>).</p> <p>Setting 50% for <code>rate_limits_share_pct</code> means we want the bot to send a notification when it starts to send 50 requests per second for that specific instance.</p>","title":"Rate Limits Share Pct"},{"location":"global-configs/rate-limits-share-pct/#how-to-use-the-parameter","text":"<ol> <li>Run <code>config rate_limits_share_pct</code> while the strategy is stopped</li> <li>Enter the percentage of API rate limit you want to allocate to the bot </li> <li>Start the strategy using <code>start</code> command</li> <li>A notification will be displayed in the output pane when the <code>rate_limits_share_pct</code> value is about to be reached </li> </ol>  <p>Note</p> <p>You can also configure this setting while the strategy is running. However, the strategy must be restarted for the changes to take effect.</p>","title":"How to use the parameter"},{"location":"global-configs/strategy-autostart/","text":"","title":"Strategy Autostart"},{"location":"global-configs/strategy-autostart/#docker-autostart","text":"<p>Warning</p> <p>This is a recently released experimental feature. Running any trading bots without manual supervision may incur additional risks. It is imperative that you thoroughly understand and test the strategy and parameters before deploying bots that can trade in an unattended manner.</p>  <p>Hummingbot can automatically start the execution of a previously configured trading strategy upon launch without needing user interaction when provided with pre-existing configuration files. This can be very useful if you wish to deploy already well-tested strategies and configurations to cloud services and have Hummingbot running automatically in the background.</p>","title":"Docker autostart"},{"location":"global-configs/strategy-autostart/#prerequisites","text":"<ul> <li>You have Hummingbot installed via Docker</li> <li>You have already connected exchanges by adding API keys</li> <li>You have at least one strategy configuration file that has been set up previously</li> </ul>","title":"Prerequisites"},{"location":"global-configs/strategy-autostart/#locating-config-files","text":"<p>If you used the Scripts method via Docker, the configuration folder is the path printed at the <code>=&gt; config files:</code> line, when you run <code>./create.sh</code>.</p> <p>If you used the Manual method, the configuration folder is <code>$(pwd)/hummingbot_files/hummingbot_conf</code> at the time when you run <code>docker run</code>.</p> <p>If your Hummingbot docker instance is already running, you can inspect the volume mount paths of your Hummingbot container with the following command:</p> <pre><code>docker inspect ${HUMMINGBOT_CONTAINER_NAME} --format='{{.Mounts}}'\n</code></pre> <p>The configuration folder is the mount path that corresponds to <code>/conf</code> in the volume mounts listing.</p>","title":"Locating config files"},{"location":"global-configs/strategy-autostart/#how-to-autostart","text":"<p>An unattended Hummingbot installation is very similar to the Docker manual installation steps. The only differences are:</p> <ol> <li>You will copy the pre-existing configuration files to the <code>hummingbot_conf</code> directory.</li> <li>You will set some environment variables telling Hummingbot which strategy configuration to use and the password to decrypt your API keys and wallets.</li> </ol> <pre><code># 1) Create folder for your new instance\nmkdir hummingbot_files\n\n# 2) Create folders for logs, config files and database file\nmkdir hummingbot_files/hummingbot_conf\nmkdir hummingbot_files/hummingbot_logs\nmkdir hummingbot_files/hummingbot_data\nmkdir hummingbot_files/hummingbot_scripts\nmkdir hummingbot_files/hummingbot_certs\n\n# 3) Copy config files from pre-existing config folder\ncp -a &lt;existing config path&gt;/*.yml &lt;existing config path&gt;/*.json hummingbot_files/hummingbot_conf/\n\n# 4) Set environment variables specifying the strategy config file to use, and the decryption password\nexport STRATEGY=&lt;strategy name&gt;\nexport CONFIG_FILE_NAME=&lt;strategy config file name&gt;\nexport CONFIG_PASSWORD=&lt;config password&gt;\n\n# 5) Launch unattended instance of Hummingbot\ndocker run -d \\\n  --name hummingbot-instance \\\n  --network host \\\n  --mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_conf,destination=/conf/\" \\\n  --mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_logs,destination=/logs/\" \\\n  --mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_data,destination=/data/\" \\\n  --mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_scripts,destination=/scripts/\" \\\n  --mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_certs,destination=/certs/\" \\\n  -e STRATEGY -e CONFIG_FILE_NAME -e CONFIG_PASSWORD \\\n  hummingbot/hummingbot:latest\n\n# 6) Clean up\nunset STRATEGY CONFIG_FILE_NAME CONFIG_PASSWORD\n</code></pre> <p>The Hummingbot instance will be running in the background. You can bring it to foreground via</p> <pre><code>docker attach hummingbot-instance\n</code></pre> <p>You can then detach from the container and put it back to the background by pressing <code>CTRL-p</code> and then <code>CTRL-q</code>.</p>","title":"How to autostart"},{"location":"global-configs/strategy-autostart/#optional-commands","text":"<p>Use Docker's restart policy to always restart the container if it exits.</p> <pre><code>docker run -it --restart=always \\ ...\n</code></pre> <p>Adding the option <code>-d</code> or <code>--detach</code> will start the container without attaching.</p> <pre><code>docker run -itd \\ ...\n</code></pre> <p>More information can be found in Docker documentation.</p>","title":"Optional commands"},{"location":"global-configs/strategy-autostart/#source-autostart","text":"","title":"Source autostart"},{"location":"global-configs/strategy-autostart/#prerequisites_1","text":"<ul> <li>You have Hummingbot installed via Source.</li> <li>You have already connected exchanges by adding API keys</li> <li>You have at least one strategy configuration file that has been set up previously</li> </ul>","title":"Prerequisites"},{"location":"global-configs/strategy-autostart/#locating-config-files_1","text":"<p>Whichever you used was it the Scripts or Manual method from Source, the configuration folder is located inside the <code>hummingbot</code> folder, the path is where you installed your Hummingbot.</p>","title":"Locating config files"},{"location":"global-configs/strategy-autostart/#how-to-autostart_1","text":"<p>Running unattended Hummingbot is very similar to running hummingbot manually. The only differences are:</p> <ul> <li>You will read the pre-existing configuration files to the <code>conf</code> directory.</li> <li>You will pass some parameters telling Hummingbot which strategy configuration to use and the password to decrypt your API keys and wallets.</li> </ul> <pre><code>bin/hummingbot_quickstart.py -f CONFIG_FILE_NAME -p CONFIG_PASSWORD\n</code></pre> <p>Where <code>STRATEGY</code> is the strategy name <code>CONFIG_FILE_NAME</code> is the strategy config file name <code>CONFIG_PASSWORD</code> is the config password</p> <ul> <li>More information on strategy can be found in Strategy.</li> <li>More information on configuration file name can be found in Configuring Hummingbot.</li> <li>More information on password can be found in Create a secure password.</li> </ul>","title":"How to autostart"},{"location":"global-configs/telegram/","text":"<p>Integrating Hummingbot with Telegram Messenger allows you to get real-time updates and issue commands to your trading bot from any device where you have Telegram installed. Whether you are running Hummingbot in the cloud or on your local machine, you can use Telegram to monitor and control bots from wherever you are!</p>","title":"Telegram Integration"},{"location":"global-configs/telegram/#creating-a-telegram-bot","text":"<p>Click this link to launch the official BotFather bot, a Telegram bot that helps you create and manage Telegram bots: https://telegram.me/BotFather.</p> <ol> <li>In Telegram, go to the newly-created BotFather chat pane, and click Start or type <code>/start</code></li> <li>Enter <code>/newbot</code> to create a bot</li> <li>Enter a name for your bot, the title of the bot in Telegram e.g. <code>hummingbot</code></li> <li>Enter a unique ID that ends with the word <code>bot</code> (e.g. <code>my_awesome_hummingbot</code>)</li> <li>Make sure to copy or save the token. This is needed for enabling Telegram on Hummingbot.</li> <li>Click the link to your new bot in the message above launch it: <code>t.me/&lt;YOUR BOT NAME&gt;</code>.</li> <li>Click <code>Start</code> or type <code>/start</code> to start the bot</li> </ol> <p></p>","title":"Creating a Telegram Bot"},{"location":"global-configs/telegram/#getting-your-telegram-id","text":"<p>Click this following to launch userinfobot, a Telegram bot that helps you retrieve your Telegram ID: https://telegram.me/userinfobot.</p> <p></p> <p>In Telegram, go to the newly-created userinfobot chat pane, and click <code>Start</code> or type <code>/start</code>. Save the ID number.</p>","title":"Getting your Telegram ID"},{"location":"global-configs/telegram/#setting-up-in-hummingbot","text":"<p>You can now startup Hummingbot and confirm that the integration is properly configured. To enable Telegram in Hummingbot do the following:</p> <ol> <li>Run <code>config telegram_enabled</code> and set to True or answer Yes to enable the Telegram integration</li> <li>Run <code>config telegram_token</code> and enter the Telegram token ID from BotFather</li> <li>Run <code>config telegram_chat_id</code> and enter the chat ID from Getting your Telegram ID</li> </ol>","title":"Setting up in Hummingbot"},{"location":"global-configs/telegram/#using-the-telegram-bot","text":"<p>Before you start Hummingbot, make sure that the Telegram bot is live. If so, you should see a chat pane with your bot's name in Telegram. Start Hummingbot as you would normally. Telegram will be connected as soon as you run <code>start</code> in your hummingbot CLI window. Messages are synchronized in real-time between the Telegram bot and the actual Hummingbot instance running. For example, you can use commands such as <code>status</code> and <code>history</code> to monitor the bot's performance, <code>config</code> shows bot current configurations and you can use <code>start</code> and <code>stop</code> to control the bot.</p> <p></p>  <p>Tip</p> <p>If you are running multiple bots with Telegram enabled, you can use the same Telegram chat ID with different API tokens from each bot you created to control all of them. You can also use their chat folders feature to organize your bots.</p>","title":"Using the Telegram Bot"},{"location":"governance/","text":"<p>The purpose of the Hummingbot Foundation is to empower the HBOT token holders to govern many aspects of Hummingbot, such as:</p> <ul> <li>Approving pull requests to the Hummingbot codebase</li> <li>Proposing improvements and architectural changes to the Hummingbot codebase</li> <li>Modifying parameters of the HBOT governance system</li> <li>Electing the foundation's Board of Directors</li> <li>Allocating grants and other expenditures of the community treasury</li> </ul> <p>Vote with HBOT</p>","title":"Governance"},{"location":"governance/#key-artifacts","text":"<p>Hummingbot Foundation maintains the resources below to make the governance process transparent to the community:</p> <ul> <li> <p>HBOT Tracker: A public Google Sheet maintained by the Foundation, this shows you the real-time HBOT circulating supply, approved proposals, active bounties, and HBOT distributions.</p> </li> <li> <p>Foundation Calendar: Upcoming release dates, monthly polls, community calls, and other events.</p> </li> <li> <p>Bounties Board: A public Github board for bug fixes and proposed enhancements with development bounties attached to them.</p> </li> <li> <p>Pull Request Status: A public Github board for active pull requests that are being voted on, reviewed, and merged.</p> </li> </ul>","title":"Key Artifacts"},{"location":"governance/#more-information","text":"<p>Hummingbot employs a decentralized, community-driven maintenance process that relies upon contributions by a decentralized network of community developers.</p> <ul> <li>Whitepaper: Originally published in December 2021, this document that explains the Foundation's goals and how its governance system works.</li> <li>Proposals: HBOT token holders can create and vote on various types of proposals to steer the evolution of the project. Each proposal type may have different guidelines, HBOT balance requirements, and approval/quorum thresholds.</li> <li>Polls: Different polls that the Foundation conducts each month to encourage HBOT governance</li> <li>Bounties: Process of creating and assigning developer bounties for making improvements to the Hummingbot codebase</li> <li>Releases: Process of reviewing and merging pull requests into official monthly releases</li> <li>Epochs: Quarterly periods with fixed exchange and strategy tiers that are defined via polls</li> </ul>","title":"More Information"},{"location":"governance/#how-to-participate","text":"<p>We use a number of platforms that enable community engagement in different ways. Below, we offer guidance to help the community decide how to participate in governance.</p>","title":"How to Participate"},{"location":"governance/#discord","text":"<p>The Governance category in our Discord has various channels that users can use to discuss proposals and polls, as well as general discussions.</p>","title":"Discord"},{"location":"governance/#snapshot","text":"<p>All proposal voting occur on the offical Hummingbot Snapshot, which features an off-chain, gas-less voting system that allows you to vote by signing messages using your HBOT token balance as of a certain block.</p> <p>Each proposal type has its Snapshot sub-space:</p> <ul> <li>Pull Request Proposals (PRP): https://snapshot.org/#/hbot-prp.eth</li> <li>Hummingbot Improvement Proposals (HIP): https://snapshot.org/#/hbot-ip.eth</li> <li>Hummingbot Governance Proposals (HGP): https://snapshot.org/#/hbot.eth</li> </ul>","title":"Snapshot"},{"location":"governance/board/","text":"<p>The Board of Directors provides oversight over the Hummingbot Foundation and its day-to-day activities, along with managing the HBOT treasury.</p>","title":"Board of Directors"},{"location":"governance/board/#members","text":"<p>Elected for a 12-month term in February 2023 in HGP-35, the Board is comprised of the following individuals:</p>    Name Title Address     Brett Gibson Managing Partner, Initialized Capital eth:0x64b..4C3   Gene Cheon COO, Hummingbot Foundation eth:0xd50..27d   Hoang La  hoangla.eth   Michael Feng Board member, CoinAlpha fengtality.eth   Michael Timmons  eth:0x20a..721","title":"Members"},{"location":"governance/board/#role-responsibilities","text":"<p>The Board is a 5-person, independent committee that oversees the day-to-day administration of the Hummingbot Foundation and manages the multi-signature wallet of the HBOT treasury.</p> <p>The Board conducts quarterly virtual board meetings to discuss Foundation progress and strategy. In addition, the Board regularly corresponds over group chat to handle multi-signature transactions related to HBOT distributions.</p>","title":"Role &amp; Responsibilities"},{"location":"governance/board/#requirements","text":"<p>Serving on the Board is open to anyone in the Hummingbot community. As board members are elected by HBOT holders, board candidates should have some past experience with Hummingbot and its community.</p> <p>Since all transactions from the Foundation HBOT treasury require 3 out of 5 board signatures, board members should know how to manage a Gnosis multi-signature wallet.</p> <p>Per the Foundation bylaws, there is no salary for serving on the Board of Directors.</p>","title":"Requirements"},{"location":"governance/board/#election-process","text":"<p>Hummingbot Foundation re-elects its Board of Directors every 12 months via Governance Proposal, following a process similar to that of other Polls:</p> <ul> <li> <p>Nomination thread: One month before the election, the Foundation will post a thread in Discord where past board members and anyone else can apply for a Board seat</p> </li> <li> <p>Election starts: We will create the election as a Hummingbot Governance Proposal with everyone who applied via the Discord thread. Similar to other polls, this election uses Snapshot gasless voting and the quadratic voting allocation method.</p> </li> <li> <p>Election ends: The election ends in 1 week, and the top 5 vote-getters will be seated afterwards on the Board of Directors for a 1-year term.</p> </li> </ul>","title":"Election Process"},{"location":"governance/bounties/","text":"<p>Bounties are rewards (denominated in HBOT or other tokens) given out by the Foundation or by community members to developers for fixing a bug or adding an improvement (enhancement, new connector, new strategy, etc) to the Hummingbot codebase.</p>","title":"Bounties"},{"location":"governance/bounties/#bounties-board","text":"<p></p> <p>Hummingbot Foundation maintains a Github board in which you can see the status of all active bounties, including both bugs and improvements.</p> <ul> <li>Open: Open bounties that developers can apply to work on</li> <li>Assigned: Issue has been assigned to a developer, who is expected to submit a pull request resolving it</li> <li>Submitted: A pull request resolving the issue has been submitted by the assigned developer</li> <li>Merged: Pull request has been merged to the <code>development</code> branch</li> <li>Paid: The community developer has been paid and the bounty is considered done.</li> </ul>","title":"Bounties Board"},{"location":"governance/bounties/#creation","text":"<p>There are three types of bounties:</p> <ul> <li>Bug bounty: bounties for priority bugs assessed by Hummingbot Foundation</li> <li>Improvement bounty: bounties for codebase improvements following an approved HIP</li> <li>Community bounty: bounties submitted by community members (skips HIP process)</li> </ul> <p>For bugs related to core components, as well as for certified exchange connectors, Hummingbot Foundation will assess the bugs following the current schedule and create bounties for them on the Bounties board.</p> <p>For improvements such as new connectors and strategies, anyone can create Hummingbot Improvement Proposals (HIP) that, if approved, determines whether Foundation should add an HBOT bounty to the Bounties board.</p> <p>In addition, community members can also fund bounties and get them to the Bounties board by sending tokens to a Foundation wallet, skipping the HIP voting process.  To fund a community bounty, please contact Hummingbot Foundation support team on Discord.</p> <p>Afterwards, the Foundation team member will add a comment to the bounty's Github issue stating that a bounty has been created for the issue (\"Created 100,000 HBOT bounty for a fix resolving issue X\") and add it to the Bounties Board under the Open column.</p>","title":"Creation"},{"location":"governance/bounties/#assignation","text":"<p>After the bug has been added to Bounties Board, any developer from the community can apply to be assigned to fix the bug by commenting on the Github issue.</p> <p>Once there are one or more qualified developers who have applied to fix a bug, the Foundation will assign the issue to one of them, based on the developer\u2019s past experience with Hummingbot. To mark the assignation, we will move the issue to Assigned in the Bounties board, and add a comment to the issue (\"Assigned bounty to Developer X (with link to Github profile)\").</p>","title":"Assignation"},{"location":"governance/bounties/#submission","text":"<p>To claim a bounty, the assigned developer must submit a pull request addressing the bounty. Afterwards, Foundation will run tests to assess the fix and conduct an engineering review to ensure it can be merged into the codebase safely.</p>","title":"Submission"},{"location":"governance/bounties/#payment","text":"<p>Bounties are paid only after the pull request is merged into the <code>development</code> branch. For HBOT-denominated bounties created by the Foundation, 100% of the bounty goes to the developer who submitted the pull request.</p> <p>For bounties funded by community members that are conducted via the Hummingbot Foundation Snapshot, bounty payments are split into the following shares:</p> <ul> <li>Developer Share: [80]% of bounty goes to the developer who submitted the pull request that fulfills the bounty requirements</li> <li>Reviewer Share: [20]% of bounty goes to the Foundation for reviewing and merging the pull request</li> </ul>","title":"Payment"},{"location":"governance/bounties/#bug-bounties","text":"<p>Starting in Epoch 2, the Foundation assigns bounties to open Github bugs, prioritizing issues related to Certified exchanges.</p>","title":"Bug Bounties"},{"location":"governance/bounties/#bug-bounty-schedule","text":"<p>The severity assigned by Hummingbot Foundation determines the amount for each bounty. Currently, the Foundation applies the following fixed bounty amounts per bug severity.</p>    Bug Severity Bug Fix     P3 (Low) 10,000 HBOT   P2 (High) 50,000 HBOT   P1 (Critical) 100,000 HBOT    <p>Afterwards, the Foundation team member will add a comment to the Github issue stating that a bounty has been created for the issue (\"Created 100,000 HBOT bounty for a fix resolving issue X\") and add it to the Bounties board under the Open column.</p> <p>See Bounties for how developers can take up bounties.</p>","title":"Bug Bounty Schedule"},{"location":"governance/bounties/#reporting","text":"<p>To report a bug, anyone can submit an Bug Report to the Hummingbot Github.</p> <p>The submitter should include as much description as possible for the issue reported, such as Steps to Reproduce, screenshots, etc. They should also add labels corresponding to the strategy name and exchange connector name as well.</p>","title":"Reporting"},{"location":"governance/bounties/#classification","text":"<p>The Foundation will regularly assess all bugs, which entails determining whether it is in fact a real bug and applying a priority label to them. If the issue is a real bug, the Foundation will add the Github issue to the Bounty Board and assign a fixed HBOT amount according to the Bug Bounty Schedule above.</p>","title":"Classification"},{"location":"governance/bounties/#p3-low","text":"<ul> <li> <p>Bugs won\u2019t result in any noticeable breakdown of the system</p> </li> <li> <p>Related to:</p> </li> <li>Color, incorrect spacing, typo or all related to design or user interface</li> <li>How parameter works when being called (Prompt)</li> <li> <p>Strategy performance (setup, order create/cancellation, orderbook integrity..etc)</p> </li> <li> <p><code>Status:</code> The client still works as expected with possible workarounds</p> </li> <li> <p>Results in some unexpected or undesired behavior, but not enough to disrupt system function</p> </li> <li> <p>Example 1</p> </li> <li><code>Test case</code>: Executed command config order_refresh_time</li> <li> <p><code>Test expected result:</code> There should be prompt of how order_refresh time works and what user should input</p> </li> <li> <p>Example 2</p> </li> <li><code>Test case:</code> Start pure market making</li> <li><code>Test expected result:</code> The bot should create orders after 20s upon running start command</li> </ul>","title":"P3 (Low)"},{"location":"governance/bounties/#p2-high","text":"<ul> <li> <p>Bug capable of collapsing large parts of the system</p> </li> <li> <p>Related to:</p> </li> <li>The data client provides to users (SQlite, CSV, trades files)</li> <li>Functionality of strategies</li> <li>Connection between Client and Exchange</li> <li>Client performance when started</li> <li>Compatibility on hardware and operating systems</li> <li>Orders not created correctly</li> <li> <p>Trade history does not match from client and connector</p> </li> <li> <p>Example 1:</p> </li> <li><code>Test case:</code> History command, Trade PNL data</li> <li> <p><code>Test expected result:</code> After few trades, run history command and it should show all data the user needs on trade events</p> </li> <li> <p>Example 2:</p> </li> <li><code>Test case:</code> Binance connector</li> <li> <p><code>Test expected result:</code> Connecting API and balance should return no error when executed</p> </li> <li> <p><code>Status:</code> the client works but some of the functionalities are not working as expected</p> </li> </ul>","title":"P2 (High)"},{"location":"governance/bounties/#p1-critical","text":"<ul> <li> <p>Bug capable of triggering complete system shutdown or can cause a leak of the user private information (i.e. API keys, wallet private keys)</p> </li> <li> <p>Related to:</p> </li> <li>The client does not work, returning number of errors</li> <li>Unable to install/setup both source/docker build</li> <li>Connector unusable</li> <li>Client unstable</li> <li>Client  creates order but not on connector</li> <li>Client crashes upon start</li> <li> <p>etc..</p> </li> <li> <p><code>Status:</code> The client can be either usable or unusable due to functionality issues</p> </li> </ul>","title":"P1 (Critical)"},{"location":"governance/bounties/#improvement-bounties","text":"<p>Improvement bounties are created when an HIP or HGP allocates HBOT tokens to fund a specific task, such as a new connector, strategy, or enhancement.</p>","title":"Improvement Bounties"},{"location":"governance/epochs/","text":"<p>The Hummingbot Foundation is an experiment in creating a self-sustainable open source ecosystem. We plan to iterate and improve on this distribution process via Epochs.</p> <p>Each Epoch is a fixed period that are basically long agile sprints, after which the Foundation will conduct an open retrospective and strengthen internal processes for the next Epoch.</p>","title":"Epochs"},{"location":"governance/epochs/#epoch-1","text":"<ul> <li>Start: Feb 1, 2022</li> <li>End: June 30, 2022</li> <li>Goal: Distribute 30 million HBOT tokens</li> </ul> <p>The last day to submit Hummingbot Improvement Proposals (HIPs) requesting a share of Dev Grant Budgets is May 31, 2022, and the last day to submit Pull Request Proposals (PRPs) linked to approved HIPs is June 30, 2022.</p>    Category Total HBOT Available Target Number of Grants     Liquidity Distributions 15,000,000 10 platforms   Dev Grant Budget 10,000,000 50 dev grants   Initiative Budget 5,000,000 5 initiatives    <p>After Epoch 1, the Foundation conducted a retrospective and enacted a number of changes to the governance process. Specifically, the Foundation decided to start the following initiatives:</p> <ul> <li>Start the Exchange Certification initiative</li> <li>Create more structure around the Bounties process</li> <li>Start a developer bootcamp Botcamp</li> </ul>","title":"Epoch 1"},{"location":"governance/epochs/#epoch-2","text":"<ul> <li>Start: August 1, 2022</li> <li>End: December 31, 2022</li> <li>Goal: Distribute 30 million HBOT tokens</li> </ul>    Category HBOT Allocation     Dev Grant Budget 15,000,000   Liquidity Distributions 5,000,000   Community Work 10,000,000    <p>After Epoch 2, the Foundation conducted a retrospective and decided to enact the following changes to improve the governance process:</p> <ul> <li>Change epoch cadence to from bi-annually to quarterly</li> <li>Start Polls to make HBOT governance easier</li> <li>Cease setting per-epoch HBOT distribution targets</li> </ul>","title":"Epoch 2"},{"location":"governance/epochs/#epoch-3","text":"<ul> <li>Start: January 1, 2023</li> <li>End: March 31, 2023</li> </ul> <p>See Epoch 3 Polls Recap for more information.</p>","title":"Epoch 3"},{"location":"governance/epochs/#cex-connectors","text":"<p></p> <ul> <li>Binance</li> </ul> <p></p> <ul> <li>Kucoin</li> <li>Gate.io</li> <li>AscendEx</li> </ul> <p></p> <p>Crypto.com, Kraken, LBank, Bitget, Bybit, NDAX, Coinbase, Bitmart, Bitfinex, Binance US, Bittrex, Huobi, AltMarkets, HitBTC, Bitmex, ProBit Global, OKX, WhiteBit, MEXC</p>","title":"CEX Connectors"},{"location":"governance/epochs/#dex-connectors","text":"<p></p> <ul> <li>Uniswap</li> </ul> <p></p> <ul> <li>PancakeSwap</li> <li>SushiSwap</li> <li>dYdX</li> </ul> <p></p> <p>TraderJoe, QuickSwap, OpenOcean, Pangolin, Defira, Perpetual Protocol, MM Finance, Defi Kingdoms, Loopring, Ref Finance, VVS Finance</p>","title":"DEX Connectors"},{"location":"governance/epochs/#core-strategies","text":"<p></p> <ul> <li>Pure Market Making (PMM)</li> <li>Cross Exchange Market Making (XEMM)</li> <li>AMM Arbitrage</li> </ul> <p></p> <p>Avellaneda Market Making, UniswapV3 LP, Hedge, Cross-Exchange Mining, Perpetual Market Making, Aroon Oscillator, Liquidity Mining, TWAP, Spot Perpetual Arbitrage</p>","title":"Core Strategies"},{"location":"governance/hackathons/","text":"<p>The Foundation work with partners to host hackathons related to Hummingbot.</p>","title":"Hackathons"},{"location":"governance/hackathons/#ethportland-hackathon","text":"<ul> <li>Sponsor: Hummingbot Foundation</li> <li>Date: April 2022</li> <li>Total prize amount: 1,000,000 HBOT</li> </ul>","title":"ETHPortland Hackathon"},{"location":"governance/hackathons/#dydx-hummingbot-bounty-hunt","text":"<ul> <li>Sponsor: dYdX</li> <li>Start date: Aug 9, 2021</li> <li>End date: Oct 1, 2021</li> <li>Total prize amount: $15,000 (including tips)</li> <li>Winners: https://hummingbot.io/blog/dYdX-Bounty-Winner-Announcement</li> </ul>    Contributor Contribution Bounty Amount     leastchaos #4121 Strategy $10,000   cryptoulette guide + video Content $2,000    <p>The winning <code>hedge</code> strategy was merged in version 0.45.0.</p>","title":"dYdX + Hummingbot Bounty Hunt"},{"location":"governance/hackathons/#open-defi-hackathon","text":"<ul> <li>Sponsor: Open DeFi</li> <li>Start date: May 3, 2021</li> <li>End date: May 23, 2021</li> <li>Total prize amount: $5,000 (including tips)</li> <li>Winners: https://hummingbot.io/blog/2021-05-opendefi-hackathon-hummingbot-bounty-winner/</li> </ul>    Contributor Contribution Bounty Amount     squarelover #3430 Strategy $2,000    <p>The winning <code>aroon-oscillator</code> strategy was merged in version 0.45.0.</p>","title":"Open DeFi Hackathon"},{"location":"governance/polls/","text":"<p>To make it easier for HBOT holders to participate in governance, Hummingbot Foundation organizes regularly polls conducted on Snapshot. Polls allow HBOT holders decide how the Foundation allocates its engineering bandwidth and HBOT developer bounties across the various components in the Hummingbot codebase.</p> <p>There are four types of polls:</p> <ul> <li> <p>Priority Issues: A monthly poll that prioritizes the top Github open issues and pull requests that the Foundation should address.</p> </li> <li> <p>CEX Connectors: A quarterly poll that define the level of maintenance that the Foundation spends on each centralized exchange connector</p> </li> <li> <p>DEX Connectors: A quarterly poll that define the level of maintenance that the Foundation spends on each decentralized exchange connector</p> </li> <li> <p>Core Strategies: A quarterly poll that defines which strategies should be Core (officially maintained by the Foundation) versus Community (maintained by community members).</p> </li> </ul>","title":"Polls"},{"location":"governance/polls/#polls-process","text":"<p>The first Polls begin in January 2023.</p> <p>During the first week of each month, the Foundation will create Hummingbot Governance Proposals in the HBOT Snapshot space for each poll. In the first month of each quarter, there will be 4 polls, while the second and third months only have one poll for Priority Issues.</p> <p>Each poll uses the Quadratic Voting voting type on Snapshot:</p>  <p>Each voter may spread voting power across any number of choices. The results are calculated quadratically, so the number of individual voters matters more than the voting power contributed. </p>  <p>Each poll lasts for one week. Afterwards, the Foundation will implement the changes to the exchange and strategy tiers in the subsequent monthly release.</p>","title":"Polls Process"},{"location":"governance/polls/#minimum-voting-power","text":"<p>In the quarterly Connectors and Core Strategies polls, each choice needs to garner a minimum amount of HBOT voting power to meet the Minimum Voting Power threshold. Otherwise, the exchange connector or strategy will be removed from the codebase in the following release.</p> <p>Currently, the Minimum Voting Power is 100,000 HBOT.</p>","title":"Minimum Voting Power"},{"location":"governance/polls/#types-of-polls","text":"","title":"Types of Polls"},{"location":"governance/polls/#priority-issues","text":"<ul> <li>A monthly poll that selects the top five (5) open issues and pull requests that the Foundation prioritizes</li> <li>One week before the poll start date, the Foundation will create a Discord thread to let the community nominate new open Github issues and pull requests. All open Github issue and pull request are open for nomination.</li> <li>If an issue or pull request is not resolved by the end of the month, it is automatically nominated in the following month's poll</li> <li>Prioritization means that the Foundation will focus on resolving these issues and pull requests chosen by the community, above any other non-bug issues, including Pull Request Proposals.</li> </ul>","title":"Priority Issues"},{"location":"governance/polls/#cex-connectors","text":"<ul> <li>A quarterly poll that places centralized exchange connectors into Gold, Silver and Bronze tiers, which define the level of maintenance that the Foundation spends on each connector.</li> <li>The choices for this poll are the current centralized exchanges which have spot or perpetual connectors in the codebase, i.e. Binance, Coinbase, Kucoin, etc.</li> <li>After the poll ends, the top choice is the Gold exchange for the following quarterly epoch. The Foundation will be the official maintainer for this exchange's spot and perpetual connectors, and the Foundation's own engineering team will build and maintain these connectors and improve them by keeping up with exchange upgrades and mapping new functionality added via API. These connectors serve as the \"gold standard\" template for all other connectors of that type.</li> <li>The #2, #3, and #4 choices are the Silver exchanges. The Foundation will be the official maintainer for this exchange's spot and perpetual connectors as well. However, these exchanges' connectors will be maintained via community developer bounties, tracking improvements made to the Gold exchange connectors.</li> <li>The Foundation supports Gold and Silver CEXs by running long-term testing bots for their connectors and providing HBOT rewards to users who answer community questions related to them.</li> <li>Any other exchange that meets the Minimum Voting Power threshold is a Bronze exchange. The Foundation does not maintain these exchanges' connectors nor will we allocate bounties for them, but they may be maintained by a member of the community.</li> <li>Note that HBOT holders can force the Foundation to fix a bug or review a pull request related to a Bronze exchange using the Priority Issues poll or Pull Request Proposal.</li> <li>Exchanges that don't meet the Minimum Voting Power threshold will be removed from the codebase.</li> </ul>","title":"CEX Connectors"},{"location":"governance/polls/#dex-connectors","text":"<ul> <li>A quarterly poll that places decentralized exchange connectors into Gold, Silver and Bronze tiers, which define the level of maintenance that the Foundation spends on each connector.</li> <li>The choices for this poll are the current decentralized exchanges which have connectors in the Gateway or Hummingbot client codebase, i.e. Uniswap, dYdX, PancakeSwap, etc.</li> <li>DEXs with instances on different chains are considered a single exchange </li> <li>Similar to CEX Connectors, this poll selects Gold (top 1), Silver (top 2-4), and Bronze DEXs based on voting power received. DEXs that don't meet the Minimum Voting Power threshold will be removed from the codebase.</li> <li>The Foundation will treat the Gold DEX Connector as the \"gold standard\" and map all of its swap and liquidity provision endpoints and support instances on all major chains. For the Silver DEXs, we will utilize HBOT developer bounties to fund improvements and fixes.</li> <li>The Foundation supports Gold and Silver DEXs by running long-term testing bots for their connectors and providing HBOT rewards to users who answer community questions related to them.</li> </ul>","title":"DEX Connectors"},{"location":"governance/polls/#core-strategies","text":"<ul> <li>A quarterly poll that defines which strategies should be Core (officially maintained by the Foundation) versus Community (maintained by community members or not maintained).</li> <li>The choices for this poll are the current strategies in the codebase.</li> <li>After the poll ends, the top three (3) strategies in the codebase are considered the Core strategies for the following quarterly epoch. The Foundation will be the official maintainer for these strategies, prioritize updates and fixes to them, abd maintain their documentation pages.</li> <li>The Foundation supports Core strategies by running long-term testing bots for them and providing HBOT rewards to users who answer community questions related to them.</li> <li>Any other strategy that meets the Minimum Voting Power threshold is a Community strategy. The Foundation does not maintain these strategies nor will we allocate bounties for them, but they may be maintained by a member of the community.</li> <li>Note that HBOT holders can force the Foundation to fix a bug or review a pull request related to a Community strategy using the Priority Issues poll or Pull Request Proposal.</li> <li>Strategies that don't meet the Minimum Voting Power threshold will be removed from the codebase.</li> </ul>","title":"Core Strategies"},{"location":"governance/proposals/","text":"<p>HBOT holders can vote on three types of proposals:</p> <ul> <li>Pull Request Proposal (PRP): a proposal linked to an open pull request in the Hummingbot code repository. The community votes if the linked Pull Request should be added to the main codebase;</li> <li>Hummingbot Improvement Proposal (HIP): a proposal that allocates HBOT tokens for a developer bounty to improve a component in the Hummingbot codebase.</li> <li>Hummingbot Governance Proposal (HGP): a proposal used to conduct regular polls or one that allocates HBOT tokens for non-developer purposes.</li> </ul> <p>Each proposal type has different parameters:</p>    Proposal Type Pull Request Improvement Governance     Snapshot Space https://snapshot.org/#/hbot-prp.eth https://snapshot.org/#/hbot-ip.eth https://snapshot.org/#/hbot.eth   Vote Duration 7 days 7 days 7 days   Minimum HBOT Balance 1 10,000 50,000   Quorum Percentage 0.1% of HBOT circulating supply 3% of HBOT circulating supply 10% of HBOT circulating supply   Approval Threshold &gt;50% of tokens approved &gt;50% of tokens approved &gt;50% of tokens approved    <p>See HBOT for the current Quorum Percentage, which is based on the HBOT circulating supply.</p>","title":"Proposals"},{"location":"governance/proposals/#types-of-proposals","text":"","title":"Types of Proposals"},{"location":"governance/proposals/#pull-request-proposals","text":"<ul> <li>Pull Request Proposals (PRP) let HBOT holders approve pull requests for merge and inclusion into the Hummingbot codebase.</li> <li>Any wallet with a HBOT balance that meets Minimum HBOT Balance with can create a PRP at the Snapshot sub-space: https://snapshot.org/#/hbot-prp.eth.</li> <li>A PRP links to a valid pull request in the Hummingbot code repository. See Contribution Guidelines for more information about the process of creating a valid pull request.</li> <li>If the PRP is approved after the Vote Duration and the Quorum Percentage is met, then the Foundation will begin the process of reviewing and merging the pull request into the codebase.</li> <li>During the review process, the Foundation will test the submitted pull request to ensure that it fulfills its stated intention, conduct a technical code review, check for conflicts with other parts of the Hummingbot codebase and security issues. If the review passes, the pull request is merged into the codebase.</li> <li>If the PRP fails to meet the Approval Threshold, the Foundation will close the related pull request. However, the developer is free to create a new pull request and a new PRP at a subsequent date.</li> </ul> <p>To be considered valid, a PRP should contain the following fields (otherwise the Foundation may close it):</p> <ul> <li>Title: Starts with <code>PRP</code> followed by count and summary (i.e. <code>PRP-100: [summary]</code>)</li> <li>Github Link: Link to a Github pull request, which should contain a detailed explanation of the changes proposed</li> </ul>","title":"Pull Request Proposals"},{"location":"governance/proposals/#hummingbot-improvement-proposals","text":"<ul> <li>Hummingbot Improvement Proposals (HIP) let HBOT holders propose developer bounties for improvements or fixes to the Hummingbot codebase</li> <li>HIPs may name a specific developer, in which case the bounty is assigned to the developer if it is approved. If not, the Foundation will mark the bounty as Open and publicize it to the community.</li> <li>Any wallet with a HBOT balance that meets Minimum HBOT Balance with can create a HIP at the Snapshot sub-space: https://snapshot.org/#/hbot-hip.eth</li> <li>Before creating an HIP, we recommend creating a thread in Discord under the #proposal-discussions channel to gauge whether the requested HBOT amount is appropriate.</li> <li>If the HIP is approved after the Vote Duration and the Quorum Percentage is met, then the Foundation will create a Bounty and follow the assignation process.</li> </ul> <p>To be considered valid, a HIP should contain the following fields (otherwise the Foundation may close it):</p> <ul> <li>Title: Starts with <code>HIP</code> followed by count and summary (i.e. <code>HIP-100: [summary]</code>)</li> <li>Github Link: Link to a Github issue or pull request</li> <li>HBOT Allocation: Proposed HBOT bounty amount</li> <li>Developer (if assigned): Link to a developer's Github page or website</li> </ul>","title":"Hummingbot Improvement Proposals"},{"location":"governance/proposals/#hummingbot-governance-proposals","text":"<ul> <li>Hummingbot Governance Proposals (HGP) are generally used by the Foundation to conduct regular polls that allow HBOT holders to decide how engineering bandwidth should be allocated across the exchanges, strategies, and issues in the codebase.</li> <li>The Foundation also uses an HGP to elects its Board of Directors every year.</li> <li> <p>In addition, HGPs are used to propose HBOT allocations for non-development purposes, such as community incentives and liquidity mining programs.</p> </li> <li> <p>Any wallet with a HBOT balance that meets Minimum HBOT Balance with can create a HGP at the main Snapshot space: https://snapshot.org/#/hbot.eth.</p> </li> <li>Before creating an HGP, we recommend creating a thread in Discord under the #proposal-discussions channel to gauge whether the requested HBOT amount is appropriate.</li> </ul> <p>To be considered valid, an HGP should contain the following fields:</p> <ul> <li>Title: Starts with <code>HGP</code> followed by count and summary (i.e. <code>HGP-100: [summary]</code>)</li> <li>Description: Detailed explanation of the proposed initiative or program</li> <li>HBOT Allocation (if any): Proposed HBOT bounty amount</li> </ul>","title":"Hummingbot Governance Proposals"},{"location":"governance/releases/","text":"<p>Changes to the Hummingbot codebase are made through pull requests, which undergo a thorough engineering and QA review before they are merged into the codebase, coordinated by the Foundation.</p> <p>Only the following pull requests will be reviewed:</p> <ul> <li>Approved proposals: Approved PRPs and pull requests to claim bounties approved by HIPs</li> <li>Bug fixes: Fixes to outstanding bugs</li> </ul>","title":"Releases"},{"location":"governance/releases/#pull-request-status-board","text":"<p></p> <p>Hummingbot Foundation maintains a Github board in which you can see the status of all active pull requests, including ongoing PRPs, bug fixes, in review, etc.</p>","title":"Pull Request Status Board"},{"location":"governance/releases/#review-process","text":"<p>While approval via HBOT voting signals that the community wants the fix or improvement to be added into the codebase, pull requests go through a series of automated and manual checks to ensure that the new code: * Does not conflict or cause problems with other parts of the codebase * Does not introduce security risks * Does not contain merge conflicts * Contains manual tests, documentation, and meets code quality guidelines * Passes automated testing</p> <p>The Foundation Quality Assurance (QA) and Engineering team members coordinate this process, assisted by members of the community, such as Technical Review DAO.</p> <p>After a pull request has been approved, it will go through the following development cycle:</p>","title":"Review Process"},{"location":"governance/releases/#branches","text":"<p></p> <p>The Hummingbot code repository has three main branches related to the development cycle of each monthly release:</p>","title":"Branches"},{"location":"governance/releases/#development","text":"<p>All pull requests aiming to be included on the <code>master</code> branch must be targeted to the development branch. They are then promoted from <code>development</code> to <code>staging</code> before passing to <code>master</code>. Pull requests targeting the <code>development</code> branch will only be merged into <code>staging</code> only when there is an approved PRP related to it. </p>","title":"<code>development</code>"},{"location":"governance/releases/#staging","text":"<p><code>staging</code> is used by the Foundation QA team to conduct a thorough test all code changes before adding them to the <code>master</code> branch.</p>","title":"<code>staging</code>"},{"location":"governance/releases/#master","text":"<p><code>master</code> is the main release branch and contains the latest stable version of the Hummingbot software client and is released once per month.</p>","title":"<code>master</code>"},{"location":"governance/whitepaper/","text":"<p>Originally posted on December 17, 2021, last modified on August 17, 2022</p>","title":"Hummingbot Foundation Governance"},{"location":"governance/whitepaper/#overview","text":"<p>The Hummingbot Foundation (the \u201cFoundation\u201d) is a not-for-profit organization established in the Cayman Islands. The Foundation\u2019s mission is to democratize high-frequency trading by enabling decentralized maintenance and community governance over the open-source Hummingbot code repository.</p> <p>Hummingbot is software that helps you build and run automated trading strategies (\u201cbots\u201d), freely and publicly available under the Apache 2.0 open source license at https://github.com/hummingbot/hummingbot.</p> <p>Launched in April 2019, Hummingbot\u2019s latest v0.46.0 release spans 1.8 million lines of code across 12,625 commits from 112 unique code contributors, and it contains over 30 different exchange/blockchain connectors and 14 strategy templates. Approximately 1100 Github users have forked the Hummingbot codebase for their own use.</p>","title":"Overview"},{"location":"governance/whitepaper/#principles","text":"<p>Below are the core principles that underpin Hummingbot\u2019s development:</p> <ul> <li>Open Source: The Hummingbot codebase is publicly available, auditable, and free</li> <li>Modular: Hummingbot modules can be independently built, used, and maintained by community members</li> <li>Extensible: Users can use Hummingbot to create any automated trading strategy on every exchange and blockchain</li> <li>All Levels: Hummingbot is designed for use by individuals and professionals alike</li> </ul>","title":"Principles"},{"location":"governance/whitepaper/#ecosystem","text":"<p>The Hummingbot Foundation\u2019s primary role is to coordinate the ongoing maintenance and improvement of the open source Hummingbot codebase via a decentralized set of actors: Exchanges, Contributors, and Users.</p> <p></p> <ul> <li> <p>Exchanges are centralized or decentralized exchanges, blockchain protocols, other other organizations who enter into fee share and/or other referral agreements with Hummingbot Foundation based on user trading volume. See Certification for more information about the certification process.</p> </li> <li> <p>Contributors are individual developers and firms that build and maintain Hummingbot components. Contributors submit their work as pull requests to the official Github repository, and they are paid bounties when that work has been merged and included in an official release. Bounties may be funded by either Hummingbot Foundation or other community members.</p> </li> <li> <p>Users are individual and professional traders who install and use the Hummingbot open source software, released every month, to run trading bots. The volume they generate on partner exchanges sustains the operations of Hummingbot Foundation.</p> </li> </ul>","title":"Ecosystem"},{"location":"governance/whitepaper/#governance","text":"<p>The Foundation will administer a system that will empower holders of the Hummingbot Governance Token (\u201cHBOT\u201d) to govern Hummingbot. The sole use case for HBOT Tokens will be to empower holders to decide how the Hummingbot codebase changes over time through voting on proposals. </p> <p>All pull requests, or proposed code changes to the Github code repository, will need to be submitted as a Pull Request Proposal and be approved by HBOT holders in order to be merged into the codebase and included in an official release. </p> <p>In addition, HBOT holders will be able to create and vote on Improvement Proposals that direct the Foundation to implement architectural changes or prioritize specific enhancements or bug fixes. HBOT holders will also be able to create and vote on Governance Proposals that modify aspects of the governance system or allocate funding toward grant programs. Development work that results from an approved grant or Improvement Proposal also will need to undergo the pull request approval process in order to be merged into the development branch.</p> <p>Pull requests will be continually approved and merged through the month. Approximately once per month, the development branch of the codebase will be cloned onto the master branch of the codebase, which will subsequently be packaged into an official release in various formats for different operating systems.</p>","title":"Governance"},{"location":"governance/whitepaper/#foundation","text":"<p>In order to enable decentralized maintenance and democratic governance of the Hummingbot codebase, the Foundation plans to engage in the following functions:</p> <ul> <li>Own the Hummingbot software license and maintain commit access to the Hummingbot code repository;</li> <li>Enter into connector maintenance agreements and other partnerships with sponsors;</li> <li>Administer the HBOT governance system and process;</li> <li>Implement pull request, improvement, and governance proposals approved by HBOT holders;</li> <li>Publish official Hummingbot releases, update Hummingbot documentation, and support the user base; and</li> <li>Manage the treasury of HBOT token and other assets.</li> </ul>","title":"Foundation"},{"location":"governance/whitepaper/#sources-of-funds","text":"","title":"Sources of funds"},{"location":"governance/whitepaper/#exchange-fee-share-agreements","text":"<p>Hummingbot exchange connectors integrate with the API of a cryptocurrency exchange in order to expose standardized data format and endpoints to Hummingbot strategies (automated processes that interact with exchange APIs) that are created and configured by Users. Since exchange APIs vary widely, these connectors allow anyone to run bots across multiple exchanges without requiring engineering time on low-level exchange API integrations. </p> <p>Thus far, CoinAlpha has built many of the connectors in the Hummingbot codebase, and it has agreements and contracts with many of the connected exchanges that rebate a portion of fees incurred by Users, measured via unique identifiers in API requests executed with the Hummingbot software, to CoinAlpha. </p> <p>In the future, the Foundation plans to negotiate and enter into similar agreements with new exchanges for connectors. To support the Foundation and the Hummingbot community, CoinAlpha also plans to remit to the Foundation all income from its existing agreements, or assign them to the Foundation. The Foundation anticipates using this income to compensate community Maintainers for their services.</p>","title":"Exchange fee share agreements"},{"location":"governance/whitepaper/#administration-of-bounties-grants-and-hackathons","text":"<p>One of the Foundation\u2019s primary responsibilities will be to work with Sponsors seeking to fund specific work items such as new connectors, new strategies, or enhancements or fixes to existing components (bounties), as well as others who want to fund more work in more general areas such as strategies for new assets or exchange types (grants and hackathons).</p> <p>The Foundation may charge Sponsors a fee in order to administer the programs, liaise with Contributors, and review/merge the resulting development work.</p>","title":"Administration of bounties, grants, and hackathons"},{"location":"governance/whitepaper/#roles","text":"","title":"Roles"},{"location":"governance/whitepaper/#board-of-directors","text":"<p>Similar to the Linux and Apache Foundations, the Foundation\u2019s Board of Directors will provide oversight over the Foundation and its staff, as well as manage the HBOT multi-sig wallet. All transfers of HBOT from the wallet will be approved by a majority of the Board.</p> <p>The initial 5-person Board of Directors will be elected by HBOT holders. Board members will serve 12-month terms and will not receive any compensation for Board service. No more than a maximum of 2 Board members will be full-time employees and/or directors of the same outside entity, such as CoinAlpha.</p>","title":"Board of Directors"},{"location":"governance/whitepaper/#staff","text":"<p>The Foundation plans to employ a Chief Financial Officer (CFO) who will oversee the Foundation\u2019s budget and finances and a Chief Operating Officer (COO) who will represent the Foundation in executing partnerships with Sponsors and contracts with Maintainers.</p> <p>In addition, the Foundation plans to employ engineering, project management, community management, and quality assurance personnel who will handle the day-to-day operations of maintaining the Hummingbot codebase and the HBOT governance system, such as:</p> <ul> <li>Coordinating with Sponsors, Maintainers, and Contributors;</li> <li>Reviewing and process pull requests linked to approved Pull Request Proposals;</li> <li>Assigning approved Improvement Proposals to Maintainers;</li> <li>Moderating discussions on official community channels;</li> <li>Packaging monthly releases into Docker containers for various environments;</li> <li>Publishing metrics on volume, usage, and fees shared by connectors; and</li> <li>Maintaining and updating the Foundation website and documentation site.</li> </ul>","title":"Staff"},{"location":"governance/whitepaper/#governance_1","text":"<p>The HBOT governance system will allow holders to propose and approve changes to the Hummingbot codebase and the Hummingbot Foundation governance process.</p>","title":"Governance"},{"location":"governance/whitepaper/#process","text":"<p>The Hummingbot Foundation expects to use Snapshot for effecting HBOT governance. All proposals will be found on the official Hummingbot Snapshot hosted at https://snapshot.org/#/hbot.eth.</p>","title":"Process"},{"location":"governance/whitepaper/#proposal-types","text":"<p>There will initially be three types of proposals, and each type will have different initial governance parameters:</p>    Proposal Type Pull Request Improvement Governance     Minimum HBOT Balance 1 10,000 50,000   Quorum Percentage 1% of HBOT circulating supply 3% of HBOT circulating supply 10% of HBOT circulating supply   Approval Threshold &gt;50% of tokens voted &gt;50% of tokens voted &gt;50% of tokens voted   Vote Duration 7 days 7 days 7 days    <p>HBOT token holdings entitles the holder to an equivalent amount of votes, including any fractional token amounts. </p>","title":"Proposal types"},{"location":"governance/whitepaper/#pull-request-proposal-prp","text":"<p>A Pull Request Proposal (PRP) will be a proposal linked to an open pull request in the Hummingbot code repository. Each PRP will go through the process below:</p> <ol> <li>A Github pull request is created by any community member; </li> <li>Any HBOT holder with at least 1 HBOT voting power creates a PRP in Snapshot linked to the pull request;</li> <li>The Foundation performs a preliminary review (e.g., for sufficient documentation, adequate unit tests, and the inclusion of developer contact information) and adds the results to the issue;</li> <li>The community has 7 days to discuss, review, and vote on the PRP;</li> <li>If at least 1% of the total circulating supply of HBOT tokens have voted (either directly or via delegation) and at least 50% of votes approve, the Foundation labels the Github pull request as \u201capproved\u201d;</li> <li>The Foundation performs a final review and merges the pull request into the development branch; and</li> <li>If the pull request is linked to a bounty or grants program, the Foundation directs the sponsor to release funds to the developer and invoices the sponsor for administration fees.</li> </ol> <p>During either the preliminary or the final review, the Foundation may unilaterally reject a proposal (e.g., to prevent a security vulnerability or merge conflict) as long as it communicates the rationale behind the decision to the community. It is anticipated that such authority would be used sparingly and in legitimate circumstances. If the community disagrees with the Foundation\u2019s decision to reject a proposal, the community has the power to replace the Foundation\u2019s directors with more like-minded directors to ensure that the community\u2019s directives are followed. </p>","title":"Pull Request Proposal (PRP)"},{"location":"governance/whitepaper/#improvement-proposal-ip","text":"<p>An Improvement Proposal (IP) will be a proposal linked to an issue in the Hummingbot Github repository that specifies a proposed improvement to a component of the Hummingbot codebase. While there will be no formal restriction on what types of Improvement Proposals can be created, the Foundation expects that the community will approve proposals that benefit the Hummingbot user base as a whole, either by fixing a critical bug, adding a key new feature, or making a necessary refactor of the architecture.</p> <p>Each IP will go through the process below:</p> <ol> <li>A Github issue is created by any community member; </li> <li>Any HBOT holder with at least 10,000 HBOT voting power creates an IP in Snapshot linked to the issue;</li> <li>The community has 7 days to discuss, review, and vote on the IP;</li> <li>If at least 3% of the total circulating supply of HBOT tokens have voted (either directly or via delegation) and at least 50% of votes approve, Foundation labels Github issue as \u201capproved\u201d;</li> <li>The Foundation assigns the issue to the Maintainer of the affected component, or if there is no Maintainer for the affected component, assigns the issue to a Certified Maintainer or creates a bounty funded by HBOT tokens to incentivize Contributors; and</li> <li>After the Maintainer or Contributor completes the development work to resolve the IP, they submit a pull request that goes through the Pull Request Proposal process outlined above.</li> </ol>","title":"Improvement Proposal (IP)"},{"location":"governance/whitepaper/#governance-proposal-gp","text":"<p>A Governance Proposal (GP) will be a proposal linked to an issue in the Hummingbot Github repository that specifies either a proposed modification to the Foundation governance system, or a proposed distribution of HBOT tokens from the treasury for a community activity such as a grant. </p> <p>Each GP will go through the process below:</p> <ol> <li>A Github issue is created by any community member; </li> <li>Any HBOT holder with at least 50,000 HBOT voting power creates a GP in Snapshot linked to the issue; The community has 7 days to discuss, review, and vote on the GP;</li> <li>If at least 10% of the total circulating supply of HBOT tokens have voted (either directly or via delegation) and at least 66 \u2154% of votes approve, the Foundation labels Github issue as \u201capproved\u201d; and</li> <li>The Foundation implements the proposed change or initiative, after which, the Github issue is closed.</li> </ol> <p>Aspects of the Foundation governance system that Governance Proposals may modify will include approval thresholds, quorum thresholds, board of director elections, and Maintainer elections. GPs may not modify the Foundation bylaws, HBOT token distribution and issuance mechanics, or HBOT total supply.</p>","title":"Governance Proposal (GP)"},{"location":"governance/whitepaper/#maintainers","text":"<p>Hummingbot is a constantly evolving codebase that is continually improved to accommodate new exchanges, assets, and strategies, as well as to improve performance and reliability. To ensure that different components in the codebase can be properly maintained, the Foundation plans to enter into agreements with third-party individuals and firms to act as Maintainers for specific components. </p> <p>While Maintainer agreements will likely differ based on component type, the responsibilities of each Maintainer will be similar. Maintainers will be responsible for proactively fixing bugs, updating their component for any API changes, and implementing approved Improvement Proposals related to their component. For each connector and strategy, the Maintainer and their contact information will be published in the Hummingbot documentation.</p> <p>Maintainers initially will be set by the Foundation for specified terms and will be re-elected by HBOT voting afterwards. In addition, HBOT holders will be able to submit Governance Proposals at any time to direct the Foundation to re-assign or remove a Maintainer.</p>","title":"Maintainers"},{"location":"governance/whitepaper/#connectors","text":"<p>Exchange connectors are packages of code that link Hummingbot's trading engine with live information from different cryptocurrency exchanges. They interact with a given exchange's API, such as by gathering order book data and sending and cancelling trades. </p> <p>Similarly, blockchain connectors link Hummingbot to a given blockchain protocol and expose standardized endpoints that enable Users\u2019 strategies to interact with wallets, nodes, and smart contracts on that protocol.</p> <p>Each connector has an assigned Maintainer listed on its respective Hummingbot documentation page, and all newly added connectors will have an assigned Maintainer. Certain connectors will have maintenance agreements that rebate a portion of fees incurred or fixed maintenance payments to the Foundation, and the Foundation may share these fees with the Maintainer. </p>","title":"Connectors"},{"location":"governance/whitepaper/#strategies","text":"<p>Strategies are miniature computer programs that execute orders and trade on one or more exchanges. Strategies use the standard functions exposed by each connector so that strategy developers can focus on trading logic rather than data connectivity.</p> <p>Certain strategies will have a Maintainer responsible for fixing bugs and implementing Improvement Proposals related to the strategy. These strategy Maintainers will be listed on a strategy\u2019s respective Hummingbot documentation page. Strategy Maintainers will generally not be compensated, either because the strategy will be community-submitted or because the Maintainer will derive other benefits from performing maintenance. For instance, CoinAlpha may be the Maintainer for certain Hummingbot strategies because Users use them to earn rewards on CoinAlpha\u2019s Miner platform.</p>","title":"Strategies"},{"location":"governance/whitepaper/#certified-maintainers","text":"<p>To ensure maintenance and upkeep of the entire codebase, the Foundation may enter into master services agreements (MSA) with certain third-party individuals and firms that will be known as \u201cCertified Maintainers.\u201d Each MSA will set a fixed hourly rate for two labor categories: Development (DEV) and Quality Assurance (QA). The Foundation expects to publish a list of Certified Maintainers on its website along with these hourly rates. </p> <p>Certified Maintainers will provide engineering services to the Foundation on an as-needed basis. For approved Improvement Proposals for components that do not have a dedicated Maintainer, the Foundation may elect to assign the related Github issue to a Certified Maintainer. </p> <p>In order to be compensated for their work on an Improvement Proposal, Certified Maintainers will need to submit a pull request that is approved via the PRP process. For transparency, the Foundation will require that Certified Maintainers specify in the pull request the number of DEV and QA hours worked along with their total compensation requested from the Foundation.</p>","title":"Certified Maintainers"},{"location":"governance/whitepaper/#bounties-hackathons-and-grants","text":"","title":"Bounties, hackathons and grants"},{"location":"governance/whitepaper/#bounties-and-hackathons","text":"<p>One of the main activities of the Foundation will be enabling third party Sponsors to fund bounties and hackathons that compensate developers for submitting pull requests, such as feature enhancements, bug fixes, and new connectors/strategies, to the open source Hummingbot codebase. Sponsors are expected to comprise exchanges, blockchain protocols, trading firms, and other institutions who use Hummingbot or benefit from usage on their platforms.</p> <p>Pull requests linked to bounties and hackathons will go through the same Pull Request Process as other pull requests. The Foundation will charge a fee to Sponsors to administer these pull requests. </p>","title":"Bounties and hackathons"},{"location":"governance/whitepaper/#grants","text":"<p>One of the primary ways that Foundation will distribute tokens to Hummingbot Users is through grant programs that reward developers to make contributions to the codebase. These grant programs will aim to incentivize contributions similar to the launch contributions described in the Hummingbot Foundation announcement, which include a new strategy template that enables Users to run triangular arbitrage, a web-based graphical interface for the Hummingbot client, and webhooks that enable TradingView integration.</p> <p>The Foundation expects that a significant portion of the HBOT tokens that will be allocated over the next 4 years (36% of total tokens) will be allocated toward grants to facilitate similar contributions. In 2022, the Foundation will begin accepting applications for HBOT token grants. Once accepted, developers will need to issue a pull request and have it merged via the governance system in order to receive grant funds.</p>","title":"Grants"},{"location":"governance/whitepaper/#conclusion","text":"<p>The initial governance framework described above is intended to lay the groundwork for a viable governance system that will enable the Hummingbot community to decide how the Hummingbot codebase evolves, while allowing developers to maintain and contribute to the codebase. The Foundation hopes and expects that the community will improve and expand upon this initial governance framework as the community sees fit in order to meet the needs of a growing, diversified user base.</p>","title":"Conclusion"},{"location":"installation/","text":"<p>Hummingbot is a local software client that helps you run trading strategies that automate the execution of orders and trades on various cryptocurrency exchanges and protocols.</p>","title":"Installation"},{"location":"installation/#releases","text":"<p>Hummingbot's code is publicly hosted at https://github.com/hummingbot/hummingbot, and the <code>development</code> branch is continually updated.</p> <p>Approximately once a month, we publish an official release of Hummingbot onto the <code>master</code> branch. See Releases.</p>","title":"Releases"},{"location":"installation/#installation-options","text":"","title":"Installation options"},{"location":"installation/#test-drive","text":"<p>Try out Hummingbot in your web browser without installing anything! Visit the Test Drive page on our website.</p>","title":"\ud83c\udf0e Test Drive"},{"location":"installation/#docker","text":"<p>Our DockerHub publishes Docker images for the <code>master</code> (latest) and <code>development</code> builds of Hummingbot starting with version 1.5.0. For previous versions you may download the docker images from CoinAlpha's Dockerhub </p> <p>We recommend this path for users who run Hummingbot on Linux, in the cloud, and/or multiple bots.</p> <p>Read the Docker installation guide: Install Hummingbot on Docker</p>","title":"\ud83d\udc33 Docker"},{"location":"installation/#source","text":"<p>Install Hummingbot from source, including all dependencies.</p> <p>We recommend this path for developers who want to customize Hummingbot's behavior or to build new connectors and strategies.</p> <p>Read the source installation guide: Install Hummingbot from Source</p>","title":"\ud83d\udee0\ufe0f Source"},{"location":"installation/#raspberry-pi","text":"<p>Hummingbot doesn't require much power, so some users have run successfully run multiple instances on a single Raspberry Pi. We maintain an experimental build that shows users how to do this.</p> <p>Install on Raspberry Pi</p>","title":"\ud83c\udf53 Raspberry Pi"},{"location":"installation/#system-requirements","text":"<p>Hummingbot has been successfully tested with the following specifications:</p>    Resource Requirement     Operating System Linux: Ubuntu 18.04 or later (recommended) *Other Linux installations: Debian GNU/Linux 9, CentOS 7, Amazon Linux 2 AMI    MacOS: macOS 10.12.6 (Sierra) or later    Windows: Windows 10 or later   Memory/RAM 1 GB one instance +250 MB per additional instance   Storage Install using Docker: 5 GB per instance    Install from source: 3 GB per instance   Network A reliable internet connection is critical to keeping Hummingbot connected to exchanges.","title":"System requirements"},{"location":"installation/#videos-and-guides","text":"<p> Test Drive walkthrough</p> <p> Installation Guides playlist</p>","title":"\ud83d\udcfa Videos and Guides"},{"location":"installation/cloud-servers/","text":"","title":"Run in the Cloud"},{"location":"installation/cloud-servers/#requirements","text":"<p>For experienced and technical users, we recommend setting up a cloud instance and installing the Docker version or from source. This enables Hummingbot to run 24/7.</p> <p>Hummingot Docker instances takes up around 500 MB of storage space and 4 GB for Hummingbot Docker image. We have ested to install and run Hummingbot on the following machine types:</p>    Provider Instance Type Instance Details     Google Cloud Platform g1-small 1 vCPU, 1.7 GB memory   Amazon Web Services t2.small 1 vCPU, 2 GB memory   Microsoft Azure Standard_D2s_v3 2 vCPU, 8 GB memory    <p>These instances are pre-loaded with system files that takes up around 1.2 GB so we recommend having at least 8 GB of storage space in your cloud server.</p>","title":"Requirements"},{"location":"installation/cloud-servers/#videos-and-guides","text":"<p> AWS Deployment for Hummingbot</p> <ul> <li>Hummingbot on different cloud providers</li> <li>AWS - Connect to Your Amazon EC2 Instance</li> <li>AWS - Connecting to your Linux instance from Windows using PuTTY</li> <li>Azure - Connect to a Linux-based VM</li> </ul>","title":"\ud83d\udcfa Videos and Guides"},{"location":"installation/docker/","text":"<p>The Hummingbot DockerHub publishes Docker images for the <code>master</code> (latest) and <code>development</code> builds of Hummingbot starting with version 1.5.0. For previous versions you may download the docker images from CoinAlpha's Dockerhub </p> <p>You can install Docker and Hummingbot by selecting the following options below:</p> <ul> <li>Scripts: download and use automated install scripts</li> <li>Manual: run install commands manually</li> </ul>","title":"Install Hummingbot with Docker"},{"location":"installation/docker/#linux","text":"<p>Supported versions: Ubuntu 16.04/18.04, Debian 10/11</p>","title":"Linux"},{"location":"installation/docker/#install-docker","text":"ScriptsManual   <pre><code># 1) Download Docker install script\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/install-docker/install-docker-ubuntu.sh\n\n# 2) Enable script permissions\nchmod a+x install-docker-ubuntu.sh\n\n# 3) Run installation\n./install-docker-ubuntu.sh\n</code></pre>   <pre><code># 1) Update Ubuntu's database of software\nsudo apt-get update\n\n# 2) Install tmux\nsudo apt-get install -y tmux\n\n# 3) Install Docker\nsudo apt install -y docker.io\n\n# 4) Start and Automate Docker\nsudo systemctl start docker &amp;&amp; sudo systemctl enable docker\n\n# 5) Change permissions for docker (optional)\n# Allow docker commands without requiring sudo prefix\nsudo usermod -a -G docker $USER\n\n# 6) Close terminal\nexit\n</code></pre>     <p>Warning</p> <p>Please restart terminal \u2014 close and restart your terminal window to enable the correct permissions for <code>docker</code> command before proceeding to next step.</p>","title":"Install Docker"},{"location":"installation/docker/#install-hummingbot","text":"ScriptsManual   <pre><code># 1) Download Hummingbot install, start, and update script\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/create.sh\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/start.sh\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/update.sh\n\n# 2) Enable script permissions\nchmod a+x *.sh\n\n# 3) Create a hummingbot instance\n./create.sh\n</code></pre>   <pre><code># 1) Create folder for your new instance\nmkdir hummingbot_files\n\n# 2) Create folders for logs, config files and database file\nmkdir hummingbot_files/hummingbot_conf\nmkdir hummingbot_files/hummingbot_conf/connectors\nmkdir hummingbot_files/hummingbot_conf/strategies\nmkdir hummingbot_files/hummingbot_certs\nmkdir hummingbot_files/hummingbot_logs\nmkdir hummingbot_files/hummingbot_data\nmkdir hummingbot_files/hummingbot_scripts\nmkdir hummingbot_files/hummingbot_pmm_scripts\nmkdir hummingbot_files/gateway_conf\nmkdir hummingbot_files/gateway_logs\n\n# 3) Launch a new instance of hummingbot\ndocker run -it \\\n--network host \\\n--name hummingbot-instance \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_conf,destination=/conf/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_logs,destination=/logs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_data,destination=/data/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_pmm_scripts,destination=/pmm_scripts/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_scripts,destination=/scripts/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_certs,destination=/home/hummingbot/.hummingbot-gateway/certs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/gateway_conf,destination=/gateway-conf/\" \\\nhummingbot/hummingbot:latest\n</code></pre>","title":"Install Hummingbot"},{"location":"installation/docker/#macos","text":"<p>You can install Docker by downloading an installer from the official page. After you have downloaded and installed Docker, restart your system if necessary.</p> ScriptsManual   <pre><code># 1) Download Hummingbot install, start, and update script\ncurl https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/create.sh -o create.sh\ncurl https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/start.sh -o start.sh\ncurl https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/update.sh -o update.sh\n\n# 2) Enable script permissions\nchmod a+x *.sh\n\n# 3) Create a hummingbot instance\n./create.sh\n</code></pre>   <pre><code># 1) Create a folder for your new instance\nmkdir hummingbot_files\n\n# 2) Create folders for logs, config files and database file\nmkdir hummingbot_files/hummingbot_conf\nmkdir hummingbot_files/hummingbot_logs\nmkdir hummingbot_files/hummingbot_data\nmkdir hummingbot_files/hummingbot_scripts\n\n# 3) Launch a new instance of hummingbot\ndocker run -it \\\n--network host \\\n--name hummingbot-instance \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_conf,destination=/conf/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_logs,destination=/logs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_data,destination=/data/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_scripts,destination=/scripts/\" \\\nhummingbot/hummingbot:latest\n</code></pre>","title":"MacOS"},{"location":"installation/docker/#windows","text":"<p>The Hummingbot codebase is designed and optimized for UNIX-based systems such as macOS and Linux. For Windows users, we recommend running Hummingbot in Windows Subsystem for Linux (WSL).</p> <p>WSL lets developers run a Linux environment directly on Windows, unmodified, without the overhead of a traditional virtual machine or dualboot setup. With WSL, Windows 10/11 users are able to run a Linux Virtual Machine without performance loss, and without the need of dual boot. See here for more detail about WSL.</p>","title":"Windows"},{"location":"installation/docker/#install-wsl","text":"<p>1. Open Powershell as <code>admin</code></p> <p>Search for \"Powershell\" on the start menu, right-click and \"run as admin\"</p> <p></p> <p>2. Run the Install WSL commmand</p> <pre><code>wsl --install\n</code></pre> <p>By default, WSL uses the Ubuntu distribution of Linux, which is compatible for Hummingbot.</p> <p>3. Start WSL</p> <p>After the installation, just type <code>wsl</code> on the Powershell or on the Command prompt.</p> <p>Note that the first time WSL is executed, you will be asked to create a new default username/password.</p> <p>4. Install Ubuntu from Windows Store</p> <p>Alternatively, after WSL is installed, search for Ubuntu in the Windows Store and install it as an app in the Start menu. That way, you don't have to run Powershell every time you use Hummingbot.</p> <p></p>","title":"Install WSL"},{"location":"installation/docker/#install-docker-in-wsl","text":"<p>5. Install Docker</p> <p>With WSL installed, you now have a Linux Virtual Machine running under Windows.</p> <p></p> <p>Follow the instructions below to complete the Docker installation process.</p> <pre><code># 1) Remove older / currently installed versions of Docker first \nsudo apt-get remove docker docker-engine docker.io containerd runc\n\n# 2) Update the package index\nsudo apt-get update &amp;&amp; sudo apt-get upgrade -y\n\n# 3) Install necessary packages\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release\n\n# 4) Add Docker's official GPG key \ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\n# 5) Setup the repository\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable\"\n\n# 6) Install Docker\nsudo apt update &amp;&amp; sudo apt-get install docker-ce\n\n# 7) Start the Docker service\nsudo service docker start \n\n# 8) Allow docker commands without requiring sudo prefix. If you are running as root replace $USER with your username\nsudo usermod -aG docker $USER\n\n# 9) Restart the terminal first before running the create.sh script (Important!)\nexit\n</code></pre>  <p>Warning</p> <p>Please restart terminal \u2014 close and restart your terminal window to enable the correct permissions for <code>docker</code> command before proceeding to next step.</p>","title":"Install Docker in WSL"},{"location":"installation/docker/#install-hummingbot_1","text":"<p>6. Download the scripts or use the manual method</p> ScriptsManual   <pre><code># 1) Download Hummingbot install, start, and update script\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/create.sh\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/start.sh\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/update.sh\n\n# 2) Enable script permissions\nchmod a+x *.sh\n\n# 3) Create a hummingbot instance\n./create.sh\n</code></pre>   <pre><code># 1) Create folder for your new instance\nmkdir hummingbot_files\n\n# 2) Create folders for logs, config files and database file\nmkdir hummingbot_files/hummingbot_conf\nmkdir hummingbot_files/hummingbot_logs\nmkdir hummingbot_files/hummingbot_data\nmkdir hummingbot_files/hummingbot_scripts\n\n# 3) Launch a new instance of hummingbot\ndocker run -it \\\n--network host \\\n--name hummingbot-instance \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_conf,destination=/conf/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_logs,destination=/logs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_data,destination=/data/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_scripts,destination=/scripts/\" \\\nhummingbot/hummingbot:latest\n</code></pre>","title":"Install Hummingbot"},{"location":"installation/docker/#videos-and-guides","text":"<p> Using Docker Compose to launch multiple Hummingbots</p>","title":"\ud83d\udcfa Videos and Guides"},{"location":"installation/multiple-bots/","text":"","title":"Run Multiple Bots"},{"location":"installation/multiple-bots/#orchestration-module","text":"<p>TBD.</p>","title":"Orchestration module"},{"location":"installation/multiple-bots/#multiple-bots-via-docker","text":"<p>See the Deploy Examples repo for examples of how to deploy Hummingbot in various configurations.</p>","title":"Multiple bots via Docker"},{"location":"installation/multiple-bots/#multiple-bots-from-source","text":"<p>Tip</p> <p>We recommend that users download and install Hummingbot separately for each instance they wish to run.</p>  <p>The below command downloads the Hummingbot repository from GitHub, where <code>$FOLDER_NAME</code> is the name of the separate directory.</p> <pre><code>cd ~\ngit clone https://github.com/hummingbot/hummingbot.git $FOLDER_NAME\n</code></pre> <p>Do another install in the new directory.</p> <pre><code>cd $FOLDER_NAME\n./install\nconda activate hummingbot\n./compile\n</code></pre>","title":"Multiple bots from source"},{"location":"installation/multiple-bots/#keep-bots-running-in-the-background","text":"","title":"Keep bots running in the background"},{"location":"installation/multiple-bots/#docker","text":"<p>Press keys <code>Ctrl+P</code> then <code>Ctrl+Q</code> in sequence to detach from Docker, i.e., return to the command line. This exits out of Hummingbot without shutting down the container instance.</p> <p>Restart or connect to a running instance using the <code>./start.sh</code> script or use <code>docker attach [container_name]</code> to a already running bot in the background.</p>","title":"Docker"},{"location":"installation/multiple-bots/#from-source","text":"<p>Use either <code>tmux</code> or <code>screen</code> to run multiple bots installed from source. Check out these external links how to use them.</p> <ul> <li>Getting started with Tmux</li> <li>How to use Linux Screen</li> </ul> <p>When using screen to run an instance in the background, run either of the following commands: <code>screen</code> or <code>screen -S $NAME</code>, where <code>$NAME</code> is what you wish to call this background instance. Use the latter to be more explicit if you want to run multiple bots.</p> <p>Navigate to the folder where your separate Hummingbot is installed, then start the bot like normal.</p> <pre><code>conda activate hummingbot\nbin/hummingbot.py\n</code></pre> <p>To exit the screen (detach), press <code>Ctrl+A</code> then <code>Ctrl+D</code> in sequence.</p> <p>To list all running instances, use <code>screen -ls</code>.</p> <p></p> <p>Log back into the screen by using either <code>screen</code> or <code>screen -r $NAME</code> to open a specific instance.</p> <p>   Credits to discord user <code>@matha</code> for this question and <code>@pfj</code> for the   solution. </p>","title":"From source"},{"location":"installation/multiple-bots/#videos-and-guides","text":"<p> Using Docker Compose to launch multiple Hummingbots</p> <p> Managing Bot Cycles with Wojak</p>","title":"\ud83d\udcfa Videos and Guides"},{"location":"installation/raspberry-pi/","text":"","title":"Raspberry Pi"},{"location":"installation/raspberry-pi/#install-via-docker","text":"","title":"Install via Docker"},{"location":"installation/raspberry-pi/#prerequisites","text":"<p>Note</p> <p>This installation method is currently under testing and awaiting feedback from users. Should you run into problems or have found a fix to solve errors along the way, feel free to reach out through our Discord support channel.</p>  <p>Install Docker and change permissions</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\nsudo usermod -a -G docker $USER\n</code></pre> <p>Start and automate Docker</p> <pre><code>sudo systemctl start docker &amp;&amp; sudo systemctl enable docker\n</code></pre> <p>Exit terminal/shell to refresh shell</p> <pre><code>Exit\n</code></pre>  <p>Warning</p> <p>Restart terminal \u2014 close and restart your terminal window to enable the correct permissions for <code>docker</code> command before proceeding.</p>  <p>Install Hummingbot</p> <p>The Latest ARM version can be found here (filter list by \"arm\") - Hummingbot DockerHub</p> <p>You can install Hummingbot with either of the following options:</p> <ul> <li>Scripts: download and use automated install scripts</li> <li>Manual: run install commands manually</li> </ul> ScriptsManual   <pre><code># 1) Download Hummingbot install, start, and update script\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/development/installation/docker-commands/create.sh\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/development/installation/docker-commands/start.sh\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/development/installation/docker-commands/update.sh\n\n# 2) Enable script permissions\nchmod a+x *.sh\n\n# 3) Create a hummingbot instance\n./create.sh\n\n# 4) Pull Hummingbot ARM image when asked what version to use\nEnter Hummingbot version: [ latest/development ] ( default = 'latest' )\n&gt;&gt; version-1.8.0-arm_beta\n</code></pre>   <pre><code># 1) Create folder for your new instance\nmkdir hummingbot_files\n\n# 2) Create folders for logs, config files and database file\nmkdir hummingbot_files/hummingbot_conf\nmkdir hummingbot_files/hummingbot_logs\nmkdir hummingbot_files/hummingbot_data\nmkdir hummingbot_files/hummingbot_scripts\n\n# 3) Launch a new instance of hummingbot\ndocker run -it \\\n--network host \\\n--name hummingbot-instance \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_conf,destination=/conf/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_logs,destination=/logs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_data,destination=/data/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_scripts,destination=/scripts/\" \\\nhummingbot/hummingbot:version-1.8.0-arm_beta\n</code></pre>","title":"Prerequisites"},{"location":"installation/raspberry-pi/#install-from-source","text":"<p>This guide walks you through how to prepare your development environment and get started developing for Hummingbot.</p> <p>Running Hummingbot on a Raspberry Pi has the same main benefit of running it on a cloud server: having a dedicated machine for Hummingbot. Raspberry Pi\u2019s are relatively low cost, easy to set up, and, of course, don\u2019t have the monthly charges associated with a cloud provider.</p> <p></p> <p>Read through our full blog post about Deploying Hummingbot on a Raspberry Pi.</p> <p>The only way to currently install Hummingbot on a Raspberry Pi is by downloading the source files from GitHub and compiling and running from source. This adds a few more steps than downloading binaries or running from Docker, but below we have provided a step-by-step guide to walk you through the process.</p>","title":"Install from source"},{"location":"installation/raspberry-pi/#prerequisites_1","text":"<p>Install 64-bit Raspberry Pi OS</p> <p>To run Hummingbot on a Raspberry Pi, a 64-bit OS is required. Raspberry Pi now has an official 64-bit version of the Raspberry Pi OS. You can download the 64-bit OS from the Raspberry Pi website.</p> <p>Load the image file to your Raspberry Pi\u2019s SD card</p> <p>Raspberry Pi has an easy to follow guide with alternatives on how to load the SD card with a Raspberry Pi OS from different operating systems.</p> <p>Boot your Raspberry Pi</p> <p>Insert your SD card into the Raspberry Pi and plug in the power source. From there, the first launch options will be prompted.</p> <p>Install Hummingbot dependencies</p> <p>Open the Raspberry Pi terminal. In the top left corner of the desktop, there is a shortcut that opens the terminal.</p> <pre><code># Install Miniforge, Python and update alternatives\nwget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh\nsh Miniforge3-Linux-aarch64.sh\nsudo apt-get install python3.7\nsudo update-alternatives --install /usr/bin/python python /usr/bin/python3 1\n</code></pre> <p>Logout and login again to enable <code>conda</code>, this will make the <code>conda</code> command available in shell / terminal.</p> <p>Clone project and install dependencies</p> <pre><code># Clone the Hummingbot repo from Github\ngit clone https://github.com/hummingbot/hummingbot.git\n\n# Install the pip dependencies\ncd hummingbot\n./install\nconda activate hummingbot\n</code></pre> <p>Compile and run Hummingbot</p> <pre><code># Clean your Hummingbot directory and compile\n./clean &amp;&amp; ./compile\n\n# Run Hummingbot\nbin/hummingbot.py\n</code></pre>","title":"Prerequisites"},{"location":"installation/raspberry-pi/#create-hummingbot-arm-image-for-docker","text":"<p>This guide would help you build your own Hummingbot ARM image when there is a new release. Please be advised that for every new release, you would need to install from source first and follow the steps provided in order to create an image that you can use for your RaspberryPi docker.</p> <ol> <li>Go to your source directory and run the command below</li> </ol> <pre><code># Set a name of your image on insert_name\ndocker build -t coinalpha/hummingbot:insert_name -f Dockerfile.arm .\n</code></pre> <p>On this sample, we set <code>v036</code> for the name of the image. This is needed when you run <code>./create.sh</code> command </p>  <p>Warning</p> <p>Building the Hummingbot ARM image from source would normally take 45 minutes or more</p>","title":"Create Hummingbot ARM image for Docker"},{"location":"installation/raspberry-pi/#controlling-remotely-using-vnc-viewer","text":"<p>SSH and VNC features are natively built into the Raspberry Pi and can easily be turned on in the Raspberry Pi configurations settings. By turning these on, you can access the Raspberry Pi from another computer by:</p> <ol> <li>Using terminal to SSH, similar to how you would access a cloud server</li> <li>Using VNC to enable remote desktop access to the Raspberry Pi GUI.</li> </ol> <p>This is very convenient; after initial setup of the Raspberry Pi, you can simply unplug the monitor, keyboard and mouse, and just set the Raspberry Pi itself aside and just access it remotely going forward.</p> <p></p>","title":"Controlling remotely using VNC Viewer"},{"location":"installation/raspberry-pi/#enable-ssh-and-vnc-on-your-raspberry-pi","text":"<ul> <li>Option 1: Terminal using raspi-config</li> </ul> <pre><code>sudo raspi-config\n</code></pre> <p>Under Interfacing Options, enable SSH and VNC.</p> <ul> <li>Option 2: Access in Raspberry Pi Configuration</li> </ul> <p>Select the menu in the top left corner of the screen then go to Preferences &gt; Raspberry Pi configuration &gt; Interfaces from there you will see options to enable SSH and VNC.</p> <p></p>  <p>Tip</p> <p>Set a default screen resolution in <code>raspi-config</code> select: <code>7 Advanced Options</code> &gt; <code>A5 Resolution</code> to enable VNC access to the GUI whenever you boot the Raspberry Pi without a connected monitor. For troubleshooting please visit this link.</p>  <p>Setting a default resolution will avoid the following error:</p> <p></p>","title":"Enable SSH and VNC on your Raspberry Pi"},{"location":"installation/raspberry-pi/#get-your-raspberry-pis-ip-address","text":"<p>Type <code>ifconfig</code> to get the IP address of your Raspberry Pi to enter into your VNC Viewer. For SSH, you can run <code>ssh pi@[ipaddress]</code>. The IP address is the <code>inet</code> address which is not the localhost IP address 127.0.0.1:</p> <p></p>","title":"Get your Raspberry Pi\u2019s IP address"},{"location":"installation/source/","text":"<p>Re-compiling files</p> <p>If you make changes to the code, make sure to re-compile the code with <code>./compile</code> to ensure that any changes to Cython files are compiled before running Hummingbot</p>  <p>You can install Source and Hummingbot by selecting the following options below:</p> <ul> <li>Scripts: download and use automated install scripts</li> <li>Manual: run install commands manually</li> </ul>","title":"Install Hummingbot from Source"},{"location":"installation/source/#linuxubuntu","text":"<p>Supported versions: 18.04 LTS, 19.04 LTS, 20.04</p> ScriptsManual   <pre><code># 1) Download install script\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/development/installation/install-from-source/install-source-ubuntu.sh\n\n# 2) Enable script permissions\nchmod a+x install-source-ubuntu.sh\n\n# 3) Run installation\n./install-source-ubuntu.sh\n</code></pre>   <pre><code># 1) Install dependencies\nsudo apt-get update\nsudo apt-get install -y build-essential\n\n# 2) Install Miniconda3\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nsh Miniconda3-latest-Linux-x86_64.sh\n\n# 3) Reload .bashrc to register \"conda\" command\nexec bash\n\n# 4) Clone Hummingbot\ngit clone https://github.com/hummingbot/hummingbot.git\n\n# 5) Install Hummingbot\ncd hummingbot &amp;&amp; ./clean &amp;&amp; ./install\n\n# 6) Activate environment and compile code\nconda activate hummingbot &amp;&amp; ./compile\n\n# 7) Start Hummingbot\nbin/hummingbot.py\n</code></pre>","title":"Linux/Ubuntu"},{"location":"installation/source/#macos","text":"","title":"MacOS"},{"location":"installation/source/#prerequisites","text":"","title":"Prerequisites"},{"location":"installation/source/#xcode-command-line-tools","text":"<p>Running Hummingbot on macOS requires Xcode and Xcode command line tools.</p> <pre><code>xcode-select --install\n</code></pre>","title":"Xcode command line tools"},{"location":"installation/source/#anaconda","text":"<p>Hummingbot requires Python 3 and other Python libraries. To manage these dependencies, Hummingbot uses Anaconda, an open-source environment, and package manager for Python that is the current industry standard for data scientists and data engineers.</p> <p>To install Anaconda, go to the Anaconda site and download and install the latest Python installer applicable for your architecture (M1 / x86-64). Both the graphical installer (.pkg) and the command line installer (.sh) will work.</p>  <p>Warning</p> <p>If you use ZSH or another Unix shell, copy the code snippet below to your <code>.zshrc</code> or similar file. By default, Anaconda only adds it to your <code>.bash_profile</code> file. This makes the <code>conda</code> command available in your root path.</p> <p>We also do NOT recommend installing <code>conda</code> through <code>Homebrew</code> as this will cause issues during installation. Downloading directly from the Anaconda website should be sufficient. </p>  <p>Open a terminal window and run <code>nano</code> to edit the <code>.zshrc</code> file</p> <pre><code>nano .zshrc\n</code></pre> <p>Copy and paste the following code below:</p> <pre><code>__conda_setup=\"$(CONDA_REPORT_ERRORS=false '/anaconda3/bin/conda' shell.bash hook 2&gt; /dev/null)\"\nif [ $? -eq 0 ]; then\n    \\eval \"$__conda_setup\"\nelse\n    if [ -f \"/anaconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/anaconda3/etc/profile.d/conda.sh\"\n        CONDA_CHANGEPS1=false conda activate base\n    else\n        \\export PATH=\"/anaconda3/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n</code></pre> <p>Exit out of <code>nano</code> and make sure to save the changes then close &amp; relaunch the terminal. Once you have the terminal up run the <code>conda init</code> command.</p> <pre><code>conda init zsh\n</code></pre> <p>Afterward, you can also try the <code>conda</code> command in a terminal to verify if conda was installed correctly. If the command is valid, then Anaconda has been successfully installed. Proceed to the next step to install Hummingbot</p>","title":"Anaconda"},{"location":"installation/source/#install-hummingbot","text":"<p>Clone Hummingbot repo</p> <pre><code>git clone https://github.com/hummingbot/hummingbot.git\n</code></pre> <p>Navigate into the hummingbot folder</p> <pre><code>cd hummingbot\n</code></pre> <p>Run install script</p> <pre><code>./install\n</code></pre> <p>Activate the environment</p> <pre><code>conda activate hummingbot\n</code></pre> <p>Compile</p> <pre><code>./compile\n</code></pre> <p>Run Hummingbot</p> <pre><code>bin/hummingbot.py\n</code></pre>","title":"Install Hummingbot"},{"location":"installation/source/#windows","text":"<p>As Hummingbot is optimized for UNIX-based environments, install Windows Subsystem for Linux in order to deploy an Ubuntu environment in your Windows machine.</p> <p>Afterwards, follow the Linux/Ubuntu instructions above.</p>","title":"Windows"},{"location":"installation/source/#videos-and-guides","text":"<p> Install Hummingbot on source | MacOS</p>","title":"\ud83d\udcfa Videos and Guides"},{"location":"installation/update-hummingbot/","text":"","title":"Update and Restore Hummingbot"},{"location":"installation/update-hummingbot/#binary-macwin","text":"<p>To update Hummingbot, uninstall Hummingbot locally from your computer, then download and install the latest version from the website https://docs.hummingbot.io/installation/</p> <p>Users can revert and update Hummingbot installed via Binary by following the steps below:</p> <p>To install a previous Hummingbot version via binary, download the installer from https://docs.hummingbot.io/installation/ in the previous client section</p> <p></p> <p>Users can also download an older version not listed on the website using the URL format <code>https://dist.hummingbot.io/[hummingbot_version]</code></p> <p>For example:</p> <p></p>","title":"Binary (Mac/Win)"},{"location":"installation/update-hummingbot/#docker","text":"<p>Hummingbot is regularly updated each month (see Release Notes) and recommends users to periodically update their installations to get the latest version of the software.</p> <p>Updating to the latest docker image (e.g. <code>hummingbot/hummingbot:latest</code>)</p>  <p>Note</p> <p>Make sure to stop all the containers using the same image first  before running the <code>./update.sh</code> script.</p>  ScriptsManual   <pre><code># 1) Remove old script\nrm -rf update.sh\n\n# 2) Download update script\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/development/installation/docker-commands/update.sh\n\n# 3) Enable script permissions\nchmod a+x update.sh\n\n# 4) Run script to update hummingbot\n./update.sh\n</code></pre>   <pre><code># 1) Delete instance\ndocker rm hummingbot-instance\n\n# 2) Delete old hummingbot image\ndocker image rm hummingbot/hummingbot:latest\n\n# 3) Re-create instance with latest hummingbot release\ndocker run -it \\\n--network host \\\n--name hummingbot-instance \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_conf,destination=/conf/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_logs,destination=/logs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_data,destination=/data/\" \\\nhummingbot/hummingbot:latest\n</code></pre>    <p>A previous version (i.e. <code>version-1.4.0</code>) can be installed when creating a Hummingbot instance.</p>","title":"Docker"},{"location":"installation/update-hummingbot/#raspberry-pi","text":"<p>Users have been experiencing problems with updating Hummingbot on a Docker build. The command <code>./update.sh</code> doesn't work on Raspberry Pi. </p> <p>Instead, you need to run <code>./create.sh</code> to create a new instance with the latest version.</p> Manual   <pre><code># 1) Create a new Hummingbot instance\n./create.sh\n\n# 2) Pull Hummingbot ARM image when asked what version to use\nEnter Hummingbot version [ latest/development ] ( default = 'latest' )\n&gt;&gt; version-1.4.0-arm_beta \n</code></pre>     <p>Note</p> <p>The latest ARM version of Hummingbot can be found here (filter list by \"arm\") - Hummingbot Dockerhub</p>","title":"Raspberry Pi"},{"location":"installation/update-hummingbot/#source","text":"<p>The Hummingbot codebase is hosted at https://github.com/hummingbot/hummingbot.</p> ScriptsManual   <pre><code># 1) Download update script to the *root* folder\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/development/installation/install-from-source/update.sh\n\n# 2) Enable script permissions\nchmod a+x update.sh\n\n# 3) Run script to update hummingbot\n./update.sh\n</code></pre>   <pre><code># From the hummingbot root folder:\ngit pull origin master\n\n# Recompile the code:\nconda deactivate\n./uninstall\n./clean\n./install\nconda activate hummingbot\n./compile\nbin/hummingbot.py\n</code></pre>","title":"Source"},{"location":"operation/","text":"<p>If you have installed Hummingbot successfully, you should see a welcome screen like the one below: </p> <p>Hummingbot features a command-line interface (CLI) that helps you building and run trading bots without coding skills.</p>","title":"Features"},{"location":"operation/#basic-operations","text":"<p>Basic features in Hummingbot.</p> <ul> <li>User Interface Guide</li> <li>Commands and Shortcuts</li> <li>Launch and Exit Hummingbot</li> <li>Create and Delete Password</li> <li>Connect to an Exchange</li> <li>Config Files</li> <li>Log Files</li> <li>Balances</li> <li>Start and Stop Strategy</li> <li>Check Bot and Market Status</li> <li>Check Trading Performance</li> <li>Paper Trading Mode</li> </ul>","title":"Basic Operations"},{"location":"operation/#advanced-features","text":"<p>Advanced features in Hummingbot for quant traders and developers.</p> <ul> <li>Auto-start from Command Line</li> <li>Balance Limit</li> <li>Clock Tick Size</li> <li>Color Settings</li> <li>Connect External Database</li> <li>Kill Switch</li> <li>Override Fees</li> <li>Rate Limits Share Pct</li> <li>Rate Oracle</li> <li>Telegram Integration</li> </ul>","title":"Advanced Features"},{"location":"operation/#pmm-configs","text":"<p>Below are configurable variables that are available in the Pure Market Making strategy. They give you more control over how your market making bot behaves.</p> <ul> <li>Filled Order Delay</li> <li>Order Refresh Tolerance</li> <li>Order Levels: Customize</li> <li>Hanging Orders</li> <li>Inventory Skew</li> <li>External Price Source</li> <li>Minimum Spread</li> <li>Max Order Age</li> <li>Price Band</li> <li>Order Optimization</li> <li>Add Transaction Costs</li> <li>Order Override</li> </ul>","title":"PMM Configs"},{"location":"operation/balance/","text":"","title":"Checking Balances"},{"location":"operation/balance/#exchange-and-wallet-balance","text":"<p>Run <code>balance</code> command to check the balances of all connected wallets and exchanges.</p> <p></p> <p>Allocated column shows how much of your assets are being used when there are active orders.</p>","title":"Exchange and wallet balance"},{"location":"operation/balance/#paper-trade-balance","text":"<p>Run <code>balance paper</code> to check your paper trade account balance.</p> <p></p> <p>By default, these are the paper trade balances pre-loaded in Hummingbot. You can also enter additional assets and credits to use in paper trade mode.</p> <ul> <li>Adding Paper Trade Balance</li> </ul>","title":"Paper trade balance"},{"location":"operation/balance/#limit-option","text":"<p>Run\u00a0<code>balance limit</code> to check your exchange specific limit that are set in global configs </p> <pre><code>    # Balance Limit Configurations\n    # e.g. Setting USDT and BTC limits on Binance.\n    # balance_asset_limit:\n    #   binance:\n    #     BTC: 0.1\n    #     USDT: 1000\n    balance_asset_limit:\n    coinflex_test: {}\n    gate_io: {}\n    binance: {}\n    binance_us: {}\n</code></pre>","title":"Limit option"},{"location":"operation/balance/#rate-oracle","text":"<p>when running the <code>balance</code> command the rate oracle uses the global_token from configuration as the base token for calculating balances. The default values are as follows:</p> <pre><code>    # A universal token which to display tokens values in, e.g. USD,EUR,BTC\n    global_token:\n    global_token_name: USD\n    global_token_symbol: $\n</code></pre> <p>The default value of the balance is calculated using the default USD as base. The reason some exchanges will show 0 as their total is not having USD based pairs. To change that, simply change the global_token to another token such as USDT, USDC, DAI\u2026</p>","title":"Rate Oracle"},{"location":"operation/balance/#how-it-works","text":"<p>The rate oracle loops through all connected exchanges and check for the assets available under each exchange. Afterwards, it fetches the price of the pair of each asset with the global token and calculates the value of the assets to be displayed. The values are added together to display the Exchanges Total.</p>","title":"How it works?"},{"location":"operation/commands-shortcuts/","text":"","title":"Commands and Shortcuts"},{"location":"operation/commands-shortcuts/#hummingbot-commands","text":"<p>Below are the available commands in the current Hummingbot release.</p>    Command Function     <code>connect</code> List available exchanges and add API keys to them   <code>create</code> Create a new bot   <code>import</code> Import an existing bot by loading the configuration file   <code>help</code> List available commands   <code>balance</code> Display your asset balances across all connected exchanges   <code>config</code> Display the current bot's configuration   <code>start</code> Start the current bot   <code>stop</code> Stop the current bot   <code>status</code> Get the market status of the current bot   <code>history</code> See the past performance of the current bot   <code>gateway</code> Helper commands for Gateway server   <code>exit</code> Exit and cancel all outstanding orders   <code>export</code> Export your bot's trades or private keys   <code>ticker</code> Show market ticker of current order book   <code>pmm_script</code> Send command to running PMM script instance   <code>previous</code> Imports the last strategy used   <code>rate</code> Show rate of a given trading pair   <code>order_book</code> Displays the top 5 bid/ask prices and volume   <code>tab_example</code> Display hello world","title":"Hummingbot commands"},{"location":"operation/commands-shortcuts/#gateway-commands","text":"Command Function     <code>config</code> View or update gateway configuration   <code>connect</code> Start the current bot   <code>connector-tokens</code> Report token balances for gateway connectors   <code>generate-certs</code> Create ssl certificate for gateway   <code>list</code> Shows a list of all available gateway connectors and their tiers   <code>status</code> Check status of gateway docker instance   <code>test-connection</code> Ping gateway api server    <p>Users can also use <code>gateway -h</code> this will print out the different commands you can use with gateway.</p> <pre><code>&gt;&gt;&gt; gateway -h\nusage: gateway [-h] {create,config,connect,connector-tokens,generate-certs,start,status,stop,test-connection} ...\n\npositional arguments: {create,config,connect,connector-tokens,generate-certs,start,status,stop,test-connection}\nconfig              View or update gateway configuration\nconnect             Create/view connection info on gateway connector\nconnector-tokens    Report token balances for gateway connectors\ngenerate-certs      Create ssl certificate for gateway\ntest-connection     Ping gateway api server\n\noptional arguments:\n-h, --help          show this help message and exit\n</code></pre> <p>Gateway help command can also be used this way <code>gateway [command]-h</code></p> <pre><code>&gt;&gt;&gt; gateway create -h\nusage: gateway create [-h]\n</code></pre> <p>It can also be used with a different command:</p> <pre><code>&gt;&gt;&gt; gateway connector-tokens -h\nusage: gateway connector-tokens [-h] [connector_chain_network] [new_tokens]\n\npositional arguements:\nconnector_chain_network  Name of connector you want to edit reported tokens for\nnew_tokens             Report balance of these tokens\n</code></pre>","title":"Gateway commands"},{"location":"operation/commands-shortcuts/#docker-commands","text":"<p>These are the commonly used docker commands when using Hummingbot.</p>    Command Function     <code>docker ps -a</code> List containers   <code>docker rm [container name]</code> Remove one or more containers   <code>docker rmi [image name]</code> Remove one or more images   <code>docker rm $(docker ps -a q)</code> Remove all containers    <p>To view more docker commands, go to Docker Command Line Reference.</p>","title":"Docker commands"},{"location":"operation/commands-shortcuts/#linux-commands","text":"<p>These are the basic commands used to navigate Linux commonly used with Hummingbot.</p>    Command Function     <code>ls</code> Lists all files and folders in the current directory   <code>cd</code> Change directory / move to another folder location   <code>mv</code> Moves or renames a file or directory   <code>cp</code> To copy files or group of files or directory   <code>rm</code> Remove / delete files and folders   <code>top</code> Details on all active processes   <code>htop</code> Monitor the system processes in real time    <p>For more information about basic Linux commands, check out The Linux command line for beginners.</p>","title":"Linux commands"},{"location":"operation/commands-shortcuts/#keyboard-shortcuts","text":"Keyboard Combo Command Description     <code>Double CTRL + C</code> Exit Press <code>CTRL + C</code> twice to exit the bot   <code>CTRL + S</code> Status Show bot status   <code>CTRL + F</code> Search /  Hide Search Toggle search in log pane   <code>CTRL + X</code> Exit Config Exit from the current configuration question   <code>CTRL + A</code> Select All * Select all text   <code>CTRL + Z</code> Undo * Undo action   <code>Single CTRL + C</code> Copy * Copy text   <code>CTRL + V</code> Paste * Paste text   <code>CTRL + T</code> Toggle Logs Hide / Show logs pane    <p>* Used for text edit in input pane only.</p> <p>Note about search:</p> <ol> <li>Press <code>CTRL + F</code> to trigger display the search field</li> <li>Enter your search keyword (not case sensitive)</li> <li>Hit <code>Enter</code> to jump to the next matching keyword (incremental search)</li> <li>When you are done, press <code>CTRL + F</code> again to go back to reset</li> </ol> <p>Linux</p>    Keyboard Combo Command     CTRL + C Copy   SHIFT + RMB (right-mouse button) Paste    <p>To highlight, hold <code>SHIFT + LMB</code> (left mouse button) and drag across the text you want to select.</p> <p>Mac</p>    Keyboard Combo Command     \u2318 + C Copy   \u2318 + V Paste     <p>Note</p> <p>To select text on macOS, you may need to enable the Allow Mouse Reporting option by pressing <code>\u2318 + R</code> or selecting View &gt; Allow Mouse Reporting in the menu bar.</p>  <p></p> <p>Then you should be able to select text by holding <code>LMB</code> (left mouse button) and drag. You can also hold down <code>\u2325 + shift</code> to select specific lines like the image below.</p> <p></p> <p>When accessing Hummingbot on a Linux cloud server through <code>ssh</code> using a macOS terminal, hold down the <code>Option \u2325</code> key or <code>\u2325 + \u2318</code> to highlight text.</p> <p>Windows</p>    Keyboard Combo Command     CTRL + SHIFT + C Copy   CTRL + SHIFT + V Paste    <p>To use this shortcut, check this box by doing a right-click on the title bar at the top of the Hummingbot window, then select Properties.</p> <p></p>","title":"Keyboard shortcuts"},{"location":"operation/config-files/","text":"","title":"Create or Import Config Files"},{"location":"operation/config-files/#creating-a-new-strategy-file","text":"<p>Run <code>create</code> command and answer the prompts to configure your bot's behavior depending on the strategy you want to use.</p> <p>The last prompt will ask you to enter a name for the config file. You can also specify the name of your file at the beginning by running <code>create [file_name]</code> command.</p> <p></p>","title":"Creating a new strategy file"},{"location":"operation/config-files/#config-file-templates","text":"<p>These configuration files created and used by Hummingbot are saved in the <code>conf/</code> directory of your instance, which you can edit directly with a standard text editor.</p> <ul> <li>Installed from source: <code>hummingbot/conf</code></li> <li>Installed via Docker: <code>hummingbot_files/hummingbot_conf</code></li> <li><code>hummingbot_files</code> is the default name of the parent directory. This can be different depending on the setup     when the instance was created.</li> </ul> <p>The template configuration files can be found here: Config Templates.</p>  <p>Warning</p> <p>Exit Hummingbot and ensure it is not running when you modify the config files. Changes will take effect the next time Hummingbot is started.</p>","title":"Config file templates"},{"location":"operation/config-files/#strategy-specific-files","text":"<p>Running <code>create</code> command initializes the configuration of global and strategy-specific settings necessary to run the bot.</p> <p>Running this command will automatically create the following files in these folders:</p>    File Description     <code>conf_client.yml</code> Global configuration settings, e.g. Binance API keys and Ethereum node.   <code>conf_pure_mm_[#].yml</code> Settings for the pure market making strategy.   <code>conf_xemm_[#].yml</code> Settings for the cross-exchange market making strategy.   <code>conf_liquidity_mining_[#].yml</code> Settings for the liquidity mining strategy.   <code>conf_perpetual_market_making_#.yml</code> Settings for the perpetual market making strategy.   <code>conf_arb_[#].yml</code> Settings for the arbitrage strategy.   <code>conf_celo_arb_[#].yml</code> Settings for the celo arbitrage strategy.   <code>conf_amm_arb_[#].yml</code> Settings for the amm arbitrage strategy.   <code>conf_spot_perpetual_arbitrage_[#].yml</code> Settings for the spot perpetual arbitrage strategy.   <code>conf_avellaneda_market_making_[#].yml</code> Settings for the avellaneda market making strategy.   <code>conf_aroon_oscillator_[#].yml</code> Settings for the aroon oscillator   <code>conf_hedge_[#].yml</code> Settings for the hedge   <code>conf_twap_[#].yml</code> Settings for the TWAP   <code>conf_fixed_grid_[#].yml</code> Settings for the fixed grid strategy     <p>Tip</p> <p>For editing configuration files directly, once they are created, you may find it easier to edit the configuration files in the <code>conf/</code> folder. Simply open them with a text editor and make any desired modifications.</p>","title":"Strategy-specific files"},{"location":"operation/config-files/#setup-walkthrough","text":"<p>After running <code>create</code> command, you need to setup a strategy along with its parameters.</p> <p>We have developed walkthroughs for each strategy:</p> <ul> <li>Pure market making</li> <li>Cross-exchange market making</li> <li>Perpetual Market Making</li> <li><code>Arbitrage</code></li> <li><code>Celo Arbitrage</code></li> <li>AMM Arbitrage</li> <li>Liquidity Mining</li> <li>Spot Perpetual Arbitrage</li> <li>Avellaneda Market Making</li> <li>Aroon Oscillator</li> <li>Hedge</li> <li>TWAP</li> <li><code>Fixed Grid</code></li> </ul>  <p>Note</p> <p>When configuring your bot, make sure you are aware of your exchange's minimum order sizes and fees, and check that your trading pair has sufficient order book and trading volumes. You can find more info about specific exchanges in the Connectors section.</p>","title":"Setup walkthrough"},{"location":"operation/config-files/#import-an-existing-strategy-file","text":"<ol> <li>Run <code>import</code> command</li> <li>Enter the name of your strategy config file</li> </ol> <p></p> <p>You can also skip the prompt by running <code>import [file_name]</code> command.</p> <p></p>  <p>Tip</p> <p>Press TAB to scroll through the auto-complete selections.</p>  <p>Sample usage</p> <pre><code>&gt;&gt;&gt;`import conf_pure_mm_1.yml`\nConfiguration from conf_pure_mm_1.yml file is imported.\n\nPreliminary checks:\n - Exchange check: All connections confirmed.\n - Strategy check: All required parameters confirmed.\n -All checks: Confirmed.\n\nEnter \"start\" to start market making\n\n&gt;&gt;&gt; start\n</code></pre>","title":"Import an existing strategy file"},{"location":"operation/config-files/#create-command-shortcuts","text":"<p>To use this feature, open and configure <code>conf_client.yml</code> located under the <code>hummingbot_conf</code> folder.</p>  <p>Note</p> <p>In past versions of Hummingbot (1.5.0 and below), the <code>conf_client.yml</code> file is named <code>conf_global.yml</code></p>  <p>Import the lines of code to create a custom command shortcut.</p> <pre><code># Command Shortcuts\n# Define abbreviations for often used commands\n# or batch grouped commands together\n\ncommand_shortcuts:\n  # Assign shortcut command\n  command: spreads_refresh\n\n  # Reference\n  help: Set bid spread, ask spread, and order refresh time\n\n  # Argument Label\n  arguments: [Bid Spread, Ask Spread, Order Refresh Time]\n\n  # Original config output with value\n  output: [config bid_spread $1, config ask_spread $2, config order_refresh_time $3]\n</code></pre>  <p>Note</p> <p>Custom made commands can only be used once a strategy has been imported.</p>  <p></p>","title":"Create command shortcuts"},{"location":"operation/connect/","text":"<p>The <code>connect</code> command lets you add your user credentials in order to connect to an exchange or protocol. For centralized exchanges, this command asks you for your API key, while blockchain protocols asks you for your private key.</p> <p>Hummingbot stores both API keys and private keys on the local machine in encrypted form, with the Hummingbot client password as the key.</p>","title":"Connect Exchange API Keys"},{"location":"operation/connect/#connecting-to-exchanges","text":"<ol> <li>Run <code>connect [exchange_name]</code> command e.g. <code>connect binance</code></li> <li>Enter API and secret keys when prompted</li> <li>Other exchanges may require additional details such as account ID, exchange address, etc.</li> </ol> <p>See Exchanges for more information about how to create API keys for each exchange.</p>  <p>Only enable Read and Trade access</p> <p>For security reasons, Hummingbot does not support deposit and withdrawal functionality. Therefore, we recommend using only read + trade enabled API keys. It is not necessary to enable withdraw, transfer, or anything equivalent to retrieving assets from your wallet.</p>","title":"Connecting to exchanges"},{"location":"operation/connect/#connecting-to-protocols","text":"<ol> <li>Run <code>connect [protocol_name]</code> command, e.g. <code>connect ethereum</code></li> <li>Enter your wallet private key</li> <li>Enter the Ethereum node endpoint starting with https://</li> <li>Enter the websocket address starting with wss://</li> </ol>  <p>Connecting vs keyfile</p> <p>A more secure way to add your blockchain wallet credentials to Humminggbot is by importing a keyfile.</p>","title":"Connecting to protocols"},{"location":"operation/connect/#checking-connection-status","text":"<p>Run the <code>connect</code> command to view the status of each connector. It also shows failed connections due to connectivity issues, invalid API key permissions, etc.</p> <p></p> <p>Keys Added column indicates if API keys are added to Hummingbot.</p> <p>Keys Confirmed column shows the status if Hummingbot has successfully connected to the exchange or protocol.</p> <p>Connector Status column is an indicator of the connector working status as of the client release. See Exchange Status for more information.</p>","title":"Checking connection status"},{"location":"operation/export/","text":"","title":"Export Trades/Keys"},{"location":"operation/export/#export-keys","text":"<p>Displays API keys, secret keys and wallet details in the command output pane.</p> <pre><code>&gt;&gt;&gt;  export keys\n\nEnter your password &gt;&gt;&gt; *****\n\nWarning: Never disclose API keys or private keys. Anyone with your keys can steal any assets held in your account.\n\nAPI keys:\nbinance_api_key:\nbinance_api_secret:\n\nEthereum wallets:\nPublic address:\nPrivate key:\n</code></pre>","title":"<code>export keys</code>"},{"location":"operation/export/#export-trades","text":"<p>Exports all trades in the current session to a .csv file.</p> <pre><code>&gt;&gt;&gt;  export trades\n\nEnter a new csv file name &gt;&gt;&gt; trade_list\nSuccessfully exported trades to logs/trade_list.csv\n</code></pre>","title":"<code>export trades</code>"},{"location":"operation/history/","text":"","title":"Performance History"},{"location":"operation/history/#history-command","text":"<p>The <code>history</code> command displays the current duration of total past trades, asset inventory and value, and market trading pair performance. Run <code>history --verbose</code> to see all recent trades.</p> <p>Trades are saved locally in a .csv file located in the <code>data</code> folder which you can view by running <code>history --verbose --days</code> command even after you restart Hummingbot.</p> <p>Optional argument <code>--precision</code> specifies the number of decimal values.</p> <p></p> <p>This block below shows the calculation for some of the values displayed in the history output.</p> <pre><code>Avg price = total trade volume of quote / total trade volume of base asset\nHold portfolio value = (base start asset * current market price) + quote start asset\nCurrent portfolio value = (base current asset * current market price) + quote current asset\nTrade P&amp;L = current portfolio value - hold portfolio value\nTotal P&amp;L = trade P&amp;L + fees paid\nReturn % = total P&amp;L / hold portfolio value\n</code></pre>  <p>Tip</p> <p>The Return % in the navbar at the bottom of Hummingbot client may be different from the history command output. This is because the Return % in history takes the price changes into calculation while the navbar in the bottom UI does not.</p>","title":"History command"},{"location":"operation/history/#how-it-works","text":"<p>Run the <code>history</code> command in Hummingbot to display the current duration of total past trades, asset inventory and value, market trading pair performance.</p>","title":"How It Works"},{"location":"operation/history/#sample-output","text":"<pre><code>&gt;&gt;&gt;  history\n\n  Start Time: 2020-11-11 00:56:37\n  Current Time: 2020-11-11 12:57:22\n  Duration: 0 days 12:00:45\n\n  binance / MFT-BNB\n\n    Trades:\n                                         buy        sell       total\n      Number of trades                   113          97         209\n      Total trade volume (BTC)       2181335    -2133912       47423\n      Total trade volume (USDT)      -217,67      210.76       -6.91\n      Avg price                    0.0000998   0.0000988   0.0001457\n\n    Assets:\n\n                                      Start      Current      Change\n      MFT                            155248       202671       47423\n      BNB                            23.331       16.419      -6.912\n      MFT/BNB price               0.0001076    0.0000809  -0.0000267\n      Base asset %                    41.7%        50.0%        8.2%\n\n    Performance:\n      Hold portfolio value           35.890 BNB\n      Current portfolio value        32.815 BNB\n      Trade P&amp;L                      -3.075 BNB\n      Fees paid                      -0.428 BNB\n      Total P&amp;L                      -3.504 BNB\n      Return %:                      -9.76%\n</code></pre> <p>The following displays the formula for key calculations:</p>  <p>Note</p> <p>For more details on the calculations, please see this Google Sheet.</p>","title":"Sample Output"},{"location":"operation/history/#average-price","text":"<p>Avg Price = Total trade volume of quote/Total trade volume of base asset.</p> <p>In the sample output, the total avg price is 6.91/47423 = 0.0001457</p> <p>This value means the average price of total MFT/BNB trades is 0.0001457</p>","title":"Average Price"},{"location":"operation/history/#hold-portfolio-value","text":"<p>The asset value from the start to the end with no trades.</p> <p>Hold portfolio value = (base start asset*current market price)+ quote start asset</p> <p>From the above example, for the Hold portfolio value is (155248*0.0000809)+23.33=35.89</p>","title":"Hold Portfolio Value"},{"location":"operation/history/#current-portfolio-value","text":"<p>Current portfolio value = (base current asset*current market price)+ quote current asset</p> <p>From the above example, for the Current portfolio value is (202671*0.0000809)+16.419=32.815</p>","title":"Current Portfolio Value"},{"location":"operation/history/#trade-pl","text":"<p>Trade P&amp;L = Current portfolio value - Hold Portfolio value</p> <p>From the above example, for the Trade P&amp;L value is 32.815-35.89=-3.075</p>","title":"Trade P&amp;L"},{"location":"operation/history/#total-pl","text":"<p>Total P&amp;L = Trade P&amp;L + Fees paid</p> <p>From the above example, for the Total P&amp;L is -3.075 + -0.428 = -3.504</p>","title":"Total P&amp;L"},{"location":"operation/history/#return-percentage","text":"<p>Return% = Total P&amp;L/Hold portfolio value</p> <p>From the above example, for the Return% is -3.075/-35.89 = -9.76%</p> <p>The Return % (bottom navbar) matches the calculated return on History after the last trade, see following screenshot:</p> <p></p>","title":"Return Percentage"},{"location":"operation/launch-exit/","text":"<p>This page contains information on launching and exiting the application, assuming Hummingbot is installed already on your machine.</p>","title":"Launch and Exit Hummingbot"},{"location":"operation/launch-exit/#launch-via-docker","text":"<p>If you downloaded the helper script before, proceed to step 2.</p> <ol> <li>Download <code>start.sh</code> helper script from Github using the command below.</li> </ol> <pre><code>wget https://raw.githubusercontent.com/CoinAlpha/hummingbot/development/installation/docker-commands/start.sh\nchmod a+x start.sh\n</code></pre>  <p>Tip</p> <p>Run <code>ls</code> command from the terminal to check if the file is in your current directory.</p>  <ol> <li>Run the following command inside the directory where the helper script is located:</li> </ol> <pre><code>./start.sh\n</code></pre> <p></p>  <p>Tip</p> <p>If no containers are running, follow the guide to creating a Hummingbot instance.</p>","title":"Launch via Docker"},{"location":"operation/launch-exit/#launch-from-source","text":"<ol> <li>Make sure the hummingbot conda environment is enabled.</li> </ol> <pre><code>conda activate hummingbot\n</code></pre> <ol> <li>In the <code>hummingbot</code> parent directory, run this command to launch the application:</li> </ol> <pre><code>bin/hummingbot.py\n</code></pre> <p></p>","title":"Launch from source"},{"location":"operation/launch-exit/#exit-hummingbot","text":"<p>Running the <code>exit</code> command cancels all outstanding orders and exit the Hummingbot interface. In case of errors, the command <code>exit -f</code> will force the application to close.</p> <p>If you're running Hummingbot installed via binary, exiting Hummingbot by clicking the close window icon will leave your active orders open in the exchange.</p>  <p>Tip</p> <p>You can also press the keyboard shortcut <code>CTRL + C</code> twice to exit.</p>","title":"Exit Hummingbot"},{"location":"operation/log-files/","text":"<p>As Hummingbot is an in-progress and open-access software, logs are stored locally in your computer each time an instance is run. While the bot is active, record of status updates, results of specified checks and behaviors, as well as error tracing is encoded in the log files.</p>","title":"Log Files"},{"location":"operation/log-files/#viewing-log-configurations","text":"<p>The way that log files are structured is contained within <code>conf/hummingbot_logs.yml</code>. For now, we request that users leave the log settings at the defaults. This makes it easier for the Hummingbot team to trace bugs and other problems that users face when logs are submitted.</p>","title":"Viewing log configurations"},{"location":"operation/log-files/#viewing-individual-log-files","text":"<p>For users who wish to locate and submit log files, generally they are located in the <code>/logs</code> folder. Specific path or location may vary depending on the environment and how Hummingbot was installed.</p> <ul> <li>Installed from source: <code>hummingbot/logs</code></li> <li>Installed via Docker: <code>hummingbot_files/hummingbot_logs</code></li> <li><code>hummingbot_files</code> is the default name of the parent directory. This can be different depending on the setup     when the instance was created.</li> <li>Installed via Binary (Windows): <code>%localappdata%\\hummingbot.io\\Hummingbot\\logs</code></li> <li>Installed via Binary (MacOS): <code>~/Library/Application\\ Support/Hummingbot/Logs</code></li> </ul>","title":"Viewing individual log files"},{"location":"operation/log-files/#log-file-management","text":"<p>A separate log file will now be generated daily. When a new log file is created, if there are more than 7 files, the oldest ones will be deleted in order to limit disk storage usage. The log rotation feature was added in Hummingbot version 0.17.0.</p> <p>If you are looking for support in handling errors or have questions about behavior reported in logs, you can find ways of contacting the team or community in our support section.</p>","title":"Log file management"},{"location":"operation/password/","text":"<p>The password in Hummingbot encrypts sensitive data such as API keys, secret keys, and wallet private keys. For security reasons, the password is only stored locally in encrypted form, and we do not have access to it.</p>","title":"Create and Delete Password"},{"location":"operation/password/#creating-a-password","text":"<p>If you are using Hummingbot for the first time, the system will prompt you to create a password. There are no character requirements, although we recommend using a strong password for additional security.</p> <p>You can click the OK button on the welcome screen or you can press TAB to navigate the selection and ENTER to confirm.</p> <p>Passwords are stored locally in your computer. No passwords are uploaded to any server.</p> <p></p>","title":"Creating a password"},{"location":"operation/password/#deleting-a-password","text":"<p>Passwords and private keys are saved as encrypted files in <code>hummingbot_conf</code> (via Docker and binary) or <code>/conf</code> directory (installed from source).</p> <p>To reset your password, delete all files starting with <code>encrypted_</code> prefix.</p> <p></p>  <p>Warning</p> <p>This will disconnect your API keys from Hummingbot. You will have to re-connect your API keys.</p>","title":"Deleting a password"},{"location":"operation/start-stop/","text":"","title":"Start and Stop Strategy"},{"location":"operation/start-stop/#starting-a-strategy","text":"<p>After creating or importing a config file, use the <code>start</code> command to run the strategy.</p> <p></p>","title":"Starting a strategy"},{"location":"operation/start-stop/#stop-a-running-strategy","text":"<p>Run <code>stop</code> command to stop the running strategy. Doing this will also cancel all active orders.</p> <p></p>","title":"Stop a running strategy"},{"location":"operation/status/","text":"","title":"Check Bot and Market Status"},{"location":"operation/status/#check-bot-status","text":"<p>Run <code>status</code> command or CTRL+S to show the bot's current status. The output may differ depending on the running strategy, but generally, it shows the following information:</p> <ul> <li>Market(s) you're trading in</li> <li>Balance or inventory of trading pair assets</li> <li>Active or outstanding orders</li> <li>Error messages</li> <li>Exchange connection status</li> <li>Paper trading mode (when enabled)</li> </ul>","title":"Check bot status"},{"location":"operation/status/#get-live-bot-status","text":"<p>The <code>status --live</code> command displays the real-time status of the bot.</p> <p></p>  <p>Note</p> <p>Currently, this feature works on all strategies except <code>liquidity mining</code> strategy.</p>","title":"Get live bot status"},{"location":"operation/status/#view-market-order-book","text":"<p>By default, the <code>order_book</code> command displays the top 5 bid/ask prices and volume of the current market, similar to how they're displayed in the exchange's order book.</p> <p>Optional arguments</p>    Command Argument Description     <code>--live</code> Continuously displays the order book in real-time   <code>--lines</code> Number of lines to display   <code>--exchange</code> Specifies the exchange when running a secondary exchange   <code>--market</code> Specifies the trading pair when running a secondary exchange    <p>Sample usage</p> <p>Run <code>order_book --live --lines 20</code> to show the top 20 bid/ask and volume in real-time.</p> <p></p>","title":"View market order book"},{"location":"operation/status/#view-market-ticker-prices","text":"<p>The <code>ticker</code> command displays the market prices, specifically the best bid, best ask, mid price, and last trade price.</p> <p></p> <p>Optional arguments</p>    Command Argument Description     <code>--live</code> Displays the ticker in real-time   <code>--exchange</code> Specifies the exchange when running a secondary exchange   <code>--market</code> Specifies the trading pair when running a secondary exchange","title":"View market ticker prices"},{"location":"operation/status/#status","text":"<p>Get the market status of the current bot.</p> <pre><code>&gt;&gt;&gt;  status\n\n  Markets:\n    Exchange  Market  Best Bid Price  Best Ask Price  Mid Price\n     binance  ETHBTC        0.025521        0.025527   0.025524\n\n  Assets:\n                            ETH    BTC\n     Total Balance       4.3725 0.1274\n     Available Balance   3.3725 0.1021\n     Current Value (BTC) 0.1116 0.1274\n     Current %            46.7%  53.3%\n\n  Orders:\n     Level  Type      Price Spread  Amount (Orig)  Amount (Adj)       Age Hang\n         1  sell  0.0257747  0.98%              1             1  00:00:02   no\n         1   buy 0.02526431  1.02%              1             1  00:00:02   no\n\n\n\n**Optional arguments**\n\n| Command Argument            | Description                                                  |\n| --------------------------- | ------------------------------------------------------------ |\n| `-live`                     | Displays status in real time.                                |\n</code></pre>","title":"status"},{"location":"operation/user-interface/","text":"<p></p> <p>The CLI is divided into five panes:</p> <ol> <li>Input pane (lower left): Where users enter commands</li> </ol> <p></p> <ol> <li>Output pane (upper left): Prints the output of the user's commands</li> </ol> <p></p> <ol> <li>Log pane (right): Log messages</li> </ol> <p></p> <ol> <li> <p>Top navigation bar: Displays the status/information of the following items</p> </li> <li> <p>Version:</p> <ul> <li>Reference of Version Release (Currently at 0.39)</li> </ul> </li> <li> <p>Strategy:</p> <ul> <li>Hummingbot has 9 strategy configurations that can be used for trading or liquidity mining. Hummingbot strategy guide can be found here.</li> </ul> </li> <li>Strategy_file:<ul> <li>You have the option to save a strategy configuration after every bot creation, allowing you to reuse a strategy quickly with <code>import</code>command + strategy_filename.yml.</li> </ul> </li> </ol> <p></p> <ol> <li> <p>Bottom navigation bar: Displays the information of the following items</p> </li> <li> <p>Trades</p> <ul> <li>Number of trades done by the bot</li> </ul> </li> <li>Total P&amp;L<ul> <li>Total profit &amp; loss</li> </ul> </li> <li>Return%<ul> <li>Return percentage of assets</li> </ul> </li> <li>CPU<ul> <li>CPU usage of the computer</li> </ul> </li> <li> <p>Mem</p> <ul> <li>Memory usage of the computer</li> </ul> </li> <li> <p>Threads</p> </li> <li> <p>Duration</p> <ul> <li>Duration of the trading session</li> </ul> </li> </ol> <p></p>","title":"User Interface Guide"},{"location":"operation/user-interface/#show-and-hide-log-pane","text":"<p>The log pane on the right can be shown or hidden in two ways:</p> <ol> <li>Click the <code>log pane</code> button in the upper right hand corner</li> <li>Press <code>CTRL + T</code> shortcut on your keyboard</li> </ol> <p></p>","title":"Show and hide log pane"},{"location":"operation/user-interface/#tabs","text":"<p>Users can now open another tab in the left pane of Hummingbot where the log pane is supposed to be upon entering a command associated with the Tabs feature. Users can now switch between the <code>log pane</code> and the new tab they have opened simulateneously.</p>  <p>Note</p> <p>Currently, the feature only works with the <code>order_book</code> parameter.</p>","title":"Tabs"},{"location":"operation/user-interface/#opening-and-closing","text":"","title":"Opening and Closing"},{"location":"operation/user-interface/#opening-a-tab","text":"<p>Use the tabs by simply inputting a command associated with the tabs feature.</p> <p>Upon using the <code>order_book</code> command and any suffix it will open a tab automatically.</p> <p></p> <p></p>","title":"Opening a tab"},{"location":"operation/user-interface/#closing-a-tab","text":"<p>Simply click on the <code>x</code> at the top right corner or inputting <code>parameter_name --close</code></p> <p>One option to close the tab is by clicking on the <code>x</code> next to <code>order_book</code></p> <p></p> <p>Alternatively, you can remove the new tab by inputting the <code>order_book --close</code> command to close the tab</p> <p></p> <p></p>","title":"Closing a tab"},{"location":"operation/user-interface/#keyboard-shortcuts","text":"Keyboard Combo Command Description     <code>Double CTRL + C</code> Exit Press <code>CTRL + C</code> twice to exit the bot   <code>CTRL + S</code> Status Show bot status   <code>CTRL + F</code> Search /  Hide Search Toggle search in log pane   <code>CTRL + X</code> Exit Config Exit from the current configuration question   <code>CTRL + A</code> Select All * Select all text   <code>CTRL + Z</code> Undo * Undo action   <code>Single CTRL + C</code> Copy * Copy text   <code>CTRL + V</code> Paste * Paste text   <code>CTRL + R</code> Reset Style Set default color style   <code>CTRL + T</code> Toggle logs Hide / show the logs pane    <p>* Used for text edit in input pane only.</p> <p>Note about search:</p> <ol> <li> <p>Press <code>CTRL + F</code> to trigger display the search field</p> </li> <li> <p>Enter your search keyword (not case sensitive)</p> </li> <li> <p>Hit <code>Enter</code> to jump to the next matching keyword (incremental search)</p> </li> <li> <p>When you are done, press <code>CTRL + F</code> again to go back to reset</p> </li> </ol>","title":"Keyboard shortcuts"},{"location":"operation/user-interface/#linux","text":"Keyboard Combo Command     CTRL + C Copy   SHIFT + RMB (right-mouse button) Paste    <p>To highlight, hold <code>SHIFT + LMB</code> (left mouse button) and drag across the text you want to select.</p>","title":"Linux"},{"location":"operation/user-interface/#macos","text":"Keyboard Combo Command     \u2318 + C Copy   \u2318 + V Paste     <p>Note</p> <p>To select text on macOS, you may need to enable the Allow Mouse Reporting option by pressing <code>\u2318 + R</code> or selecting View &gt; Allow Mouse Reporting in the menu bar.</p>  <p></p> <p>Then you should be able to select text by holding <code>LMB</code> (left mouse button) and drag. You can also hold down <code>\u2325 + shift</code> to select specific lines like the image below.</p> <p></p> <p>When accessing Hummingbot on a Linux cloud server through <code>ssh</code> using a macOS terminal, hold down the <code>Option \u2325</code> key or <code>\u2325 + \u2318</code> to highlight text.</p>","title":"macOS"},{"location":"operation/user-interface/#windows","text":"Keyboard Combo Command     CTRL + SHIFT + C Copy   CTRL + SHIFT + V Paste    <p>To use this shortcut, check this box by doing a right-click on the title bar at the top of the Hummingbot window, then select Properties.</p> <p></p>","title":"Windows"},{"location":"release-notes/","text":"<p>We generally release a new version of Hummingbot every month. See below for information about each release.</p>","title":"Releases"},{"location":"release-notes/#1130","text":"<ul> <li>Released: February 27, 2023</li> </ul> <p>Hummingbot</p> <ul> <li>Github: <code>v1.13.0</code></li> <li>DockerHub: <code>version-1.13.0</code> | <code>version-1.13.0-arm_beta</code></li> </ul> <p>Hummingbot Gateway</p> <ul> <li>Github: <code>v1.13.0</code></li> <li>DockerHub: <code>version-1.13.0</code></li> </ul>","title":"1.13.0"},{"location":"release-notes/#1120","text":"<ul> <li>Released: January 25, 2023</li> <li>Github: <code>v1.12.0</code></li> <li>DockerHub: <code>version-1.12.0</code> | <code>version-1.12.0-arm_beta</code></li> </ul>","title":"1.12.0"},{"location":"release-notes/#1110","text":"<ul> <li>Released: December 21, 2022</li> <li>Github: <code>v1.11.0</code></li> <li>DockerHub: <code>version-1.11.0</code> | <code>version-1.11.0-arm_beta</code></li> </ul>","title":"1.11.0"},{"location":"release-notes/#1100","text":"<ul> <li>Released: November 29, 2022</li> <li>Github: <code>v1.10.0</code></li> <li>DockerHub: <code>version-1.10.0</code> | <code>version-1.10.0-arm_beta</code></li> </ul>","title":"1.10.0"},{"location":"release-notes/#190","text":"<ul> <li>Released: October 28, 2022</li> <li>Github: <code>v1.9.0</code></li> <li>DockerHub: <code>version-1.9.0</code> | <code>version-1.9.0-arm_beta</code></li> </ul>","title":"1.9.0"},{"location":"release-notes/#180","text":"<ul> <li>Released: September 30, 2022</li> <li>Github: <code>v1.8.0</code></li> <li>DockerHub: <code>version-1.8.0</code> | <code>version-1.8.0-arm_beta</code></li> </ul>","title":"1.8.0"},{"location":"release-notes/#170","text":"<ul> <li>Released: August 31, 2022</li> <li>Github: <code>v1.7.0</code></li> <li>DockerHub: <code>version-1.7.0</code> | <code>version-1.7.0-arm_beta</code></li> </ul>","title":"1.7.0"},{"location":"release-notes/#160","text":"<ul> <li>Released: July 26, 2022</li> <li>Github: <code>v1.6.0</code></li> <li>DockerHub: <code>version-1.6.0</code> | <code>version-1.6.0-arm_beta</code></li> </ul>","title":"1.6.0"},{"location":"release-notes/#150","text":"<ul> <li>Released: June 30, 2022</li> <li>Github: <code>v1.5.0</code></li> <li>DockerHub: <code>version-1.5.0</code> | <code>version-1.5.0-arm_beta</code></li> </ul>","title":"1.5.0"},{"location":"release-notes/#140","text":"<ul> <li>Released: May 30, 2022</li> <li>Github: <code>v1.4.0</code></li> </ul>","title":"1.4.0"},{"location":"release-notes/#130","text":"<ul> <li>Released: April 29, 2022</li> <li>Github: <code>v1.3.0</code></li> </ul>","title":"1.3.0"},{"location":"release-notes/#120","text":"<ul> <li>Released: March 31, 2022</li> <li>Github: <code>v1.2.0</code></li> </ul>","title":"1.2.0"},{"location":"release-notes/#110","text":"<ul> <li>Released: February 28, 2022</li> <li>Github: <code>v1.1.0</code></li> </ul>","title":"1.1.0"},{"location":"release-notes/#101","text":"<ul> <li>Released: February 9, 2022</li> <li>Github: <code>v1.0.1</code></li> </ul>","title":"1.0.1"},{"location":"release-notes/#100","text":"<ul> <li>Released: January 27, 2022</li> <li>Github: <code>v1.0.0</code></li> </ul>","title":"1.0.0"},{"location":"release-notes/0.10.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.10.0! In this release, we focused on fixing bugs, improving documentation, and refactoring the codebase. Please see below for what's new in this release.</p>","title":"Release Notes - Version 0.10.0"},{"location":"release-notes/0.10.0/#fixed-duplicate-orders-bug-on-binance","text":"<p>A number of users have reported seeing duplicate orders when running the pure market making strategy on Binance, especially when using multiple orders mode. After triaging this issue, we believe that are a number of root causes which may result in this occurring. We have fixed some of them in this release, but there may be others. We will continue to test this internally. </p>","title":"\ud83d\udc1e Fixed duplicate orders bug on Binance"},{"location":"release-notes/0.10.0/#improved-docs-quickstart-helper-scripts-and-more","text":"<p>As part of an ongoing process to improve Hummingbot's documentation, we have re-organized the layout of our docs, added helper scripts to make using the Docker image version easier, and created a new Quickstart guide to simplify the new user experience.</p>","title":"\ud83d\udcdd Improved docs: Quickstart, helper scripts, and more!"},{"location":"release-notes/0.10.0/#renamed-stop-loss-to-kill-switch","text":"<p>The stop loss utility, which automatically stops the bot when it reaches a certain performance threshold, has been renamed to <code>kill_switch</code>. This prevents potential confusion with stop loss orders, a commonly used phrase in trading parlance. We have also refactored this feature to use the same performance calculation methodology as the <code>history</code> command.</p> <p>Users can now also set either a positive or negative performance rate for <code>kill_switch_pct</code>. If the bot reaches this performance hurdle when running, it will automatically stop.</p>","title":"\ud83d\uded1 Renamed stop loss to kill switch"},{"location":"release-notes/0.10.0/#backend-logic-for-liquidity-bounties","text":"<p></p> <p>We have made substantial progress on the the data infrastructure required to collect, store, and verify trades performed by participants in our Liquidity Bounties. When we have completed the back-end work, we will build a leaderboard web application that bounty participants can use to see how much rewards they have accumulated and where they rank relative to others.</p> <p>All payouts will occur after the end of each monthly competition period.</p>","title":"\ud83c\udf0a Backend logic for Liquidity Bounties"},{"location":"release-notes/0.10.0/#refactored-strategy-and-market-classes","text":"<p>We invested considerable time during this release to refactor the strategy and market classes: moving shared code to the Base classes for each component and eliminating redundant code. We hope that this makes it easier for developers to customize Hummingbot and contribute to the codebase. This is an ongoing effort that we will continue during the next sprint.</p>","title":"\ud83d\udd17 Refactored strategy and market classes"},{"location":"release-notes/0.10.0/#other-bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <p>Below are the main ones that we fixed in this release:</p> <ul> <li>Updated 0x contract addresses to the new v2.1 addresses</li> <li>Fixed a bug that prevented trading bots from running due to a legacy data feed dependency</li> <li>Removed the need to enter in an Ethereum node address when running bots on centralized exchanges</li> <li>Added more detailed performance calculations in the <code>history</code> command</li> <li>Warnings in the <code>status</code> output are now cleared when the bot is re-configured</li> <li>Users can now re-register for Liquidity Bounties if something goes wrong the first time</li> </ul>","title":"\ud83d\udc1e Other bug fixes and miscellaneous updates"},{"location":"release-notes/0.10.1/","text":"<p>This release is a hotfix to version 0.10.0.</p> <ul> <li>Fixed a bug that prevented the <code>arbitrage</code> strategy from initializing</li> <li>Fixed a bug in the kill switch performance calculations</li> </ul>","title":"Release Notes - Version 0.10.1"},{"location":"release-notes/0.11.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.11.0! In this release, we focused on making Hummingbot more accessible for developers and improving the bounty hunter experience. Please see below for what's new in this release.</p>","title":"Release Notes - Version 0.11.0"},{"location":"release-notes/0.11.0/#introducing-the-developer-manual","text":"<p></p> <p>We have created a new section in our docs for developers who want to contribute to Hummingbot and extend its capabilities.</p> <p>Initially, it's focused on helping users understand how Hummingbot strategies work, especially the pure market making strategy.</p> <p>Over time, we will add more content to the other sections.</p>","title":"\ud83d\udcdd Introducing the Developer Manual"},{"location":"release-notes/0.11.0/#new-strategy-simple_trade","text":"<p></p> <p>We added a new strategy: Simple Trade. </p> <p>This strategy gives users a starter template upon which to customize their own strategies.</p>","title":"\ud83e\udd16 New strategy: <code>simple_trade</code>"},{"location":"release-notes/0.11.0/#bounty-registration-recovery","text":"<p>Liquidity Bounty participants can now use the <code>bounty --restore-id</code> command to recover their registration info.</p> <p>If you accidentally deleted your Docker container and lost your <code>conf_liquidity_bounty.yml</code> file, you can now recover it and conttinue to earn rewards.</p>","title":"\ud83d\udcdf Bounty registration recovery"},{"location":"release-notes/0.11.0/#coingecko-data-feed-integration","text":"<p>Accessing live market prices and other data that may affect trading is an important aspect of running trading bots.</p> <p>We have integrated the price feed from CoinGecko, one of the most comprehensive public crypto data APIs available.</p>","title":"\ud83d\udcca CoinGecko data feed integration"},{"location":"release-notes/0.11.0/#other-bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Bots will now respect the minimum order size on IDEX and not try to place orders smaller than minimum order size</li> <li>Refactored the strategy classes to move redundant code to the strategy base classes</li> <li>Added logic to take into account in-flight orders when determining whether a bot has sufficient balance to place orders</li> <li>Fixed bugs related to using the Telegram integration</li> </ul>","title":"\ud83d\udc1e Other bug fixes and miscellaneous updates"},{"location":"release-notes/0.11.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next month:</p> <ul> <li>Paper trading mode</li> <li>Liquidity bounty leaderboard</li> <li>Native Windows build</li> <li>Improvements to the pure market making strategy</li> <li>Updated Bamboo Relay connector</li> <li>New connector: Huobi Global</li> <li>New connector: Bittrex</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.11.1/","text":"<p>This release is a hotfix to version 0.11.0.</p> <ul> <li>Added checks to avoid duplicate orders in Binance</li> <li>Added fix to correctly track cancelled orders on Binance</li> <li>Added a fix for reconfiguring pure market making strategy</li> <li>Updates to Bamboo Relay connector (see full description here)</li> </ul>","title":"Release Notes - Version 0.11.1"},{"location":"release-notes/0.12.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.12.0! In this release, we focused on stability, optimization, and addressing numerous reported bugs.</p>","title":"Release Notes - Version 0.12.0"},{"location":"release-notes/0.12.0/#introducing-inventory-based-dynamic-order-sizing","text":"<p>The pure market making strategy now includes a feature that modifies the size of your bid/ask orders in order to maintain a target ratio of base to quote asset.  For example, if you are trading ETH-USDT and are targeting a 50%/50% ratio of ETH to USDT, if the value of your ETH holdings accounts for more than 50% of your current portfolio, the bid (buy ETH) size will be reduced while the ask (sell ETH) size will be increased.</p> <p>Read more about this feature here.</p>","title":"\u2696\ufe0f Introducing inventory-based dynamic order sizing"},{"location":"release-notes/0.12.0/#other-bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Fixed bug that shows all trades as \"sell\" in trade history.</li> <li>Fixed bug preventing restarting of a bot in telegram after kill switch is triggered.</li> <li>Re-enabled the <code>bounty</code> command in telegram.</li> <li>Updated ERC20 token register for recent new tokens.</li> <li>Added docker image label (<code>docker inspect INSTANCE</code>) to show which version of Hummingbot code is being used by that container, for debugging/attribution.</li> <li>Fixed bug on Binance preventing exit where Hummingbot incorrectly reported that outstanding orders failed to cancel, when in fact they were cancelled.</li> </ul>","title":"\ud83d\udc1e Other bug fixes and miscellaneous updates"},{"location":"release-notes/0.12.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next month:</p> <ul> <li>Paper trading mode</li> <li>Liquidity bounty leaderboard</li> <li>Native Windows build</li> <li>Improvements to the pure market making strategy</li> <li>New connector: Huobi Global</li> <li>New connector: Bittrex</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.12.1/","text":"<p>This release is a hotfix to version 0.12.0.</p> <ul> <li>Added a fix to correctly track inventory performance when trading two different pairs on the same exchange</li> <li>Added a fix to a critical bug in cross exchange market making strategy, where taker orders are being hedged.</li> </ul>","title":"Release Notes - Version 0.12.1"},{"location":"release-notes/0.13.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.13.0! This release is packed with new features, improved developer documentation/usability, and optimizations.</p>","title":"Release Notes - Version 0.13.0"},{"location":"release-notes/0.13.0/#introducing-the-liquidity-bounty-leader-board","text":"<p>The first liquidity bounty leaderboard is out!! Check out the Harmony $ONE Makers leader board.</p> <ul> <li>Real-time bounty program statistics</li> <li>List of reward tiers</li> <li>\ud83e\udd47\ud83e\udd48\ud83e\udd49 View standings of participants</li> <li>\ud83d\udd0d Look up stats for your liquidity bounties bot by Ethereum wallet address</li> </ul>","title":"\ud83c\udfc6 Introducing the liquidity bounty leader board!"},{"location":"release-notes/0.13.0/#reduce-number-of-ethereum-node-calls","text":"<p>Refactored block watchers and web3 wallet modules to materially reduce the number of interactions with the Ethereum node.</p>","title":"\ud83c\udf9a\ufe0f Reduce number of Ethereum node calls"},{"location":"release-notes/0.13.0/#developer-usability","text":"<p>As part of our ongoing efforts to make the Hummingbot code base more understandable and easier to use for developers, 0.13.0 includes quite a bit of new explanations and documentation:</p> <ul> <li>Developer documentation for cross exchange market making</li> <li>Developer documentation for adding exchange connectors</li> <li>Extensive comments in the strategy code files: arbitrage, cross exchange market making, and discovery</li> </ul>","title":"\ud83e\udd13 Developer usability"},{"location":"release-notes/0.13.0/#autostart-a-strategy-on-launch-with-new-cli-launch-commands","text":"<p>Hummingbot now allows you to launch Hummingbot and automatically start a previously configured strategy without requiring <code>config</code> and <code>start</code> to be run in the Hummingbot client interface.  Users can now specify the strategy, config file, and wallet details (if required for DEX trading) when launching Hummingbot, allowing for the strategy to auto-start.</p> <p>For more details, see here: trading strategy autostart.</p>","title":"\ud83d\udcbb Autostart a strategy on launch with new CLI launch commands"},{"location":"release-notes/0.13.0/#add-use-of-api-key-for-idex-connector","text":"<p>On Friday August 23, IDEX released updates to its servers requiring authentication/use of API keys to access its APIs.  For more information, see IDEX API key.</p>","title":"Add use of API key for IDEX connector"},{"location":"release-notes/0.13.0/#other-bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Remove quantity limit on <code>export trades</code> function.</li> <li>Fix DEX zero balance bug caused by a delay in receiving balance update following order cancellation.</li> <li>Fix \"fatal Not a git repositoy\" warning bug when operating Hummingbot with Docker.</li> <li>Bamboo Relay: update for DAI/TUSD/USDC stablecoin convention changes.</li> </ul>","title":"\ud83d\udc1e Other bug fixes and miscellaneous updates"},{"location":"release-notes/0.13.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-6 weeks:</p> <ul> <li>New connector: Huobi Global is in its final review and testing stages, release is forthcoming</li> <li>Improvements to the cross exchange market making strategy</li> <li>Improvements to the pure market making strategy</li> <li>New connector: Bittrex</li> <li>New community-contributed connector: Dolomite / Loopring</li> <li>Paper trading mode</li> <li>Native Windows build</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.14.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.14.0! This release includes a new Huobi connector and improved developer documentation.</p>","title":"Release Notes - Version 0.14.0"},{"location":"release-notes/0.14.0/#new-huobi-global-connector","text":"<p>Hummingbot now support Huobi Global!  You can read more about how to use the Huobi Global connector in the user manual.</p> <p>\u26a0\ufe0f Please note that there are some known issues for this connector which we are working on:</p> <ul> <li>Failure to cancel orders may result in Hummingbot losing track of some placed orders</li> <li>issue #745: batch cancel</li> <li>issue #750: cancel order</li> </ul>","title":"\ud83d\udd17 New Huobi Global connector"},{"location":"release-notes/0.14.0/#developer-usability","text":"<p>Our efforts to make the Hummingbot code base more understandable and easier to use for developers continues, with additional documentation for strategies:</p> <ul> <li>Developer documentation for arbitrage strategy.</li> <li>Developer documentation for discovery strategy.</li> </ul>","title":"\ud83e\udd13 Developer usability"},{"location":"release-notes/0.14.0/#other-bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Remove bounty status from Hummingbot client to optimize server performance; users should instead use the Harmony $ONE Makers leadboard to look up their bounty information.</li> <li>Fix discovery strategy currency symbol input formatting.</li> <li>Fix IDEX repeated <code>cancelled order</code> notifications when running <code>stop</code>.</li> </ul>","title":"\ud83d\udc1e Other bug fixes and miscellaneous updates"},{"location":"release-notes/0.14.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-6 weeks:</p> <ul> <li>Paper trading mode: this is a major feature and we have made a lot of progress.  It is nearly complete and we are currently testing and reviewing, aiming to have this feature included in the next release, 0.15.0</li> <li>Improvements to the cross exchange market making strategy</li> <li>Improvements to the pure market making strategy</li> <li>New connector: Bittrex</li> <li>New community-contributed connector: Dolomite / Loopring</li> <li>Native Windows build</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.15.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.15.0! This release is packed full of improvements to various strategies as well as a new major feature: paper trading mode.</p>","title":"Release Notes - Version 0.15.0"},{"location":"release-notes/0.15.0/#paper-trading-mode-released","text":"<p>This often asked for, long-awaited feature is now released!  Users can now run Hummingbot and simulate trading strategies without executing and placing actual trades.</p> <p>For more information on how to configure and use this strategy, see Paper Trading Mode.</p>","title":"\ud83d\udcdd Paper trading mode released!"},{"location":"release-notes/0.15.0/#improvements-to-the-pure-market-making-strategy","text":"<p>We have implemented changes to the pure market making strategy improved suggested by an institutional market maker that gives Hummingbot users more control. This allows bots to replenish and place orders once an existing order has been filled:</p> <ol> <li><code>filled_order_replenish_wait_time</code>: this new setting allows users to specify a delay in placing a new order once an existing order is filled.  The rationale here is to counter momentum and protect against a market that persistenly moves in one direction (for example, mitigates the strategy from continually buying when prices keep trending down).</li> <li><code>enable_order_filled_stop_cancellation</code>: buy and sell orders are typically placed as a pair (1 buy + 1 sell, or multiple pairs in multiple mode).  This option allows you to keep one side of the pairing outstanding when the other side is filled, e.g. keep the sell order outstanding when the corresponding buy order is filled.  This allows users to crystallize the bid-ask spread in the event that the market moves, if the corresponding sell order is eventually filled.  When one side is filled, a new pairing (buy/sell) is created to keep executing the strategy.  Note: this may result in an accumulation of outstanding orders, so users are advise to occasionally monitor the strategy and adjust, if necessary.</li> </ol> <p>For more details, read more about the new features here.</p>","title":"\ud83d\udcca Improvements to the pure market making strategy"},{"location":"release-notes/0.15.0/#improvements-to-the-cross-exchange-market-making-strategy","text":"<p>We implemented a number of changes to the cross exchange market making strategy to make the strategy easier to use and for users to understand:</p> <ul> <li>Use of base asset quantity for order sizing, for consistency with other Hummingbot strategies</li> <li>Creation of orders that meet minimum profitability, irrespective of position in the order book (previously, orders deeper in the order book were not being placed)</li> <li>Make it easier to reconcile order prices to hedge prices and profitability</li> </ul>","title":"\u2694\ufe0f Improvements to the cross exchange market making strategy"},{"location":"release-notes/0.15.0/#improvements-to-the-discovery-strategy","text":"<ul> <li>The UI for the discovery strategy has been updated to make it easier to input single tokens or trading pairs.</li> <li>Output is saved into a .csv file.</li> <li>Bug fix: discovery strategy errors arising from different token symbol methodologies (capitalization) on different exchanges.</li> </ul>","title":"\ud83d\udd0d Improvements to the discovery strategy"},{"location":"release-notes/0.15.0/#other-bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Remove requirements to maintain Ethereum balance to be eligibe to receive bounties</li> <li>Fix telegram <code>history</code>, which was truncating data: #743</li> <li>Fix cancel/cancel all bug in Huobi connector: #750</li> <li>Increase delay (0.3s to 1s) on Binance snapshot request to avoid rate limit errors</li> <li>Fix excessive error warnings in cross exchange market making strategy due to insufficient balance: #773</li> <li>Removed excessive <code>API call error</code> warnings</li> <li>Fix bug showing duplicate assets due to case sensitivity (e.g. treating ETH and eth as different assets)</li> </ul>","title":"\ud83d\udc1e Other bug fixes and miscellaneous updates"},{"location":"release-notes/0.15.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-6 weeks:</p> <ul> <li>New community-contributed connector: Dolomite / Loopring</li> <li>New connector: Bittrex</li> <li>Custom trading strategy for Market Protocol's LBTC and SBTC via Gitcoin bounty</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.16.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.16.0! This release includes updates with pure market making strategy, more documentation for developers, fix for known Huobi bugs in the previous release, and announcement with our active bounty program.</p>","title":"Release Notes - Version 0.16.0"},{"location":"release-notes/0.16.0/#harmony-protocol-one-makers-program-extended","text":"<p>Great news! We're happy to announce that Harmony Protocol has decided to extend the $ONE Makers program to October and beyond! Users can continue to earn rewards by market making for Harmony's ONE token on any supported exchanges where it trades. </p> <p>We will keep the rewards schedule the same for October.</p>","title":"\ud83c\udfc6 Harmony Protocol $ONE Makers program extended"},{"location":"release-notes/0.16.0/#penny-jumping-mode-in-pure_market_making-strategy","text":"<p>After you have placed an order, have you seen other orders respond by making their price slightly better than yours? This is called penny-jumping, and it can be a good way to ensure that your orders have the highest probability of being filled while maximizing the profit upon a fill.</p> <p>With pure market making strategy (in single order mode), users now have the option to automatically adjust the prices to just above top bid and just below top ask. See this page for more information.</p>","title":"\ud83c\udfc3 Penny jumping mode in pure_market_making strategy"},{"location":"release-notes/0.16.0/#transaction-costs-in-pure_market_making-strategy","text":"<p>We have conformed how transaction costs are handled across all strategies. By default, the pure market making strategy now incorporates transaction costs like exchange trading fees and gas costs into order prices. </p> <p>This is a configurable parameter, so users can turn this behavior off if they like. See this page.</p>","title":"\ud83d\udcb5 Transaction costs in pure_market_making strategy"},{"location":"release-notes/0.16.0/#more-developer-documentation","text":"<p>As part of our ongoing efforts to make the Hummingbot code base more understandable and easier to use for developers, we have published guidelines for community-contributed exchange connectors, as well as more documentation on the order lifecycle:</p> <ul> <li>Guidelines and expectations for community developers building exchange connectors</li> <li>Order lifecycle and market events for connectors</li> <li>Changed MarketSymbolPair to MarketTradingPairTuple in strategies for creating and cancelling orders</li> </ul>","title":"\ud83d\udcdd More developer documentation"},{"location":"release-notes/0.16.0/#other-bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Fixed assets showing 0 value in Huobi: #826</li> <li>Fixed Discovery strategy not showing profitability and optimization for Huobi: #825</li> <li>Fixed issue with cross-exchange strategy not placing maker orders if order book is empty: #854</li> <li>Added <code>exchange_trade_id</code> to all OrderFilledEvent in Huobi, IDEX, Radar and Coinbase as part of our efforts to standardize all TradeFill data sent to bounty server and check the websocket API to ensure all trades can be validated.</li> </ul>","title":"\ud83d\udc1e Other bug fixes and miscellaneous updates"},{"location":"release-notes/0.16.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-6 weeks:</p> <ul> <li>Developer tutorial on building custom strategies</li> <li>New connector: Bittrex</li> <li>New community-contributed connector: Dolomite / Loopring</li> <li>Custom trading strategy for Market Protocol's LBTC and SBTC via Gitcoin bounty</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.17.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.17.0! This release includes the launch of a Bittrex connector, developer documentation for custom strategies, and improvements to the portfolio performance calculation. We also continued to address reported and identified bugs.</p>","title":"Release Notes - Version 0.17.0"},{"location":"release-notes/0.17.0/#new-bittrex-connector","text":"<p>Hummingbot now supports Bittrex Global! Bittrex is a global, centralized cryptocurrency exchange based in Seattle, USA. It is an intuitive and easy to navigate exchange platform often finding its way into the top 3 US exchanges in terms of trading volume.</p> <p>Read more about how to use Bittrex connector with Hummingbot in the User Manual.</p>","title":"\ud83d\udd17 New Bittrex connector"},{"location":"release-notes/0.17.0/#new-performance-analysis-calculation","text":"<p>We redesigned how Hummingbot analyzes performance so that events unrelated to Hummingbot\u2019s actions (e.g. deposits, withdrawals, manual trades) do not impact the performance calculation; percentage profit is now based solely on assets spent and acquired from trading. Refer to our document in Performance Analysis for more information.</p>","title":"\ud83d\udcca New performance analysis calculation"},{"location":"release-notes/0.17.0/#more-developer-documentation","text":"<p>We published a developer tutorial on building custom strategies and documentation for the Perform Trade strategy.</p> <ul> <li>Developer Tutorial</li> <li>Perform Trade Strategy</li> </ul>","title":"\ud83d\udcdd More developer documentation"},{"location":"release-notes/0.17.0/#log-file-management-data-storage","text":"<ul> <li>A separate log file will now be generated daily. When a new log file is created, if there are more than 7 files, the oldest ones will be deleted in order to limit disk storage usage.</li> <li>AWS free tier provides 7.7GB of disk space. Ubuntu files take about 1.1 GB, Docker takes about 0.4 GB, and hummingbot image takes about 2.5 GB. This leaves about 3.7 GB for the logs and data files, which should be enough, especially now that we have set up log rotation. Refer to Amazon Web Services section under Setup a Cloud Server in User Manual.</li> </ul>","title":"\ud83d\udcdaLog file management / data storage"},{"location":"release-notes/0.17.0/#other-bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Fixed IDEX minimum ETH wallet check: #845</li> <li>Fixed bug related to paper trading mode account balance: #843</li> <li>Fixed run time warning error when restarting strategy after sending a list config command: #828</li> <li>Fixed bug where trades were not being tracked for a bounty: #918</li> <li>Fixed code bug in DDEX market: #923</li> <li>Fixed pure market making issue with orders getting stuck in client when hanging orders feature is enabled: #905 #914</li> <li>Refactor from float to decimal order price, amount, fees, balances, profitability related calculation and config in all strategy and market connectors</li> </ul>","title":"\ud83d\udc1e Other bug fixes and miscellaneous updates"},{"location":"release-notes/0.17.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-6 weeks:</p> <ul> <li>Developer tutorial on building custom strategies</li> <li>New community-contributed connector: Dolomite / Loopring</li> <li>Custom trading strategy for Market Protocol's LBTC and SBTC via Gitcoin bounty</li> <li>We announced a Gitcoin bounty for a Liquid connector and have awarded the project to a member of our community!  As we are planning future bounties, please contact the team (email | discord #dev | Dev Forum) if you are a developer and would be interested in future bounties or other contractor work.</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.17.1/","text":"<p>This release is a hotfix to version 0.17.0.</p> <ul> <li>Added a fix to correctly mount conf directory in docker </li> </ul>","title":"Release Notes - Version 0.17.1"},{"location":"release-notes/0.18.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.18.0! In this release, we continued addressing reported and identified bugs, added new features, introduced a new option of installing Hummingbot, and a new community-contributed connector.</p> <p>The big news of the week was also the announcement of our upcoming new liquidity mining platform that is currently under development.</p>","title":"Release Notes - Version 0.18.0"},{"location":"release-notes/0.18.0/#merged-community-contribution-dolomite-connector","text":"<p>Hummingbot can now trade on Dolomite, using the connector contributed by the Dolomite team!</p> <p>The connector is now available in Hummingbot and should work with existing strategies. Read more about Dolomite connector in the User Manual.</p>","title":"\ud83d\udd17 Merged community contribution: Dolomite connector"},{"location":"release-notes/0.18.0/#binary-installation-you-can-now-download-hummingbot-directly","text":"<p>Hummingbot can now be installed easily on Windows and macOS using a setup/install package that is available for download and will be updated with every new version release.</p> <p>Follow the links below for more information: * Install via Binary on Windows * Install via Binary on macOS</p>","title":"\ud83d\udcbe Binary installation: you can now download Hummingbot directly!"},{"location":"release-notes/0.18.0/#developer-usability","text":"<ul> <li>Developer documentation for Simple Trade</li> <li>Added missing templates for dev strategies: #960</li> </ul>","title":"\ud83e\udd13 Developer usability"},{"location":"release-notes/0.18.0/#other-bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Failed to submit cancel orders in Huobi: #750</li> <li>Added trading pair fetcher in Bittrex to prevent issues related to entering incorrect pair format: #985</li> <li>Added available balances feature in Radar Relay to fix errors and issues not creating orders: #942 #943</li> <li>Fixed issues with performance analysis where the asset is initialized with current trading pair but the trades being analyzed can include other trading pair that causes key error during processing: #974</li> <li>Fixed cross-exchange strategy where <code>order_size_portfolio_ratio_limit</code> was showing <code>order_size_taker_balance_factor</code>: #989</li> <li>Added version number to global and strategy config files to copy existing configs from an outdated file to the new one, to avoid reconfiguring API keys. Any outdated parameters will be deleted and empty ones will be prompted.</li> <li>Reduced excessive warning messages in Bittrex exchange.</li> <li>Unit testing for Bittrex market.</li> <li>Fixed unit tests for IDEX market and other tests that do not run in development branch.</li> <li>Strategy config files will now use a base-quote (e.g. ETH-USDT) format. Hummingbot users can still continue using the exchange\u2019s trading pair syntax.</li> <li>Fixed available balances feature in Bamboo Relay.</li> <li>Applied fix for a rare case where the API could respond with a 404 for a tracked limit order in Bamboo Relay.</li> </ul>","title":"\ud83d\udc1e Other bug fixes and miscellaneous updates"},{"location":"release-notes/0.18.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-6 weeks:</p> <ul> <li>Additional documentation on adding new connectors into Hummingbot</li> <li>Developer tutorial on building custom strategies</li> <li>Liquid connector</li> <li>Bitcoin.com Exchange connector</li> </ul> <p>Introducing Liquidity Mining</p> <p>We also announced a new liquidity mining platform, a digital marketplace for liquidity.  Read more about it here:</p> <ul> <li>Introduction to Liquidity Mining</li> <li>Liquidity Mining Whitepaper</li> </ul> <p>The team will be focusing in the coming weeks to realize and roll out this new platform.</p>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.18.1/","text":"<p>This release is a hotfix to version 0.18.0.</p> <ul> <li>Added a fix (#1035) to parse trading pair symbols for the cross-exchange market making strategy to address a bug (#1033) that was preventing the strategy from initializing.</li> </ul>","title":"Release Notes - Version 0.18.1"},{"location":"release-notes/0.19.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.19.0! In this release, we focused on working and testing upcoming connectors along with addressing identified and reported bugs.</p>","title":"Release Notes - Version 0.19.0"},{"location":"release-notes/0.19.0/#important-update-on-ui","text":"<ul> <li>We have created a consistent interface for all trading pairs on different exchanges, which means when you configure your bot,   You can enter \"BASE-QUOTE\" (e.g. ETH-USDT) for your trading pair input on any exchange. </li> </ul> <p>However, this means you have to edit all of your old config files and replace any trading_pair / symbol inputs to the new   format. </p>","title":"\ud83d\udcca Important update on UI"},{"location":"release-notes/0.19.0/#developer-usability","text":"<ul> <li>Tutorial for creating custom strategies now has its own dedicated section. It is currently a work-in-progress but you can check out the initial parts here.</li> <li>Architecture section that includes additional details for adding new connectors.</li> <li>Added detailed examples to Building Connectors in using aioconsole for testing.</li> </ul>","title":"\ud83e\udd13 Developer usability"},{"location":"release-notes/0.19.0/#other-bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Fixed orders getting stuck in Bittrex when hedging price moves too fast: #1042</li> <li>Fixed issues with starting arbitrage strategy using incorrect trading pair: #1062</li> <li>Fixed issues when placing orders with extremely low prices on Bittrex: #1032</li> <li>Updated Hummingbot icon to greenish blue which solves the problem of the white icon becoming invisible in white backgrounds (Windows).</li> <li>Added more tests to coinbase_pro data source and coinbase_pro user stream tracker.</li> <li>Updated the asset to ERC20 address mapping to support newer trading pairs on Bamboo Relay.</li> </ul>","title":"\ud83d\udc1e Other bug fixes and miscellaneous updates"},{"location":"release-notes/0.19.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-6 weeks:</p> <ul> <li>Additional documentation on adding new connectors into Hummingbot</li> <li>Developer tutorial on building custom strategies</li> <li>Liquid connector</li> <li>Bitcoin.com Exchange connector</li> <li>KuCoin connector</li> <li>HitBTC connector</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.19.1/","text":"<p>This release is a hotfix to version 0.19.0.</p> <ul> <li> <p>Added a fix (#1104) in Coinbase Pro market connector to address a bug (#1100) that was preventing order cancellation.</p> </li> <li> <p>Added a fix (#1097) to DDEX market to address a bug (#1090) in price handling.</p> </li> <li> <p>Added a fix (#1089) to handle the DAI to SAI migration, which causes a bug (#1087) in order submission on Radar Relay.</p> </li> </ul>","title":"Release Notes - Version 0.19.1"},{"location":"release-notes/0.2.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.2.0! This is the first update after the initial release of the alpha \ud83d\udc23client. As you might expect, it contains a lot of bug fixes and updates. We highlight some of the most signficant ones below:</p>","title":"Release Notes - Version 0.2.0"},{"location":"release-notes/0.2.0/#tab-autocomplete-and-dropdown-in-the-cli","text":"<p>You can now press Tab to auto-complete a command when you start typing it in the command line interface. In addition, dropdown menus display the available options as users select exchanges and trading pairs.</p> <p></p>","title":"\u2328 Tab-autocomplete and dropdown in the CLI"},{"location":"release-notes/0.2.0/#support-for-ethereum-node-services","text":"<p>You don't have to run your own node anymore! <code>hummingbot</code> now supports cloud-based Ethereum node services such as Infura. For the full list of supported node services, please see this link.</p>","title":"\u2601 Support for Ethereum node services"},{"location":"release-notes/0.2.0/#docker-compatible-version","text":"<p>We have created a pre-compiled version of <code>hummingbot</code> from Docker that contains all dependencies, which allows you to run hummingbot using a single line command. Docker images of <code>hummingbot</code> are available on Docker Hub at coinalpha/hummingbot. See Installation for more on how to install and run <code>hummingbot</code> using Docker.</p>","title":"\u2693 Docker-compatible version"},{"location":"release-notes/0.2.0/#separate-global-and-strategy-specific-configuration-files","text":"<p>In the future, we expect that users will run multiple strategies, including those that they create and customize. To accomodate this use case, we separated configuration settings into:</p> <ul> <li>Global settings that are used for all strategies, such as exchange API keys, wallets, and log/configuration file locations. By default, these are located in the <code>conf/conf_global.yml</code> file.</li> <li>Strategy-specific: settings such as exchanges, trading pairs, spread, and trade size that are applicable to a specific strategy. These are located in the <code>conf/</code> directory.</li> </ul>","title":"\ud83d\uddc3 Separate global and strategy-specific configuration files"},{"location":"release-notes/0.2.0/#trade-size-setting","text":"<p>While <code>hummingbot</code> automatically set trade sizes by default, some users have asked for the ability to manually override this setting. The strategy-specific settings now contain a <code>trade_size_override</code> parameter.</p> <p><code>trade_size_override</code> is denominated in the quote asset. To get the corresponding size for the base asset, divide by the price. For example, if the trading pair is ZRX-WETH, the current mid price is 0.002, and <code>trade_size_override</code> parameter is 1.00, then the trade sizes are 1 ETH for bid orders and 500 ZRX for ask orders.</p>","title":"\u2699 Trade size setting"},{"location":"release-notes/0.2.0/#flush-logs-in-real-time","text":"<p>Based on alpha user feedback, we realized that only saving logs when <code>hummingbot</code> exits may prevent logs from being saved in case of a crash. Now, logs messages are saved to the log file in real-time, so that they persist in the event of a crash.</p>","title":"\ud83d\udda8 Flush logs in real-time"},{"location":"release-notes/0.2.0/#bug-fixes-and-miscellaneous-updates","text":"<ul> <li>Fixed bugs that prevented automatic cancellations of orders upon exiting <code>hummingbot</code></li> <li>Fixed a bug with the Binance co-routine scheduler died and prevented Binance API calls from going through</li> <li>Improved error handling of invalid responses to command prompts</li> <li>Increased test coverage for the cross-exchange market making strategy</li> <li>Improved descriptiveness of log messages</li> <li>Added an initialization message after the <code>start</code> command</li> </ul>","title":"\ud83d\udc1e Bug fixes and miscellaneous updates"},{"location":"release-notes/0.2.0/#thank-you","text":"<p>Last but certainly not least, a big Thank You! to the alpha testers who went the extra mile to help improve <code>hummingbot</code> by submitting bugs and feature requests:</p> <ul> <li>leimingda from DDEX</li> <li>Pascal Belloncle</li> <li>Tom Schmidt (@tomhschmidt)</li> <li>Thomas Scaria (@tomscaria)</li> <li>Jacob from Bamboo Relay (@BambooRelay)</li> </ul>","title":"\ud83d\ude4f Thank you"},{"location":"release-notes/0.20.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.20.0! In this release, we mainly addressed a number of bugs. Separately from the <code>hummingbot</code> client, the team has been hard at work on the Liquidity Mining infrastructure, with campaigns on target for a mid-February launch.</p>","title":"Release Notes - Version 0.20.0"},{"location":"release-notes/0.20.0/#ui-update","text":"<ul> <li>We have added a feature that allows you to encrypt and decrypt your exchange API keys. Please review <code>Step 3: Configure a market making bot</code> in our Quickstart guide for more details.</li> </ul>","title":"\ud83e\udd16 UI Update"},{"location":"release-notes/0.20.0/#liquidity-mining-update","text":"<p>In mid February 2020, we plan to launch liquidity mining campaigns for our launch partners on 0x Mesh and Binance. There will be approximately US $3,000-$8,000 per month in rewards for liquidity miners to earn in each campaign.</p> <p>Also, we recently released a blog explaining how liquidity mining rewards are calculated on our new platform. For more information, read through our blog posts:</p> <ul> <li>Liquidity Mining Launch Update</li> <li>Demystifying Liquidity Mining Rewards</li> </ul>","title":"\ud83c\udf0a\u26cf Liquidity mining update"},{"location":"release-notes/0.20.0/#connectors-update","text":"<ul> <li>Finished Liquid.com exchange connector (Thanks to @zeitgeistf)</li> <li>Finished Bitcoin.com exchange connector (Thanks to @nionis)</li> <li>Bamboo Relay upgraded to 0x v3 protocol and can now be used with Hummingbot.</li> </ul>","title":"\ud83d\udd17 Connectors update"},{"location":"release-notes/0.20.0/#developer-usability","text":"<ul> <li>Added explanation in developer documentation for being specific when auto-completing exchange names. Read more in config definition conventions.</li> </ul>","title":"\ud83e\udd13 Developer usability"},{"location":"release-notes/0.20.0/#other-bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Fixed price calculation when trading BUSD stablecoin: #1120</li> <li>Fixed unexpected keyword argument 'trading_pairs' in Bamboo Relay: #1113</li> <li>Fixed bug in Bittrex where inventory skew creates order sizes lower than the minimum trade size/value: #1092</li> <li>Fixed auto-complete bug on prompts with the word \u2018exchange\u2019 even when it\u2019s not supposed to: #1159</li> <li>Fixed errors fetching new events from ERC20 contracts when trading SAI in DDEX and Radar Relay: #1147</li> <li>Fixed Bamboo Relay SSL error when running on Windows: #1158</li> <li>Fixed error running performance analysis when sending history command: #951, #1069, 1155</li> <li>Fixed error parsing trading pair with new token RUB in Binance: #1184</li> <li>Fixed default values not working for some parameters in pure market making: #1085</li> <li>Refactored pure market making strategy\u2019s penny jumping mode to best bid ask jumping</li> <li>Updated Bamboo Relay changing \u2018symbol\u2019 to \u2018trading_pairs\u2019</li> <li>Updated Dolomite changing \u2018symbol\u2019 to \u2018trading_pairs\u2019</li> </ul>","title":"\ud83d\udc1e Other bug fixes and miscellaneous updates"},{"location":"release-notes/0.20.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-6 weeks:</p> <ul> <li>Developer tutorial on building custom strategies</li> <li>KuCoin connector</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.21.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.21.0! In this release, we mainly addressed a number of bugs.</p>","title":"Release Notes - Version 0.21.0"},{"location":"release-notes/0.21.0/#developer-usability","text":"<p>We are officially announcing the TWAP custom strategy, a common algorithmic execution strategy used for splitting up large orders over time. Read more through the documentation about this strategy in Developer Manual.</p>","title":"\ud83e\udd13 Developer usability"},{"location":"release-notes/0.21.0/#other-bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Fixed bug triggering kill switch due to inventory changes outside of trades: #1145 </li> <li>Fixed default value not working for some parameters with pure market making strategy: #1085</li> <li>Fixed running into sqlite3.IntegrityError when orders are filled in Coinbase Pro: #1138, #1142</li> <li>Fixed memory leak issue caused by hanging orders in pure market making strategy: #1167</li> <li>Fixed Too aggressive API calls with hanging orders enabled: #1246</li> <li>Fixed Liquid connector not working due to missing pair ETH-USDC: #1234, #1231</li> <li> <p>Fixed available balances not being calculated correctly in Bamboo Relay: #1238</p> </li> <li> <p>Improvements to config encryption feature</p> </li> <li>Minor changes to Bittrex market testing to address some failing unit tests</li> <li>Better error handling for detecting wallet is \u2018None\u2019 / market not initialized</li> </ul>","title":"\ud83d\udc1e Other bug fixes and miscellaneous updates"},{"location":"release-notes/0.21.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-8 weeks:</p> <ul> <li>Developer tutorial on building custom strategies</li> <li>External price source for pure market-making strategy #1249</li> <li>KuCoin connector</li> <li>Bitfinex connector</li> <li>HitBTC connector</li> <li>gate.io connector</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.22.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.22.0! In this release, we added an external pricing source feature, addressed a number of bugs, and continuously working on the Liquidity Mining infrastructure.</p>","title":"Release Notes - Version 0.22.0"},{"location":"release-notes/0.22.0/#external-pricing-source","text":"<p>By default, pure market making strategy uses the order book\u2019s mid price to calculate limit order prices. We added a feature that allows you to use another mid price from external sources such as another exchange, data feed, or an external API.</p> <p>You may read through External Pricing Source Configuration in the user manual for more information.</p>","title":"\ud83d\udcca External Pricing Source"},{"location":"release-notes/0.22.0/#radar-relay-upgrade-to-0x-v3","text":"<p>The Radar Relay connector is broken right now because they recently moved their API to a new version. You may encounter errors or bugs when using the connector in this version. We will send an announcement in future release notes once Hummingbot\u2019s connector is updated.</p>","title":"\ud83d\udd17 Radar Relay upgrade to 0x v3"},{"location":"release-notes/0.22.0/#documentation-updates","text":"<p>Here we list recent major changes to Hummingbot docs:</p> <ul> <li>Added Liquidity Mining FAQ and list of upcoming campaigns</li> <li>Added External Pricing Source Configuration in Pure Market Making strategy</li> <li>Added steps in Troubleshooting section on how to locate the data folder where hummingbot_trades.sqlite folder is stored when running via Docker</li> <li>Added information in Troubleshooting section about Binance HTTP status 429 and 418 return codes</li> <li>Removed Bitcoin.com Exchange since this is no longer supported</li> </ul>","title":"\ud83d\udcd3 Documentation updates"},{"location":"release-notes/0.22.0/#other-bug-fixes","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Fixed issue on Windows when running pure market making strategy on multiple orders mode: #1261</li> <li>Fixed generic syntax on trading pair symbols not working: #1264</li> <li>Fixed unexpected errors when running pure market making with zero balance: #1292 </li> <li>Fixed a bug with Dolomite during start up: #1148</li> <li>Fixed websocket connection errors when using Liquid connector: #1266</li> <li>Fixed clock de-sync with Binance timestamp on Windows: #1262</li> <li>Fixed KeyError: \u2018ETH-CNY\u2019 on Liquid connector: #1251</li> </ul>","title":"\ud83d\udc1e Other bug fixes"},{"location":"release-notes/0.22.0/#miscellaneous-updates","text":"<ul> <li>Added <code>list encrypted</code> command to display all encrypted files in conf folder</li> <li>Added order expiration feature to pure market making for 0x Mesh orders</li> <li>Trading pair fetcher fix for Radar Relay migration</li> <li>Temporarily removed Radar Relay from being tested in the discovery strategy unit tests since Radar Relay has recently moved on to a different API</li> <li>Updated docker scripts to map data folder to easily access SQLite local database file where orders and trade data are stored</li> <li>Minor fix on Bamboo Relay unit tests</li> </ul>","title":"\u2699\ufe0f Miscellaneous updates"},{"location":"release-notes/0.22.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-8 weeks:</p> <ul> <li>Developer tutorial on building custom strategies</li> <li>KuCoin connector (in progress #1223, #1171)</li> <li>Bitfinex connector (in progress #1227, #1237)</li> <li>HitBTC connector (in progress #1224)</li> <li>gate.io connector</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.23.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.23.0! In this release, we are excited to announce the open beta of Liquidity Mining, a  new connector, easier to use pure market making strategy, and addressed a number of bugs.</p>","title":"Release Notes - Version 0.23.0"},{"location":"release-notes/0.23.0/#liquidity-mining-open-beta","text":"<p>We are excited to launch the Liquidity Mining Open Beta today! During the 4-week testing period, we welcome anyone who\u2019s interested to join us and try the Hummingbot Miners App. We will work hard to collect user feedback and fix bugs so that we can provide a great user experience when we go live on March 2, 2020.</p> <ul> <li>Learn more</li> </ul>","title":"\ud83c\udf0a\u26cf Liquidity mining open beta"},{"location":"release-notes/0.23.0/#user-testing-during-open-beta","text":"<p>We are inviting interested users to join our dedicated user testing program during the Open Beta period. Testers will receive 0.1 ETH for their time. </p> <p>For users who want to participate, please fill out this form. We\u2019ll reach out to you soon!</p> <p>Please refer to the following links and resources for more information:</p> <ul> <li>Hummingbot Miners</li> <li>Participation Guide</li> <li>Liquidity Mining FAQs</li> <li>Liquidity Mining Policy</li> </ul>","title":"\ud83e\uddea User testing during open beta"},{"location":"release-notes/0.23.0/#pure-market-making-configuration-simplified","text":"<p>Pure market making now has a basic/advanced split that will only prompt during configuration of the basic parameters such as the exchange name, trading pair, bid/ask spreads, cancel order wait time, and order amount.</p> <p>Users can configure the advanced features of this strategy by entering <code>Yes</code> when prompted, via <code>config &lt;parameter&gt;</code> command in Hummingbot, or by editing the strategy config file.</p> <p>More information about Basic Mode and Advanced Mode of Pure Market Making in our User Manual.</p>","title":"\ud83d\udcca Pure market making configuration simplified"},{"location":"release-notes/0.23.0/#new-kucoin-connector","text":"<p>Hummingbot now supports KuCoin exchange! Nicknamed the \"People's Exchange\"\u200b, Kucoin is easy to use for novice investors and in-depth enough for crypto enthusiasts. It has one of the world\u2019s most impressive trading pair selections, a wide range of alt coins with more than 300 trading pairs and are adding new ones regularly.</p> <p>Read more about how to use KuCoin connector in the User Manual.</p>","title":"\ud83d\udd17 New KuCoin connector"},{"location":"release-notes/0.23.0/#error-log-collection","text":"<p>Instead of using the old <code>hummingbot_logs.yml</code> templates for sending logs, we now added a prompt in Hummingbot that allows users to enable or disabled sending errors logs.</p> <p>Read through Logs and Logging section of our Utilities page for more information.</p>","title":"\ud83d\udcdc Error log collection"},{"location":"release-notes/0.23.0/#developer-documentation","text":"<p>We created a guide that walks you through how to prepare your development environment and get started developing for Hummingbot using Linux, macOS and Windows.</p> <p>Read through our Developer Manual for more information.</p>","title":"\ud83e\udd13 Developer documentation"},{"location":"release-notes/0.23.0/#documentation-updates","text":"<p>Here we list other recent major changes to Hummingbot docs:</p> <ul> <li>Updated quickstart guide and added GIF images for visual.</li> <li>Added instructions in Common \u2018How To\u2019 Questions on how to reset forgotten password, transferring files from/to WSL, and downloading a previous version of Hummingbot in Windows.</li> <li>Also added steps how to locate and map <code>data</code> folder when using Docker.</li> <li>Added information in Binance troubleshooting about Binance HTTP return codes 429 and 418, Binance API trading limits, and how to avoid these return codes when running Hummingbot.</li> <li>More examples with images and explanation for order optimization in pure market making strategy.</li> </ul>","title":"\ud83d\udcd3 Documentation updates"},{"location":"release-notes/0.23.0/#other-bug-fixes","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Fixed error when exporting trades in Windows: #1302</li> <li>Fixed bug losing track of orders on Coinbase Pro: #1357</li> <li>Fixed bug where Hummingbot keeps fetching status of non-existing orders in client: #1281</li> <li>Fixed bug in Liquid connector on non-fiat quote asset: #1331</li> <li>Fixed intermittent index errors with pure market making strategy causing orders not created: #1317</li> </ul>","title":"\ud83d\udc1e Other bug fixes"},{"location":"release-notes/0.23.0/#miscellaneous-updates","text":"<ul> <li>Added helpful links for liquidity mining and support to welcome screen</li> <li>Handled crossed order on Bamboo Relay</li> <li>Updated Coinbase Pro fees to 0.5% for both maker and taker orders</li> <li>Quick fix on trading pair fetcher</li> <li>Updated all <code>y/n</code> prompts to <code>Yes/No</code> in Hummingbot client</li> </ul>","title":"\u2699\ufe0f Miscellaneous updates"},{"location":"release-notes/0.23.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-8 weeks:</p> <ul> <li>Bitfinex connector (in progress #1227, #1237)</li> <li>HitBTC connector (in progress #1224)</li> <li>gate.io connector</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.24.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.24.0! In this release, we continuously worked on backend to improve Liquidity Mining in preparation for the upcoming launch, modified order amount to improve first time user experience, and addressed a couple of bugs in the Binance connector.</p>","title":"Release Notes - Version 0.24.0"},{"location":"release-notes/0.24.0/#liquidity-mining-going-live-on-march-3rd","text":"<p>We will be launching Liquidity Mining officially on Tuesday, March 3rd, 2020 12:00 AM UTC! We welcome anyone who\u2019s interested to earn token rewards on the Hummingbot Miners App.</p> <p>Please refer to the following links and resources for more information:</p> <ul> <li>Hummingbot Miners App</li> <li>Participation Guide</li> <li>Liquidity Mining FAQs</li> <li>Liquidity Mining Policy</li> </ul>","title":"\ud83c\udf0a\u26cf Liquidity mining going live on March 3rd"},{"location":"release-notes/0.24.0/#minimum-order-amount","text":"<p>The <code>order_amount</code> parameter in pure market making and cross-exchange strategy now displays during prompt a default minimum value. This allows users to prevent entering a value below the exchange\u2019s minimum order size resulting in no orders being created. Advanced users who want more flexibility can change or zero out the minimums in the global config file.</p>","title":"\ud83d\udcca Minimum order amount"},{"location":"release-notes/0.24.0/#documentation-updates","text":"<p>Here we list other recent major changes to Hummingbot docs:</p> <ul> <li>Reworked Liquidity Mining section* Improved quickstart guide for Windows, macOS and Linux</li> <li>Added information in FAQ on how to submit a feature/feedback request </li> <li>Added instructions in Common \u2018How To\u2019 Questions on how to locate the data file in Hummingbot installed via binary, checking status of multiple bots simultaneously, adding paper trade balance from inside the client, refresh Hummingbot window pane.</li> </ul>","title":"\ud83d\udcd3 Documentation updates"},{"location":"release-notes/0.24.0/#other-bug-fixes","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <ul> <li>Fixed error when exporting trades in Windows: #1302</li> <li>Added reduced polling logic for Binance API limit: #1379</li> <li>Fixed Binance clock desync in Windows resulting to problems with orders: #1388</li> </ul>","title":"\ud83d\udc1e Other bug fixes"},{"location":"release-notes/0.24.0/#exchange-deprecation-ddex-and-idex","text":"<p>We are making DDEX and IDEX exchange connectors as deprecated. The connector code will be removed from the  codebase. </p>","title":"\ud83c\ude32 Exchange Deprecation - DDEX and IDEX"},{"location":"release-notes/0.24.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-8 weeks:</p> <ul> <li>Bitfinex connector (in progress)</li> <li>Kraken connector (in progress #1454)</li> <li>HitBTC connector (in progress #1224)</li> <li>gate.io connector</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.24.1/","text":"<p>This release is a hotfix to version 0.24.0.</p> <ul> <li> <p>Added a fix (#1481) in configuration module to address a bug (#1100) that was preventing bot restart.</p> </li> <li> <p>Added a fix (#1472) in configuration module to address a bug that was preventing trading pair autocomplete.</p> </li> <li> <p>Added a fix (#1470) in exchange rate conversion module to address a bug (#1469) in coin gecko exchange rate errors.</p> </li> </ul>","title":"Release Notes - Version 0.24.1"},{"location":"release-notes/0.25.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.25.0! In this release, we continued working on the stability of Liquidity Mining backend, scaling/optimizing the infrastructure for quicker updates and incrased capacity. There are also major improvements in pure market making strategy including inventory skew, status outputs, hanging order mode, and filled order delays.</p>","title":"Release Notes - Version 0.25.0"},{"location":"release-notes/0.25.0/#updated-dependencies-to-improve-stability","text":"<p>In order to address memory leaks that cause the bot to crash, we upgraded Python to version 3.8 as well as <code>prompt-toolkit</code>, the client interface framework. These fixes should greatly improve bot stability and reduce crashes due to memory leaks.</p> <p>In addition, we advise users to not <code>stop</code> and <code>start</code> the bot frequently before running it long-term. This appears to elevate memory usage and cause the bot to crash more frequently. We continue to monitor this issue.</p>  <p>Updating from source</p> <p>Due to the updated Python version, users who install Hummingbot from source need to run <code>./uninstall</code> and <code>./clean</code> before updating.</p>","title":"\ud83d\udeb0 Updated dependencies to improve stability"},{"location":"release-notes/0.25.0/#new-status-command","text":"<p>We made some changes to how bot <code>status</code> is displayed to make it more informative for users.</p> <p></p> <ul> <li>Added a new section if Inventory Skew is enabled</li> <li>Added Spread to show the order's spread from the mid price</li> <li>Added Age column to show how long orders are outstanding from the time when created</li> <li>Added Hang column to indicate if the active order is a hanging order</li> <li>Shows the current Mid price</li> </ul>","title":"\ud83d\udca5 New <code>status</code> command"},{"location":"release-notes/0.25.0/#new-advanced-market-marketing-section","text":"<p>Due to the extreme market volatility in the last 2 weeks, many users have reporting losing money due to market swings. In this release, we have made major improvements to advanced market making features. We believe that these features will enable users to configure their bots so that they respond better to market volatility.</p> <p>See the new Strategy Configs section to learn more about how these features work. We have described the main changes below.</p>","title":"\ud83d\udcca New Advanced Market Marketing section"},{"location":"release-notes/0.25.0/#inventory-skew","text":"<p>We changed the inventory skew algorithm to a better behaved one to limit the user's trading exposure within a defined range. This prevents users from being over-exposed from the risks of a single side of the trade when the market keeps hitting limit orders on one side only.</p> <p>More information can be found in our documentation for Inventory Skew with sample scenarios.</p>","title":"Inventory skew"},{"location":"release-notes/0.25.0/#hanging-orders","text":"<p>Hanging orders are now tracked as active orders when sending the <code>status</code> command. These orders will get cancelled after sending the <code>stop</code> or <code>exit</code> command. Also, users can now specify through <code>cancel_hanging_order_pct</code> to cancel hanging orders when their spreads are above a certain value.</p> <p>Read through Hanging Orders in our documentation for more information.</p>","title":"Hanging orders"},{"location":"release-notes/0.25.0/#safer-defaults","text":"<p>In addition to these advanced features, we also changed the default values of the following parameters to make them safer for new users:</p> <ul> <li><code>cancel_order_wait_time</code>: now 30 seconds (previously 60 seconds)</li> <li><code>filled_order_replenish_wait_time</code>: now 60 seconds (previously 10 seconds)</li> </ul>","title":"Safer defaults"},{"location":"release-notes/0.25.0/#other-bug-fixes","text":"<ul> <li>Fixed Hummingbot resetting to a command line screen when errors are shown: #1519</li> </ul>","title":"\ud83d\udc1e Other bug fixes"},{"location":"release-notes/0.25.0/#miscellaneous-updates","text":"<ul> <li>Hummingbot Miner now supports Ledger Nano X as as well as mobile wallets such as Metamask Mobile, Coinbase Wallet, and Trust Wallet.</li> <li>Minimum order amount validation now applies to <code>order_start_size</code> prompt in multiple order mode</li> <li><code>start</code> command no longer cancels and replaces orders if the strategy is already running</li> </ul>","title":"\u2699\ufe0f Miscellaneous updates"},{"location":"release-notes/0.25.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the next 2-8 weeks:</p> <p>Hummingbot Miner</p> <ul> <li>Leaderboard: weekly rankings of top miners</li> <li>Snapshot view: detailed breakdown of reward allocation in an individual snapshot</li> <li>Market view: details about a specific trading pair</li> </ul> <p>Hummingbot client</p> <ul> <li>Bitfinex connector (in progress #1482)</li> <li>Kraken connector (in progress #1454)</li> <li>HitBTC connector (in progress #1224)</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.26.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.26.0! This release contains a lot of changes in the Hummingbot client, aimed at improving the user experience for new and existing users alike.</p>  <p>Old config files won't work</p> <p>This release contains many changes to the import process, so previous strategy configuration files will not be compatible with this version.</p>","title":"Release Notes - Version 0.26.0"},{"location":"release-notes/0.26.0/#new-password-screen","text":"<p></p> <p>Now, you are asked to enter your password when you start the Hummingbot client.</p>","title":"\ud83d\udd10 New password screen"},{"location":"release-notes/0.26.0/#revamped-commands","text":"<p>We have extensively revamped the commands in Hummingbot. New commands include:</p> <ul> <li><code>connect</code>: displays a list of available exchanges and helps you connect to them</li> <li><code>balance</code>: see your asset balances across all exchanges</li> <li><code>create</code>: create a bot</li> <li><code>import</code>: import an existing bot configurationn</li> </ul> <p>See the Command Reference for all commands.</p>","title":"\u2328\ufe0f Revamped commands"},{"location":"release-notes/0.26.0/#standardized-parameter-names-and-spreadpercent-inputs","text":"<p>We have changed parameter names in the Pure Market Making strategy to make them clearer. For example, the frequency used to cancel and refresh orders is now <code>order_refresh_time</code> (old name: <code>cancel_order_wait_time</code>). Here are all the new Basic and Strategy Configs parameters.</p> <p>In addition, we have standardized all spread and percent inputs, so that users enter percentage values. For example, to set a 1% <code>bid_spread</code>, enter <code>1</code> instead of <code>0.01</code>. To set a 5% <code>kill_switch_pct</code>, enter <code>5</code> instead of <code>0.05</code>.</p> <p>Any parameter names that ends with <code>-pct</code> or <code>-spread</code> use this format.</p>","title":"\ud83c\udf71 Standardized parameter names and spread/percent inputs"},{"location":"release-notes/0.26.0/#change-spreads-on-the-fly","text":"<p>An often-requested feature is the ability to adjust the bot without stopping it. We have started to make more parameters adjustable on the fly, starting with spreads.</p> <p>Now you can use the revamped config command to adjust spreads without stopping the bot. We plan to extend this functionality to other parameters such as order amount in the future.</p>","title":"\ud83d\udcb8 Change spreads on the fly"},{"location":"release-notes/0.26.0/#new-kraken-connector","text":"<p>Hummingbot now supports Kraken exchange! Kraken is a centralized exchange where users can trade not only several cryptocurrencies but as well as various fiat currencies such as USD, CAD, EUR, GBP, CHF and JPY.</p> <p>Read more about how to use Kraken connector here.</p>","title":"\ud83d\udd17 New Kraken connector"},{"location":"release-notes/0.26.0/#improved-telegram-integration","text":"<p>The Telegram integration now has a smaller keyboard that doesn't block the main view. Displayed messages are now in HTML instead of Markdown to improve readability.</p>","title":"\ud83d\udcf1 Improved Telegram integration"},{"location":"release-notes/0.26.0/#bug-fixes","text":"<ul> <li>Added Microsoft Visual C++ redist package as part of the setup process to fix binary installer for Windows: #1598</li> <li>Fixed broken trading pair fetcher in Radar Relay: #1441</li> <li>Fixed Bittrex connector failing to initialize markets: #1534</li> <li>Fixed incorrect price precision on some BTC pairs in Binance while paper trading that results to bad orders: #1618, #1617</li> <li>Fixed error invalid value <code>[]</code> when using discovery strategy: #1587</li> <li>Fixed how <code>history</code> shows prices of executed trades in Liquid connector: #1415, #1589</li> </ul>","title":"\ud83d\udc1e Bug fixes"},{"location":"release-notes/0.26.0/#coming-soon","text":"<p>Here's what we currently working on that we expect to ship in the 1-2 releases:</p> <ul> <li>Improved order refresh logic to avoid hitting exchange rate limits when placing many orders</li> <li>Bitfinex connector (in progress #1482)</li> </ul>","title":"\ud83d\ude80 Coming soon"},{"location":"release-notes/0.26.1/","text":"<p>This release is a hotfix to version 0.26.0.</p> <ul> <li>Added a fix (#1732) in configuration module to address a bug (#1731) that caused bot to spam trading error.</li> </ul>","title":"Release Notes - Version 0.26.1"},{"location":"release-notes/0.27.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.27.0! This release contains a number of new features for advanced users, along with many core stability improvements and bug fixes to the Hummingbot client.</p> <p>We're also starting to see more external contributions from the Hummingbot community. See Community for more information on how to contribute to Hummingbot.</p>  <p>Introducing the Hummingbot Public Roadmap</p> <p>In order to communicate the status of bug fixes and planned improvements, we recently began to publish the Hummingbot Public Roadmap. We will keep this page updated, so please bookmark this page to see the newest updates to the Hummingbot codebase.</p>","title":"Release Notes - Version 0.27.0"},{"location":"release-notes/0.27.0/#order-refresh-tolerance","text":"<p>In #1673, we introduce a new parameter in the Pure Market Making (PMM) strategy: <code>order_tolerance_refresh_pct</code>. This allows you to set an tolerance level for refreshing orders, so that the bot only cancels and replaces orders if the market price has moved by more than a certain threshold.</p> <p>This feature should help users create more custom bots and manage exchange rate limits better. See Order Refresh Tolerance for more information.</p>","title":"\ud83d\udd04 Order Refresh Tolerance"},{"location":"release-notes/0.27.0/#price-band","text":"<p>In #1713, we introduce two new parameters in the Pure Market Making (PMM) strategy: <code>price_ceiling</code> and <code>price_floor</code>. These parameters allow you set a price band within which your bot acts normally, but the bot behaves differently if the market price moves out of the band.</p> <p>This feature should help users express a view that the market will stay range-bound. See Price Band for more information.</p> <p>We want to thank \ud83d\ude4f community member petrioptrv for this contribution!</p>","title":"\ud83d\udcca Price Band"},{"location":"release-notes/0.27.0/#fixed-memory-leak-bug","text":"<p>We fixed a critical bug #1683 that caused the bot to leak memory after users run the <code>stop</code> command. This caused the bot to crash unexpectedly after running for a while. This issue is now fixed.</p>","title":"\ud83d\udc1eFixed Memory Leak Bug"},{"location":"release-notes/0.27.0/#kraken-bug-fixes","text":"<p>The Kraken exchange connector, which we released in <code>v0.26.0</code>, had a number of bugs. In this release, we have fixed a number of Kraken related bugs, including #1664, #1671, #1676, #1696, and #1693.</p> <p>This connector should be much more stable going forward.</p>","title":"\ud83d\udc19 Kraken Bug Fixes"},{"location":"release-notes/0.27.0/#limit_maker-order-type-in-binance","text":"<p>To fix #1633, we now use the <code>LIMIT_MAKER</code> order type by default for maker orders on Binance. This order type prevents your bot from making crossed orders that would be taken automatically. This feature should help users set tight spreads more effectively.</p>","title":"\u23f1 LIMIT_MAKER order type in Binance"},{"location":"release-notes/0.27.0/#external-db-support","text":"<p>After #1596, you can hook up the Hummingbot client to external SQL databases. See External Database for more information.</p> <p>We want to thank \ud83d\ude4f community member fengkiej for this contribution!</p>","title":"\ud83d\udc1e External DB Support"},{"location":"release-notes/0.27.0/#other-enhancements-and-fixes","text":"<ul> <li>Fixed a bug in which buy and sell order refreshes could sometimes get out of sync #1446</li> <li>Fixed a bug that prevented the XEMM strategy from starting #1657</li> <li>Fixed a bug that prevented the <code>status</code> command from execution in paper trading mode #1666</li> <li>Fixed a bug where paper trading mode didn't work on Binance due to the new <code>LIMIT_MAKER</code> order type #1762</li> <li>Fixed a bug with the Inventory Skew feature where orders sometimes alternate every cycle #1747</li> <li>Fixed a bug missing spreads in <code>status</code> in the XEMM strategy #1737</li> <li>Fixed a bug where the version number was missing from the splash screen #1739</li> <li>Fixed a bug in the Bittrex connector related to minimum order amount #1636</li> <li>Fixed a bug where the version number was missing from the splash screen #1739</li> <li>Removed deprecated deposit and withdrawal functions from the Binance connector #1731</li> <li>Removed incorrect trading pair fetcher code from the Bittrex connector #1700. We want to thank \ud83d\ude4f community member aktary for this contribution!</li> <li>Fixed bugs related to input validation of the <code>import</code> command #1704</li> <li>Fixed a bug with incorrect display of bot duration in <code>history</code> command #1686</li> </ul>","title":"\ud83d\udc1e Other Enhancements and Fixes"},{"location":"release-notes/0.28.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.28.0! This release contains the new Celo connector and the new <code>celo-arb</code> strategy, new parameters like Ping Pong and Minimum Spread, along with a number of bug fixes and enhancements.</p>  <p>Help shape the direction of the Hummingbot codebase</p> <p>In order to communicate the status of bug fixes and planned improvements, we recently began to publish the Hummingbot Public Roadmap. Help us prioritize stories by commenting on the ones you want, and feel free to submit new stories.</p>","title":"Release Notes - Version 0.28.0"},{"location":"release-notes/0.28.0/#new-celo-connector-and-strategy","text":"<p>We are excited to release a Hummingbot connector for Celo blockchain and exchange. Celo is a new Layer 1 protocol that relies upon arbitrageurs to maintain the peg on their cUSD stablecoin. Now, you can run the new <code>celo-arb</code> strategy to help stabilize their token price while arbitraging differences between centralized exchanges and the Celo blockchain.</p> <p>For more information, see the celo-arb strategy page and the Celo quickstart guide.</p>","title":"\ud83c\udf1e New Celo connector and strategy"},{"location":"release-notes/0.28.0/#new-parameter-ping_pong","text":"<p>We introduce a new parameter that allow your bot to alternate placing buy and sell orders, a simple way to keep your inventory levels constant. For more information, please see the ping pong documentation page.</p> <p>We want to thank \ud83d\ude4f community member petrioptrv for this contribution!</p>","title":"\ud83c\udfd3 New parameter: ping_pong"},{"location":"release-notes/0.28.0/#redesigned-pure-market-making-strategy","text":"<p>We have greatly simplified how the pure market making strategy works in this release, including the sequence of how parameters are applied and fee calculations. This allows external contributors to customize this strategy more easily.</p>","title":"\ud83d\udd04 Redesigned pure market making strategy"},{"location":"release-notes/0.28.0/#removed-dependency-on-external-data-feeds","text":"<p>Past versions of Hummingbot used the CoinGecko and CoinCap public APIs to fetch asset prices. However, this dependency caused issues for users when those APIs were unavailable. In this release, we have refactored Hummingbot so that the bot uses exchange order books to perform necessary conversions rather than data feeds.</p> <p>Note: Assets listed in the <code>balance</code> command are now listed in alphabetical order rather than in USD terms.</p>","title":"\ud83d\udce1 Removed dependency on external data feeds"},{"location":"release-notes/0.28.0/#trade-notifications","text":"<p>When the Hummingbot client makes a trade, it now appends a trade notification message to the lefthand output screen. Users of the Telegram integration should also see these notifications in the Telegram interface.</p>","title":"\u261d\ufe0f Trade notifications"},{"location":"release-notes/0.28.0/#other-enhancements-and-fixes","text":"<ul> <li>Added a <code>minimum_spread</code> parameter that auto-cancels orders below a certain spread #1712</li> <li>Paper trading mode now correctly applies fees charged by the exchange used #1722</li> <li>On 0x relayers, Hummingbot now uses <code>order_refresh_time</code> to set the order expiration time by default #1833</li> <li>Fixed a bug with BTC pairs on Kraken #1781</li> <li>Bamboo Relay maintainer Arctek fixed bugs with Bamboo Relay that prevented it from working #1800</li> <li>Fixed a bug with the <code>history</code> command on Kraken #1780</li> <li>Fixed a bug in which paper trading mode didn't work with the cross-exchange MM strategy #1672</li> </ul>","title":"\ud83d\udc1e Other Enhancements and Fixes"},{"location":"release-notes/0.28.1/","text":"<p>This release is a hotfix to version 0.28.0.</p>","title":"Release Notes - Version 0.28.1"},{"location":"release-notes/0.28.1/#enhancements","text":"<ul> <li>Added a fix (#1868) for an enhancement (#1669) to enter negative values for the <code>order_level_amount</code> parameter.</li> <li>Added a fix (#1869) for an enhancement (#1752) to set different bid and ask depth for order optimization.</li> </ul>","title":"Enhancements"},{"location":"release-notes/0.28.1/#bug-fixes","text":"<ul> <li>Added a fix (#1921) for a Kraken connector bug (#1901) that prevented BTC price updates.</li> <li>Added a fix (#1932) for a configuration bug (#1895) that caused a key error in the <code>celo-arb</code> strategy when running on Bittrex.</li> <li>Added a fix (#1892) for a Docker permissions bug (#1886) that caused errors when updating to the latest version.</li> <li>Added a fix (#1903) for a bug (#1902) where orders below minimum order size were submitted, causing trade log exceptions.</li> <li>Added a fix (#1883) for a bug (#1677) where available balance on Radar Relay was not updating.</li> </ul>","title":"Bug fixes"},{"location":"release-notes/0.29.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.29.0! In this release, we introduce a new feature that allows users to run custom scripts, new advanced pure market making parameter, a new connector and bug fixes.</p>","title":"Release Notes - Version 0.29.0"},{"location":"release-notes/0.29.0/#new-feature-scripts","text":"<p>The new Scripts feature allows the user to create mini-Python functions that adjust how Hummingbot behaves. For example, users can automate changes to bot params when certain conditions are met. Read more about the scripts feature in the Scripts section in the documentation.</p>  <p>Warning</p> <p>Currently, Scripts can only be used when running Hummingbot from source or with Docker. Using this feature in the Mac or Windows installers will crash the bot.</p>","title":"\ud83e\udd16 New feature: Scripts"},{"location":"release-notes/0.29.0/#new-connector-eterbase","text":"<p>Hummingbot now supports Eterbase exchange! Eterbase claims to be the first regulation-compliant European cryptocurrency exchange. Read more about how to use Eterbase connector.</p>","title":"\ud83d\udd17 New connector: Eterbase"},{"location":"release-notes/0.29.0/#new-param-take-crossed-orders","text":"<p>When using an external price source with pure market making, we added the <code>take_if_crossed</code> parameter that allows the strategy to fill the matching maker order when it results in a crossed market.</p> <p>In certain cases, this behavior may be desirable even if the fee is higher because of the likely future price mitigation.</p>","title":"\ud83d\udcca New param: Take Crossed Orders"},{"location":"release-notes/0.29.0/#other-enhancements-and-bug-fixes","text":"<ul> <li>Additional debugging message for websocket connection issues #1426 and when orders get stuck in Bittrex #1340</li> <li>Limit orders as LIMIT orders instead of makers and market orders are MARKET instead of takers #1980</li> <li>Added cap on base asset range to fix a bug with inventory skew aggressively creating more buy orders even within the target range #1657</li> <li>Reduced Infura consumption with websocket connection #1848</li> <li> <p>Replaced inventory skew with ping pong feature during basic configuration walkthrough with pure market making strategy #1970</p> </li> <li> <p>Fixed orders getting stuck in Hummingbot client when trading on Liquid #1295</p> </li> <li>Fixed a bug with inventory skew downsizing both buy and sell orders at the same time in a cycle #1719</li> <li>Fixed errors when tracking missing orders in web3 wallet class #1841</li> <li>Fixed a bug that creates orders using all the remaining balance even when below the specified <code>order_amount</code> #1893</li> <li>Fixed <code>_optionals</code> error when exiting Hummingbot #1946</li> <li>Fixed unhandled trading pair error when running <code>create</code> command in Kraken #1959</li> <li>Fixed client and Telegram notification when hanging orders are filled #1974</li> <li>Fixed missing fiat currency pairs in Binance #1979</li> </ul>","title":"\ud83d\udc1e Other Enhancements and Bug Fixes"},{"location":"release-notes/0.3.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.3.0! This release contains some huge updates and major bug fixes. We highlight some of the most signficant ones below:</p>","title":"Release Notes - Version 0.3.0"},{"location":"release-notes/0.3.0/#support-for-0x-open-order-book-relayers-radar-relay","text":"<p>Hummingbot now supports market making on 0x open order book relayers such as Radar Relay. Since it costs gas to cancel orders in open order book relayers, we have revised the cross-exchange market making strategy to include 3 new parameters:</p> <ul> <li><code>active_order_canceling</code>: if TRUE, the bot cancels orders when they are unprofitable based on <code>min_profitability</code>; otherwise, it relies on order expirations and renews them after they expire, unless <code>cancel_order_threshold</code> is reached.</li> <li><code>limit_order_min_expiration</code>: expiration time in seconds per order. This parameter is ignored when market making on exchanges that don't support expirations.</li> <li><code>cancel_order_threshold</code>: if <code>active_order_cancelling</code> is FALSE, the bot will cancel orders when the spread between maker and taker markets reaches this lower threshold, which can be zero or negative. This allows the bot to cancel orders when they become unprofitable enough that paying gas to do so makes sense.</li> </ul> <p>When this connector has been tuned for Radar Relay, we believe that it should be usable with minor modifications for other 0x open order book relayers that implement the Standard Relayer API. If you are a 0x open order book relayer and would like to discuss integration with Hummingbot, please join our Discord and let us know!</p>","title":"\ud83d\udcc8Support for 0x open order book relayers (Radar Relay)"},{"location":"release-notes/0.3.0/#new-strategy-arbitrage","text":"<p>We have added the second strategy mentioned in our whitepaper: arbitrage. Arbitrage allows you to monitor two identical or similar trading pairs on different exchanges and wait for a crossed market (when you can buy for a lower price on one exchange and sell for a higher price on another). Note that since the arbitrage strategy used different parameters from cross-exchange market making, Hummingbot will prompt you to create a separate configuration file for arbitrage.</p> <p>With two strategies and three exchanges, there are now 6 possible combinations of cross-exchange strategies that Hummingbot users can try.</p>","title":"\u2692 New strategy: Arbitrage"},{"location":"release-notes/0.3.0/#configurable-data-collection","text":"<p>While we only collect data in order to improve Hummingbot and report aggregate volume to exchange partners, we recognize that users attitudes toward data collection vary widely. Therefore, we've made data collection fully modifiable via the configuration file <code>conf/hummingbot_logs.yml</code>. We will document how users can customize these settings, as well as publish a few configurations, shortly.</p>","title":"\u2699 Configurable data collection"},{"location":"release-notes/0.3.0/#support-for-multiple-configurations-per-strategy","text":"<p>Since we expect that users will experiment with different combinations of trading pairs, configuration settings, and exchanges, we wanted to allow users to save multiple configurations per strategy. This allows users to load a saved configuration when they start a bot, as well as run multiple bots simultaneously.</p>","title":"\ud83d\udcbe Support for multiple configurations per strategy"},{"location":"release-notes/0.3.0/#bug-fixes-and-miscellaneous-updates","text":"<ul> <li>Fixed another bug related to the Binance co-routine scheduler that prevented Binance API calls from going through after running the bot for a while</li> <li>Fixed a bug in which the bot didn't wait for confirmation of cancelled orders before placing new ones, giving rise to insufficient balance errors</li> <li>Fixed bugs related to clock difference errors between user's machine and Binance</li> <li>Fixed a status pool loop error that affected DDEX and Radar Relay</li> <li>Synchronized file names to use the <code>cross exchange market making</code> name rather than the old <code>hedged_market_making</code> name</li> </ul>","title":"\ud83d\udc1e Bug fixes and miscellaneous updates"},{"location":"release-notes/0.3.0/#thank-you","text":"<p>Last but certainly not least, a big Thank You! to the alpha testers who went the extra mile to help improve <code>hummingbot</code> by submitting bugs and feature requests, etc.</p> <ul> <li>Everyone who participated in design feedback, including <code>psq</code>, <code>reverendus</code>, <code>mf10r_vc</code>, <code>thomas_wyre</code>, and Shichao/Mingda (DDEX)</li> <li><code>christopher</code> (1kx)</li> <li><code>Joshua | Bamboo Relay</code></li> </ul>","title":"\ud83d\ude4f Thank you"},{"location":"release-notes/0.3.1/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.3.1! This is the official public beta release. We list the new updates since the last release below.</p>","title":"Release Notes - Version 0.3.1"},{"location":"release-notes/0.3.1/#open-source","text":"<p>Hummingbot is now open source! You can check out the source code on Github.</p>","title":"\ud83d\ude4c Open source"},{"location":"release-notes/0.3.1/#conversion-class","text":"<p>To facilitate cross-exchange trading strategies in which there may exist a basis between the assets (i.e. trading a DAI pair on one exchange and a USDT pair on another exchange), we have introduced a conversion class, a global configuration which sets an conversion rate between two assets. You can choose whether the conversion rate is determined dynamically via a price feed or fixed statically by you. By default, we pull conversion rates dynamically using the CoinCap API.</p> <p>This allows users to utilize the cross-exchange market making strategy on WETH-DAI, the most active trading pair on decentralized exchanges currently, while hedging their filled order on a different trading pair on a centralized exchange, like ETH-USDT on Binance.</p>","title":"\u2194\ufe0f Conversion class"},{"location":"release-notes/0.3.1/#bug-fixes-and-miscellaneous-updates","text":"<ul> <li>Fixed a Segfault bug when using DDEX connector</li> <li>Fixed an bug in which users would quickly hit rate limit issues when using the Radar Relay connector</li> <li>Fixed a bug that unmasked the wallet password when users inspect their prior command history (\ud83d\ude4f<code>Joshua | Bamboo Relay</code>)</li> <li>Fixed a bug that cause errors when trading ERC-20 tokens with less then 18 decimals</li> <li>Fixed a status polling error in the Radar Relay connector</li> </ul>","title":"\ud83d\udc1e Bug fixes and miscellaneous updates"},{"location":"release-notes/0.30.0/","text":"<p>\ud83d\ude80 Welcome to <code>hummingbot</code> version 0.30.0!</p>","title":"Release Notes - Version 0.30.0"},{"location":"release-notes/0.30.0/#new-command-balance-limit","text":"<p>As described in feature request #1443, users can now apply a limit to the total balance to allocate how much the bot can access in an exchange.</p> <p>This command is useful when running multiple bots sharing the same assets in an account e.g. setting a 50% USDT limit to each bot running BTC-USDT and ETH-USDT pair.</p> <p>Run the command <code>balance limit [exchange] [asset] [amount]</code> to do this. More information in balance command.</p>","title":"\ud83d\udcb5 New command: Balance Limit"},{"location":"release-notes/0.30.0/#new-command-balance-paper","text":"<p>Adding paper trade balances can now be done easier from the Hummingbot client by running <code>balance paper [asset] [amount]</code>. Also, users can now check paper trading account balances by running <code>balance paper</code> command.</p> <p>For more information and sample usage, refer to balance command in our documentation.</p>","title":"\ud83d\udcdc New command: Balance Paper"},{"location":"release-notes/0.30.0/#new-command-order-book","text":"<p>Users can now see the market's order book by running the order_book command from the Hummingbot CLI while a strategy is running. </p> <p>By default, this command shows the top 5 bid/ask prices with order volume. It can be used with optional arguments like <code>--lines</code> to specify the number of lines to show, <code>--markets</code> and <code>--exchange</code> if running on cross-exchange and arbitrage strategy.</p>","title":"\ud83d\udcd6 New command: Order Book"},{"location":"release-notes/0.30.0/#continuously-saving-trades-in-csv-file","text":"<p>In the previous versions, users can only see the list of trades in the current session from the <code>history</code> command i.e. restarting Hummingbot will start a fresh list of trades in the new session.</p> <p>Starting this release, all trades are now continuously saved in a CSV file that can be accessed in the <code>data</code> folder.</p>","title":"\ud83d\udcdd Continuously saving trades in CSV file"},{"location":"release-notes/0.30.0/#improved-trades-list-management-in-database","text":"<p>We changed how Hummingbot manages trades stored in the local database. This allows users to run multiple bots from the same parent directory without mixing up the list of trades in the history output.</p> <p>This will also allow running multiple windows of Hummingbot via binary without errors when running the <code>history</code> command.</p>","title":"\ud83d\uddc4 Improved trades list management in database"},{"location":"release-notes/0.30.0/#other-enhancements","text":"<ul> <li>Ethereum node and websocket can now be configured using the <code>config</code> command #2011</li> <li>Removed <code>hang</code> column from <code>status</code> output #2037</li> <li>Improved trade fill table in <code>history</code> command #2039</li> <li>Added validation for script file path when using absolute path #2035</li> <li>Passwords created the first time are now saved #2066</li> <li>Completely removed Bitcoin.com connector from codebase #2095</li> <li>Implemented Huobi websocket API as part of maintaining user account balances in market connectors #2140</li> </ul>","title":"\ud83d\udd27 Other Enhancements"},{"location":"release-notes/0.30.0/#bug-fixes","text":"<ul> <li>Removed failing unit test <code>test_deposit_info</code> in Liquid #1574</li> <li>Fixed duplicate trades bug appearing in <code>history</code> output #1663</li> <li>Fixed reappeared bug in Kraken where performance calculation in <code>history</code> is incorrect #1671</li> <li>Fixed reappeared <code>decimal.DivisionByZero</code> error in Kraken when running <code>history</code> command #1780</li> <li>Fixed bug in KuCoin getting stuck when cancelling limit orders #1804</li> <li>Fixed failing unit tests <code>test_limit_maker_rejections</code> and <code>test_server_time_offset</code> in Binance #1819</li> <li>Fixed reappeared bug in Kraken where best bid and ask price are not updating #1901</li> <li>Fixed <code>IndexError: list index out of range</code> when using order optimization with ping pong and price band #1944</li> <li>Fixed how balances are shown per exchange in an easy to read format #2041</li> <li>Fixed high CPU usage when running on decentralized exchange connectors #2049</li> </ul>","title":"\ud83d\udc1e Bug Fixes"},{"location":"release-notes/0.30.0/#developers-updates","text":"<ul> <li>Deprecated Market order type in centralized exchange connectors #1911</li> <li>Added <code>LIMIT_MAKER</code> order type to all applicable market connectors #1912</li> <li>Added <code>last_trade_price</code> in market connectors #2036</li> <li>Removed deposit and withdrawal functionality from all connectors #2061</li> </ul>","title":"Developers Updates"},{"location":"release-notes/0.30.0/#connector-change-summary","text":"","title":"Connector Change Summary"},{"location":"release-notes/0.30.0/#orderbooktrackerdatasource","text":"<ul> <li>Removed <code>get_active_exchange_markets</code>, <code>get_trading_pairs</code> and <code>get_tracking_pairs</code> - trading pairs are passed in during init.</li> <li>Added <code>get_last_traded_prices</code> and <code>get_new_order_book</code> functions</li> </ul>","title":"OrderBookTrackerDataSource"},{"location":"release-notes/0.30.0/#orderbooktracker","text":"<ul> <li>Removed <code>data_source</code> and <code>_refresh_tracking_tasks</code> functions</li> </ul>","title":"OrderBookTracker"},{"location":"release-notes/0.30.0/#market-connector","text":"<ul> <li>Removed <code>MARKET</code> order type for centralized exchanges. </li> <li>Added <code>LIMIT_MAKER</code> order type if your exchange supports this type of orders, please integrate it into the connector.</li> <li>Added <code>in_flight_orders</code> property. </li> <li>Added <code>supported_order_types</code> function</li> </ul>","title":"Market Connector"},{"location":"release-notes/0.30.0/#unit-testing","text":"<ul> <li>Added <code>test_limit_maker_rejections</code> and <code>test_limit_makers_unfilled</code> - to test new LIMIT_MAKER order type.</li> </ul> <p>See Building Connectors for details. </p>","title":"Unit Testing"},{"location":"release-notes/0.31.0/","text":"","title":"Release Notes - Version 0.31.0"},{"location":"release-notes/0.31.0/#new-connector-cryptocom","text":"<p>We are thrilled to announce that we partnered with leading crypto exchange Crypto.com to integrate Hummingbot\u2019s trading capabilities and bring liquidity mining to the exchange!</p> <p>Crypto.com was founded in 2016 on a simple belief: it\u2019s a basic human right for everyone to control their money, data and identity. Crypto.com serves over 3 million customers today, providing them with a powerful alternative to traditional financial services through the Crypto.com App, the Crypto.com Card and the Crypto.com Exchange.</p> <p>Read more in our blog post: Hummingbot Partners with Crypto.com Exchange for High Frequency Trading and Liquidity Mining</p> <p>More information in our documentation here on how to use the connector.</p>","title":"\ud83d\udd17 New connector: Crypto.com"},{"location":"release-notes/0.31.0/#bittrex-connector-v3-update","text":"<p>As Bittrex announced in a recent tweet, their API v3 is now live. According to Bittrex v1-1 documentation the old API v1.1 will be deprecated by September 30, 2020.</p> <p>In line with this change, we updated our Bittrex connector to make it compatible with v3 API along with unit test cases.</p>","title":"\ud83d\udd17 Bittrex Connector v3 Update"},{"location":"release-notes/0.31.0/#improved-external-pricing-source-for-pure-market-making","text":"<p>In the previous versions, Hummingbot can use the order book's mid price of your current market or another supported market when using the external pricing source. Starting this release, users can also use the market's last trade price, best bid price or best ask price as the price reference point when creating orders.</p> <p>More information in our documentation in External Pricing Source Configuration page.</p> <p>We want to thank \ud83d\ude4f community member petrioptrv for this contribution!</p>","title":"\ud83d\udcca Improved External Pricing Source for Pure Market Making"},{"location":"release-notes/0.31.0/#developers-updates","text":"","title":"\ud83d\udcbb Developers Updates"},{"location":"release-notes/0.31.0/#connector-change-summary","text":"<p>In the ongoing effort to make the Hummingbot code base more developer friendly, we refactored several parts of the exchange connector code to make it easier to add additional exchanges in the future:</p> <ul> <li>Added a new <code>ExchangeBase</code> class to replace <code>MarketBase</code> #2243, #2250</li> <li>Removed <code>OrderBookTrackerDataSourceType</code> and <code>UserStreamTrackerDataSourceType</code> from connector #2244, #2270</li> <li>Moved exchange connectors to a new location: hummingbot/connector/exchange#2244, #2270</li> <li>Added <code>_real_time_balance_update</code> to <code>ExchangeBase</code>, set this to <code>True</code> if your connector doesn't provide account balance  update via web socket API, you will also need to set <code>_in_flight_orders_snapshot</code> and <code>_in_flight_orders_snapshot_timestamp</code>  during balance update #2017, #2224</li> <li>Formalize trading pair format, except within the connector module, all trading pairs are in BASE-QUOTE format #2091, #2097</li> <li>Remove market argument on <code>InFlightOrderBase</code> (it was never used for anything)</li> </ul>","title":"Connector Change Summary"},{"location":"release-notes/0.31.0/#bug-fixes","text":"<ul> <li>Fixed <code>OrderBookTracker</code> trade execution bug #1330</li> <li>Fixed bug where some orders are not created due to broken account balance update #2012</li> <li>Fixed inconsistent adjusted order amount with inventory skew #2058</li> <li>Fixed API requests intermittently failing on Kraken connector #2204  We want to thank \ud83d\ude4f community member TheHolyRoger for this contribution!</li> <li>Fixed bug with Liquid connector incorrectly integrating web socket for user data stream #2222</li> <li>Added DAI to trading pair splitter to address an issue where DAI trading pairs are not showing in Binance connector #2255</li> </ul>","title":"\ud83d\udc1e Bug Fixes"},{"location":"release-notes/0.32.0/","text":"","title":"Release Notes - Version 0.32.0"},{"location":"release-notes/0.32.0/#new-connector-bitfinex","text":"<p>Hummingbot now supports Bitfinex exchange! Bitfinex is a cryptocurrency exchange owned and operated by iFinex Inc., which is headquartered in Hong Kong and registered in the British Virgin Islands.</p> <p>Bitfinex was founded in December 2012 as a peer-to-peer Bitcoin exchange, offering digital asset trading services to users around the world. Bitfinex initially started as a P2P margin lending platform for Bitcoin and later added support for more cryptocurrencies.</p> <p>Read more about how to use Bitfinex connector here.</p>  <p>Note</p> <p>Bitfinex connector is currently not working with cross-exchange and arbitrage strategy.</p>","title":"\ud83d\udd17 New connector: Bitfinex"},{"location":"release-notes/0.32.0/#new-connector-loopring","text":"<p>The connector for Loopring exchange is also in this release! Loopring is the first scalable DEX protocol built with zkRollup for Ethereum. Loopring Exchange is the first decentralized trading platform built on top of the Loopring protocol.</p> <p>Read more about how to use Loopring connector here.</p>","title":"\ud83d\udd17 New connector: Loopring"},{"location":"release-notes/0.32.0/#new-pure-market-making-feature-order-override","text":"<p>Advanced users can now customize and specify how Hummingbot creates orders in terms of order levels, spread and size.</p> <p>Since this feature is for advanced users, it is not configurable from the Hummingbot client. Follow the guide in our documentation how to use the Order Override feature.</p>","title":"\ud83c\udf9b New pure market making feature: Order Override"},{"location":"release-notes/0.32.0/#new-price-reference-last-own-trade-price","text":"<p>We added <code>last_own_trade_price</code> to <code>price_type</code> in pure market making to allow users use their own last trade price as a price reference when creating orders.</p> <p>More information in External Pricing Source Configuration.</p>","title":"\ud83d\udcc8 New price reference: Last Own Trade Price"},{"location":"release-notes/0.32.0/#more-parameters-configurable-on-the-fly","text":"<p>The following parameters can now be reconfigured even without stopping the strategy. Take note that changes will take effect on the next order refresh.</p> <ul> <li><code>order_amount</code></li> <li><code>order_levels</code></li> <li><code>order_level_spread</code></li> <li><code>filled_order_delay</code></li> <li><code>inventory_skew_enabled</code></li> <li><code>inventory_target_base_pct</code></li> <li><code>inventory_range_multiplier</code></li> </ul>  <p>Note</p> <p>Currently, <code>inventory_target_base_pct</code> can only be configured when running on centralized exchange connectors.</p>","title":"\ud83d\udeeb More parameters configurable on the fly"},{"location":"release-notes/0.32.0/#new-command-ticker","text":"<p>This new command displays a specific market's ticker prices such as best bid, best ask, mid price and last trade price. By default, it runs the output 10 times with 1 second in between intervals.</p> <p>Optional arguments for this command and sample usage can be found in our documentation.</p>","title":"\ud83d\udcca New command: Ticker"},{"location":"release-notes/0.32.0/#developers-updates","text":"","title":"\ud83d\udcbb Developers Updates"},{"location":"release-notes/0.32.0/#connector-change-summary","text":"<p>In the ongoing effort to make the Hummingbot code base more developer friendly, we refactored several parts of the exchange connector code to make it easier to add additional exchanges in the future:</p> <ul> <li>A major update on Task 4. Required Connector Configuration, most of these tasks are now contained within the connector package, you no longer need to update various other files in the Hummingbot. </li> </ul>","title":"Connector Change Summary"},{"location":"release-notes/0.32.0/#other-enhancements","text":"<ul> <li>In arbitrage strategy, the <code>status</code> command displays last calculated profitability #2151</li> <li>The <code>status</code> command displays the price reference used when creating orders #2332</li> </ul>","title":"\ud83d\udd27 Other Enhancements"},{"location":"release-notes/0.32.0/#bug-fixes","text":"<ul> <li>Cross exchange strategy not executing taker orders due to illegal characters #2226</li> <li>Celo balance update error when celocli new version is available #2319</li> <li>Fail to submit orders in cross exchange due to HTTP status 400 \"BAD_REQUEST\" #2326</li> <li>Kucoin connector takes a while to get ready #2348</li> </ul>","title":"\ud83d\udc1e Bug Fixes"},{"location":"release-notes/0.33.0/","text":"","title":"Release Notes - Version 0.33.0"},{"location":"release-notes/0.33.0/#new-amm-arb-strategy-and-binance-perpetual-market-making-strategybeta","text":"<p>We are excited to release not one but two strategy:</p> <ul> <li>AMM Arb strategy. For more information, see the AMM Arb strategy.</li> <li>Binance Perpetual Market Making Strategy. See the Perpetual Market Making Strategy for more info.</li> </ul>","title":"\ud83c\udf1e New AMM Arb strategy and Binance Perpetual Market Making Strategy(Beta)"},{"location":"release-notes/0.33.0/#new-argument-live","text":"<p>#2519: This new argument displays live updates for the following commands:</p> <ul> <li>ticker, see sample usage in our documentation</li> <li>orderbook, see sample usage in our documentation</li> <li>status, see sample usage in our documentation</li> </ul>","title":"\ud83d\udcca New argument [--live]"},{"location":"release-notes/0.33.0/#connectors","text":"<p>The following connectors are now supported:</p> <ul> <li>#1518, Binance.us was launched in September 2019, Binance.US is a digital asset marketplace, powered by matching engine and wallet technologies licensed from the world\u2019s largest cryptocurrency exchange, Binance. Operated by BAM Trading Services based in San Francisco, California, Binance.US provides a fast, secure and reliable platform to buy and sell cryptocurrencies in the United States.</li> <li>#2246, Binance Futures currently offers the highest leverage of 125x margin among major crypto exchanges, making it one of the most competitive products in the market. Note: Binance Perpetual connector is released as a beta version(0.33), trade it at your own risk.</li> <li>#2262, OKEX is a world-leading cryptocurrency exchange, providing advanced financial services to traders globally by using blockchain technology.</li> <li>#2358,#2474, Balancer is an automated portfolio manager, liquidity provider, and price sensor.</li> </ul>","title":"\ud83d\udd17 Connectors"},{"location":"release-notes/0.33.0/#uiux-enhancements","text":"<ul> <li>#2430: Additional connector status column display when using <code>connect</code> command. Also, you can view the connector status in the readme file.</li> <li>#2179: The Hummingbot client top and bottom navbars are enhanced with usage information, see User Interface for details.</li> <li>#2129: The <code>history</code> command is redesigned with more information and additional arguments, see History for details.</li> </ul>","title":"\ud83d\udd04 UI/UX Enhancements"},{"location":"release-notes/0.33.0/#developers-updates","text":"","title":"\ud83d\udcbb Developers Updates"},{"location":"release-notes/0.33.0/#refactoring","text":"<ul> <li>#2452: Update Docker helper scripts</li> <li>#2482: Unify connector settings loading process.</li> <li>#2522: Loopring connector refactoring and fixes.</li> </ul>","title":"Refactoring"},{"location":"release-notes/0.33.0/#database","text":"<p>#2106: Create new SQLite db files for individual strategies.</p>","title":"\ud83d\udcc1 Database"},{"location":"release-notes/0.33.0/#scripts","text":"<ul> <li>#2411: A new script template is added to help developers get started quickly.</li> <li>#2492: The following data and settings are now available in scripts.</li> <li>Exchange and trading pair settings one time off (read-only)</li> <li>User available balances</li> <li>Inventory skew and order override settings</li> </ul>","title":"\ud83d\udd27 Scripts"},{"location":"release-notes/0.33.0/#bug-fixes","text":"<ul> <li>#2321: Hummingbot to place an order size of the remaining available balance if the balance is less than the order_amount.</li> <li>#2249: Setup fails on a clean install of Ubuntu.</li> <li>#2444: Unable to connect to any exchange using Hummingbot binary on Mac.</li> </ul>","title":"\ud83d\udc1e Bug Fixes"},{"location":"release-notes/0.33.0/#improved-doc-site","text":"<p>Documentation has been revamped into two sites:</p> <ul> <li>Hummingbot Docs: All-related documentation on Hummingbot, including developer guides.</li> <li>Hummingbot Miner Docs: All-related information and documentation on liquidity mining and Hummingbot Miner app.</li> </ul>","title":"\ud83d\udcdc Improved Doc Site"},{"location":"release-notes/0.33.1/","text":"<p>This release is a hotfix to version 0.33.0.</p> <p>It contains #2661 to fix the bug when trying to set up or run specific BUSD pairs on Binance as described in GitHub issue #2653.</p>","title":"Release Notes - Version 0.33.1"},{"location":"release-notes/0.34.0/","text":"","title":"Release Notes - Version 0.34.0"},{"location":"release-notes/0.34.0/#new-exchange-connector-dydx","text":"<p>Hummingbot now supports dYdX exchange! dYdX describes itself as a full-featured decentralized exchange (originating from the US) for spot and margin trading. dYdX is built on Ethereum, and launched at the beginning of May 2019 with spot and margin trading on ETH-DAI. dYdX claims to offer one of the most liquid order books across decentralized exchanges.</p> <p>dy/dx is compatible with the pure market making, cross-exchange market making, and arbitrage strategies.</p> <p>Read more about how to use the dYdX connector here.</p>","title":"New Exchange Connector: dYdX"},{"location":"release-notes/0.34.0/#new-protocol-connector-uniswap","text":"<p>Uniswap is a protocol on Ethereum for swapping ERC20 tokens. Unlike most exchanges, which are designed to take fees, Uniswap is designed to function as a public good \u2014 a tool for the community to trade tokens without platform fees or middlemen.</p> <p>Uniswap is compatible with the amm-arb strategy, as well as user-created strategies.</p> <p>Read more in our documentation how to use the connector here.</p>","title":"New Protocol Connector: Uniswap"},{"location":"release-notes/0.34.0/#new-protocol-connector-terra","text":"<p>The Terra Protocol is the creator of the Luna Token, Terra Core, and the blockchain payment solution CHAI. The design of the Terra Protocol is based on two things: stability and adoption by e-commerce platforms.</p> <p>It runs on a Tendermint Delegated Proof of Stake algorithm and Cosmos SDK. It is aimed at becoming a new worldwide financial infrastructure on which different DApps can be created.</p> <p>Terra is compatible with the amm-arb strategy, as well as user-created strategies.</p> <p>Read more in our documentation how to use the connector here.</p>  <p>Warning</p> <p>Currently dydx, terra and loopring don't work on Binary Installers. It can only be used when running Hummingbot from source or with Docker.</p>","title":"New Protocol Connector: Terra"},{"location":"release-notes/0.34.0/#improvements-to-amm-arbitrage-strategy","text":"<p>In this release, we have made substantial improvements to the <code>amm-arb</code> strategy that can be used to arbitrage between AMM protocols and order book exchanges:</p> <ul> <li>#2672: Dynamically calculate gas price into Balancer</li> <li>#2734: Correctly add gas cost to Ethereum transactions</li> <li>#2694: Poll for Ethereum transactions from Hummingbot</li> </ul> <p>We have also simplified the installation script for the Gateway module to pull specific values from the user's Hummingbot installation automatically.</p>","title":"Improvements to AMM Arbitrage strategy"},{"location":"release-notes/0.34.0/#improvements-to-perpetual-market-making-strategy","text":"<p>In the last release, we released the Binance Futures connector and an experimental perpetual market making strategy.</p> <p>In this release, we have added more features to the strategy to automate created positions. Users can now set a take profit price as well as a trailing stop price for created positions.</p>","title":"Improvements to Perpetual Market Making strategy"},{"location":"release-notes/0.34.0/#new-commands-open_orders-pnl-trades","text":"<p>For users participating in Liquidity Mining, these new commands are helpful when running Hummingbot on multiple pairs.</p> <p>The <code>open_orders</code> command displays all current open (active) orders that the bots have placed across all markets. The <code>pnl</code> command lets users see all trade profits and losses across all markets normalized in USD. And <code>trades</code> command lets users see the trades across all markets in more detail.</p>","title":"New commands: <code>open_orders</code>, <code>pnl</code>, <code>trades</code>"},{"location":"release-notes/0.34.0/#new-pmm-parameter-max_order_age","text":"<p>We added a new parameter called <code>max_order_age</code> to the pure market-making strategy. This parameter refreshes orders that are older than the number of seconds defined in this parameter and keeps their original status (active or hanging).</p> <p>We added this parameter to help users who participate on Hummingbot Miner consistently earn rewards since Miner has a 30-minute order limit.</p> <p>By default, <code>max_order_age</code> is set at 1800 (30 minutes).</p>","title":"New PMM parameter: <code>max_order_age</code>"},{"location":"release-notes/0.34.0/#pause-and-resume-functionality","text":"<p>Users can now pause a running strategy using the command <code>exit --suspend</code>. This allows the bot to stop while keeping the hanging orders in the order book. To resume, run the command <code>start --restore</code>.</p>","title":"Pause and Resume Functionality"},{"location":"release-notes/0.34.0/#aggregate-trade-data-collection","text":"<p>To sustain the development of the open-source Hummingbot client, we partner with exchanges and protocols to build connectors and/or strategies. These partners need actionable data to convince their stakeholders and community members that a Hummingbot integration is worth the investment. Since the Hummingbot client doesn\u2019t collect any data, we currently can't answer these questions well and rely on guesstimates based on volume measured on the Hummingbot Miner platform.</p> <p>For these reasons, in this release, a \u201cheartbeat\u201d data collection mechanism will be implemented. \"Heartbeat\" will send aggregate trade volume data to Hummingbot servers every 15 minutes. We hope you understand that this mechanism will vastly improve the Hummingbot ecosystem in the long run.</p> <p>If you have any questions, please don't hesitate to reach out to anyone from the core team via Discord or email. Thank you again for your support.</p>  <p>Warning</p> <p>The data will be neither accessible nor sold to any third party, your personally identifiable data will not be collected.</p>  <p>Learn more: https://blog.hummingbot.org/aggregate-trade-data-collection-notification//</p>","title":"Aggregate Trade Data Collection"},{"location":"release-notes/0.34.0/#bug-fixes","text":"<ul> <li>#2318: Websocket connection issues on Crypto.com connector</li> <li>#2472: Bot keeps looping on canceling orders on Crypto.com connector</li> <li>#2539: Kraken: Unexpected error in user stream listener loop</li> <li>#2569: Bot unable to display both open positions</li> <li>#2573: binance_perpetual_testnet price_source external_market does not seem to work</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/0.35.0/","text":"<p>Released on January 11, 2021</p> <ul> <li>Download installer: Windows | macOS</li> <li>Install via Docker: Linux | Windows | macOS| Raspberry Pi</li> </ul>   <p>\ud83c\udf89\ud83c\udf89 Happy New Year \ud83c\udf89\ud83c\udf89 from all of us at Hummingbot! Since we released several new connectors in the prior release, and given the holiday break, this release is a maintenance release in which we concentrated on fixing bugs and improving usability.</p>","title":"Release Notes - Version 0.35.0"},{"location":"release-notes/0.35.0/#improvements-to-binance-futures-connector-and-perpetual_market_making-strategy","text":"<p>We made a number of improvements to the Binance Futures connector that we introduced in the last release, along with the related Perpetual Market Making strategy.</p> <p>Now, the strategy allows users to select how they want to manage any positions created as a result of filled orders. Unlike spot exchanges, filling a trade on a derivatives exchange creates a long or short position that changes in value as the markets move. In addition, holding a position entails liquidation risk if the user's collaterals fall below margin requirements.</p> <p></p> <p>v0.34.0 added a feature that allows you to tell the bot how to manage open positions. Profit-taking will enable you to set spreads at which the bot will close positions to take profit, while Trailing stop allows you to set spreads at which the bot will close positions to prevent further losses.</p> <p>We've also made some smaller enhancements and bug fixes to this strategy in v0.35:</p> <ul> <li>#2786: Fixed an issue in which the bot displayed a trading pair-rule error when starting on testnet</li> </ul>","title":"Improvements to Binance Futures connector and <code>perpetual_market_making</code> strategy"},{"location":"release-notes/0.35.0/#usability-improvements-for-protocol-connectors","text":"<p>Recently, we added the Hummingbot Gateway module to allow Hummingbot to integrate with automatic market maker (AMM) protocols such as Uniswap, Balancer, and Terra.</p> <p>Given the massive surge in volume and value locked for AMMs since summer 2020, AMM protocol connectors are an exciting growth area for Hummingbot. We will continue to improve the usability, power, and number of supported protocols for connectors that utilize Gateway.</p> <p>In v0.35.0, we have made the following improvements:</p> <ul> <li>Gateway #33: Added dynamic routes to the Uniswap connector to find optimal trade execution prices</li> <li>Gateway #32: Added logging to Gateway to improve testing</li> <li>#2784: Fixed a display issue with the <code>history</code> command when running the <code>amm-arb</code> strategy</li> <li>#2772: Simplified parameter structure for Hummingbot-Gateway communications, which makes testing ETH connectors easier</li> </ul>","title":"Usability improvements for protocol connectors"},{"location":"release-notes/0.35.0/#remove-default-start-command","text":"<p>In #2496, Hummingbot no longer auto-fills the <code>start</code> command after the user has created or imported a strategy,</p>","title":"Remove default <code>start</code> command"},{"location":"release-notes/0.35.0/#disable-balance-limit-from-client","text":"<p>Previously, <code>balance limit</code> can only be disabled by editing the global config file. Users can now run the command in this release and set it to a negative value to disable from inside the Hummingbot client.</p> <p>While setting it to 0 will initially not place any order for a specific asset until a trade is executed to accumulate the said asset.</p> <p>See Balance Limit page for more information.</p>","title":"Disable balance limit from client"},{"location":"release-notes/0.35.0/#order-optimization-now-works-with-multiple-order-levels","text":"<p>In the Pure Market Making strategy, we have improved the <code>order_optimization</code> parameter to work with multiple order levels. Previously it would only work when <code>order_levels</code> equaled 1. See Order Optimization page for more information.</p>","title":"Order optimization now works with multiple order levels"},{"location":"release-notes/0.35.0/#handle-multiple-fee-tokens-in-history","text":"<p>When there are multiple tokens used to pay fees, Hummingbot now displays a list of each fee token on the <code>history</code> command.</p>","title":"Handle multiple fee tokens in <code>history</code>"},{"location":"release-notes/0.35.0/#eth-rate-conversion","text":"<p>In #2811, a message will appear on the logs after starting your <code>amm_arb</code> strategy that shows you an estimated conversion rate of ETH. It only shows when you are trading in non WETH markets.</p> <p></p>","title":"ETH rate conversion"},{"location":"release-notes/0.35.0/#bug-fixes","text":"<ul> <li>#2801: Fixed a bug in which trading pairs with AUD as the quote asset were not showing up in the auto-complete helper</li> <li>#2788: Remove update balance log</li> <li>#2758: Add decimals to balancer connector request to Gateway. Balancer is modified to handle decimals properly. This should avoid errors when running the <code>balance</code> command.</li> <li>#2799: <code>paper_trade</code> on cross exchange market making now correctly displays the maker and taker exchange when running the <code>status</code> command.</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/0.36.0/","text":"<p>Released on February 08, 2021</p> <ul> <li>Download Installer: Windows | macOS</li> <li>Install via Docker: Linux | Windows | macOS| Raspberry Pi</li> </ul>","title":"Release Notes - Version 0.36.0"},{"location":"release-notes/0.36.0/#new-exchange-connector-ascendex","text":"<p>In this release, Hummingbot has added two more exchanges in its vast spectrum of connectors. Hummingbot now supports AscendEX exchange! AscendEX describes itself as a global digital asset trading platform; exchange for Bitcoin and other crypto coins &amp; tokens; innovator of staking, margin &amp; derivative trading products. AscendEX is a Singapore-based crypto exchange launched in July 2018. The bitmax.io domain name (now AscendEX) was created on February 23, 2018. The exchange offers crypto-to-crypto trading of 36 coins in 72 pairs with three markets (BTC, USDT, and ETH).</p> <p>AscendEX is compatible with pure market making, cross-exchange market-making, and arbitrage strategies.</p> <p>Read more about how to use the AscendEX connector here.</p>","title":"New Exchange Connector: AscendEX"},{"location":"release-notes/0.36.0/#new-exchange-connector-blocktane","text":"<p>We are glad to present to you that Hummingbot now supports Blocktane exchange! Blocktane is an exchange created by veterans of global financial markets with trading and operations experience at the largest financial exchanges. Blocktane delivers to the Brazilian market the smartest way to buy and sell digital assets.</p> <p>Blocktane is compatible with pure market making, cross-exchange market-making, and arbitrage strategies.</p>","title":"New Exchange Connector: Blocktane"},{"location":"release-notes/0.36.0/#loopring-connector-updated-to-v3-api-in-hummingbot-client","text":"<p>In the previous version, Hummingbot used Loopring's v1 API, which has since been deprecated. With this update, Hummingbot will be using Loopring's v3 API. With the updated Loopring connector in this version, any existing API keys used previously in Loopring v1 API will be invalid. Users must generate new keys from the latest version of the exchange. Learn more about the change here #2885.</p> <p>Refer to the documentation here, to update your API keys.</p>","title":"Loopring connector updated to v3 API in Hummingbot client"},{"location":"release-notes/0.36.0/#introducing-the-new-liquidity-mining-strategy-beta","text":"<p>In v0.36, we introduce the new Liquidity Mining strategy! This strategy helps users who want to participate in Liquidity Mining. This simple strategy enables users to quickly set up a liquidity mining bot with just a few configuration parameters.</p> <p>This strategy also allows users to make markets in more than one market pair on the specified exchange, boosting their liquidity mining rewards! We are planning to add more configurable parameters for more advanced users to customize the strategy further. Learn more about it here #2871.</p> <p></p>","title":"Introducing the new Liquidity Mining Strategy (Beta)"},{"location":"release-notes/0.36.0/#perpetual_market_making-improvement","text":"<p>In v0.36, we added a new feature to the perpetual market-making strategy. <code>stop_loss_spread</code> is now available with the <code>Profit_taking</code> and <code>Trailing_stop</code> features. Learn more about it here #2880.</p> <p>Hummingbot does not show the correct calculation of PnL and return % when initiating the <code>history</code> command in the previous version. A fix and enhancement were done to show the accurate calculation and output on <code>total PnL</code> and <code>return %</code> when using the <code>history</code> command. You can learn more here #2855.</p> <p></p>  <p>Note</p> <p><code>history</code> for perpetual_market_making requires for the position to be closed to get the right <code>pnl</code> and return %.</p>","title":"<code>Perpetual_market_making</code> improvement"},{"location":"release-notes/0.36.0/#inventory-average-cost-added-as-a-new-price_type-configuration","text":"<p>With this new <code>price_type</code>, Hummingbot will calculate the average cost of your inventory every time a buy order is filled, and all sell orders will be created at <code>inventory_cost</code> + <code>ask_spread</code>. Learn more here #2513.</p> <p></p>","title":"Inventory average cost added as a new price_type configuration"},{"location":"release-notes/0.36.0/#local-history-reconciliation-with-exchange-history-for-binance","text":"<p>We made some improvements to address network connectivity issues that result in missing trades or duplicate trades being recorded on Hummingbot\u2019s trade history. We have added methods that would:</p> <ul> <li>Pick up trade from API and will trigger OrderFilled if missing in local history.</li> <li>Will prevent the filing of duplicated orders.</li> </ul> <p>Added improvements on the interaction between connector and TradeFills table in order to check for existing orders. For more information, see here #2793.</p>","title":"Local history reconciliation with exchange history for Binance"},{"location":"release-notes/0.36.0/#bug-fixes","text":"<ul> <li>#2829: Fix the 10-second delay when creating orders in the Huobi exchange</li> <li>#2857: Addresses the problem regarding connectivity issues with Cloudflare. Fix API requests intermittently failing on Kraken.</li> <li>#2876: Fix incorrect balance reporting when running <code>balance</code> command on Binance and Bitfinex exchanges</li> <li>#2906: Fix missing trading pairs in Bitfinex and added USD missing value</li> <li>#2907: Fix circular dependencies resulting in unexpected errors in unit tests</li> <li>#2910: Fixes bugs pertaining to <code>in_flight_order</code> reconciliation and retrieving trade history</li> <li>#2911: Fix issue about paper trading orders canceling in a loop</li> <li>#2915: Included exponential waiting time between each Kraken API request retry interval</li> <li>#2853: Include additional strategy file checks before collating trade data.</li> <li>#2931: Fix error when <code>pnl</code> command is run. Update <code>pnl</code> command to check for markets config setting; this is so that it can work with the new Liquidity Mining strategy.</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/0.37.0/","text":"<p>Released on March 9, 2021</p> <ul> <li>Download Installer: Windows | macOS</li> <li>Install via Docker: Linux | Windows | macOS| Raspberry Pi</li> </ul>","title":"Release Notes - Version 0.37.0"},{"location":"release-notes/0.37.0/#new-exchange-connector-probit","text":"<p>In this release, Hummingbot has added more exchanges and is planning to add a lot more exchanges this year! Hummingbot now supports ProBit connector. ProBit Exchange describes itself as a global coin-to-coin cryptocurrency exchange. ProBit Exchange only lists what it deems to be 'qualified and deserving' cryptocurrency projects. ProBit Exchange reportedly has an order matching speed of over 1.5 million orders per second and a customizable user interface. In addition, ProBit Exchange claims to provide users with the option of a hardware security key in addition to 2 Factor Authentication.</p> <p>ProBit is compatible with pure market making, cross-exchange market-making, arbitrage, amm arbitrage, and spot perpetual arbitrage.</p> <p>Read more about how to use the ProBit connector here.</p>","title":"New Exchange Connector: ProBit"},{"location":"release-notes/0.37.0/#new-exchange-connector-beaxy","text":"<p>We are glad to present to you that Hummingbot now supports Beaxy exchange! Beaxy is a digital asset exchange that aims to set itself apart from others in the field by offering a feature-rich platform built from the ground up with clients of every experience level in mind.</p> <p>Beaxy is compatible with pure market making, cross-exchange market-making, arbitrage, amm arbitrage, and spot perpetual arbitrage.</p>","title":"New Exchange Connector: Beaxy"},{"location":"release-notes/0.37.0/#new-protocol-connector-perpetual-finance","text":"<p>In v0.37, Hummingbot has added a new protocol connector, Perpetual Finance</p> <p>Perpetual protocol is a decentralized protocol to trade perpetual contracts for every asset powered by a Virtual Automated Market Maker (vAMM). The project aims to create novel financial instruments by democratizing Futures and other crypto-asset derivatives.</p> <p>Read more about using the Perpetual Finance connector here.</p>","title":"New Protocol Connector: Perpetual Finance"},{"location":"release-notes/0.37.0/#introducing-the-new-spot-perpetual-arbitrage-strategy-beta","text":"<p>In v0.37, we introduce the new Spot Perpetual Arbitrage strategy! This strategy lets you arbitrage between a spot and futures exchange. The differences between the prices on the spot and futures markets before the settlement date give a good sense of the direction in which both markets would go. Prices on both futures and spots will converge as the settlement date or time approaches.</p> <p>This strategy aims to open a position in one direction and execute an order in the opposite direction on the spot. Learn more about the Spot Perpetual Arbitrage.</p>","title":"Introducing the new Spot Perpetual Arbitrage strategy (Beta)"},{"location":"release-notes/0.37.0/#improvements-to-liquidity-mining-strategy","text":"<p>We added two new parameters <code>max_spread</code> and <code>max_order_age</code> to Liquidity Mining strategy to give users a more functionality when using the strategy. Users now have the option to turn off <code>inventory_skew</code> and disable <code>target_base_pct</code>.</p> <p>Tables are added to display the campaign, base, and quote balance in more detail. Balance distribution has also been improved on the user's selected <code>token</code>.</p> <p>Learn more about the changes to the Liquidity Mining Strategy.</p>","title":"Improvements to Liquidity Mining strategy"},{"location":"release-notes/0.37.0/#bug-fixes","text":"<ul> <li>#2949 Add <code>Exchanges Total</code> to <code>balance</code> command</li> <li>We want to thank community member Iamtha for this contribution!</li> <li>#2959 Pause and Resume fixed for Liquidity Mining strategy</li> <li>#2959 Remove Telegram formatting tags</li> <li>#2987 Adds better parsing of Kraken trading symbols and fixes bugs #1781, #2930, and #2953</li> <li>#2989 Fix typo in <code>history</code> command</li> <li>We want to thank community member krisklosterman for this contribution!</li> <li>#2997 Added VAI trading pair</li> <li>#2999 Fix orders canceling in a loop in Cross Exchange Market Making when using <code>paper_trade</code></li> <li>#3000 Fix orders canceling in a loop when the balance is too low when using <code>paper_trade</code></li> <li>We want to thank community member TheHolyRoger for these contributions!</li> <li>#3002 Fix invalid orders that are being tracked by the bot</li> <li>#3005 Fix market validators for <code>amm_arb strategy</code></li> <li>#3014 Fix Kraken available balance after running the status command</li> <li>#3046 Fix Freezing Hummingbot client</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/0.37.1/","text":"<p>Released on March 10, 2021</p> <ul> <li>Download Installer: Windows | macOS</li> <li>Install via Docker: Linux | Windows | macOS| Raspberry Pi</li> </ul>  <p>This release is a hotfix to version 0.37.0.</p> <p>It contains #3059 a hotfix that resolves trading pair completion not working / not accepting any value when creating a new strategy as described in GitHub issue #3055.</p>","title":"Release Notes - Version 0.37.1"},{"location":"release-notes/0.38.0/","text":"<p>Released on April 6, 2021</p> <ul> <li>Download Installer: Windows | macOS</li> <li>Install via Docker: Linux | Windows | macOS| Raspberry Pi</li> </ul>","title":"Release Notes - Version 0.38.0"},{"location":"release-notes/0.38.0/#new-exchange-connector-digifinex","text":"<p>Hummingbot has added more exchanges in this release and is planning to add a lot more exchanges this year! Hummingbot now supports DigiFinex connector. DigiFinex is the world's top 10 crypto exchange by trading volume and liquidity, offering spot, leverage, perpetual swap trading, and fiat to crypto trading. DigiFinex is widely loved for being stable, secure, and easy to use.</p> <p>DigiFinex is compatible with pure market making, cross-exchange market-making, arbitrage, amm arbitrage, and spot perpetual arbitrage.</p>","title":"New Exchange Connector: DigiFinex"},{"location":"release-notes/0.38.0/#new-exchange-connector-hitbtc","text":"<p>We are glad to present to you that Hummingbot now supports HitBTC exchange! HitBTC, founded in 2013 by experienced system architects and technology experts, is one of the oldest and fastest-growing crypto exchanges in existence. With an unparalleled track record of reliability, HitBTC offers clients a comprehensive range of services that are accented by our smooth order execution, state-of-the-art trading terminal, and unmatched liquidity. HitBTC exchange is the largest spot trading market in the industry, with over 800 trading pairs and 500+ spot instruments supported, including Bitcoin, Ethereum, EOS, Litecoin, Tron, and others.</p> <p>HitBTC is compatible with pure market making, cross-exchange market-making, arbitrage, amm arbitrage, and spot perpetual arbitrage.</p> <p>Read more about how to use the HitBTC connector here.</p>","title":"New Exchange Connector: HitBTC"},{"location":"release-notes/0.38.0/#new-exchange-connector-coinzoom","text":"<p>CoinZoom is an institutional-grade digital currency trading platform that uses the team\u2019s vast experience in providing superb trade quality and customer-focused tools and technology to help our customers to become successful digital currency traders. CoinZoom will offer services in Buying, Selling, and Trading Bitcoin, Ripple, Ethereum, and other top digital currency pairs. In addition, our decades of experience in financial technology security are equally important in safeguarding customer funds and customers\u2019 digital currency positions.</p> <p>The CoinZoom team has extensive global exchange and trading experience and proven capabilities of designing, building, and operating a global financial services company. We have \u201cdone this before\u201d in foreign exchange markets and use our know-how to create a reliable, safe, compliant, and innovative digital currency exchange.</p> <p>CoinZoom is compatible with pure market making, cross-exchange market-making, arbitrage, amm arbitrage, and spot perpetual arbitrage.</p>","title":"New Exchange Connector CoinZoom"},{"location":"release-notes/0.38.0/#bitmax-connector-changed-to-ascendex","text":"<p>We have updated Bitmax to AscendEx in line with the exchange\u2019s change in the brand name. It has been updated in the client and also in the documentation.</p> <p>Learn more about it here</p>","title":"Bitmax connector changed to AscendEx"},{"location":"release-notes/0.38.0/#introducing-the-new-avellaneda-market-making-strategy-beta","text":"<p>The new Avellaneda Market Making strategy is designed to maintain inventory ratios between trading pairs given min/max spread restrictions by the user while at the same time maximizing profitability.</p> <p>This is the first (of many to come!) strategies based on an academic paper aiming to use industry-standard market-making algorithms to achieve the highest profit while keeping control of inventory It comes in 2 modes:</p> <ul> <li>Beginner (Where the user leaves algorithm to automate parameters)</li> <li>Expert for more technical users who want to try different approaches.</li> </ul> <p>Learn more about the new strategy here</p>","title":"Introducing the new Avellaneda Market Making strategy (Beta)"},{"location":"release-notes/0.38.0/#introducing-the-new-rate-oracle-feature","text":"<p>In this release, we introduce to the users the rate oracle feature. This new feature provides a real-time, most up-to-date exchange rate on any given token or currency from a reliable and trustworthy data source.</p> <p>If enabled, the bot will use a real-time conversion rate from the oracle when the trading pair symbols mismatch. For example, if markets are set to trade for LINK-USDT and LINK-USDC, the bot will use the oracle conversion rate between USDT and USDC.</p> <p>Rate Oracle is compatible with cross-exchange market-making, arbitrage.</p> <p>Learn more about the feature here.</p>","title":"Introducing the new Rate Oracle feature"},{"location":"release-notes/0.38.0/#new-global-configuration-autofill_import","text":"<p>The new global configuration lets you choose from <code>start</code> and <code>config</code> when importing a strategy already created.</p> <p>Learn more about it here.</p>","title":"New global configuration: <code>autofill_import</code>"},{"location":"release-notes/0.38.0/#bug-fixes","text":"<ul> <li>#3011 When using <code>inventory_cost</code>, the bot will prompt for the <code>inventory_price</code> as well</li> <li>#3135 Fix Binance <code>perpetual_market_making</code> funding payment function</li> <li>#3151 Fix reverse <code>perpetual_market_making</code> long and short profit spreads and logs</li> <li>#3056 Fix sort exchanges alphabetically in the create autocomplete</li> <li>#3073 Fix Beaxy float rounding</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/0.38.1/","text":"<p>Released on April 15, 2021</p> <ul> <li>Download Installer: Windows | macOS</li> <li>Install via Docker: Linux | Windows | macOS| Raspberry Pi</li> </ul>  <p>This release is a hotfix to version 0.38.0.</p> <p>In KuCoin's recent announcement, they are upgrading their API keys to v2.0. To support this change, we upgraded our connector in #3211. Hummingbot users can follow KuCoin API key upgrade operation guide on how to upgrade API keys.</p> <p>Related article: https://www.kucoin.com/news/en-kucoin-upgraded-the-api-key-to-version-2</p> <p>This version also contains #3213 a hotfix for Huobi connector failing to track orders due to invalid API signatures as described in GitHub issue #3197.</p>","title":"Release Notes - Version 0.38.1"},{"location":"release-notes/0.39.0/","text":"<p>Released on May 18, 2021</p> <ul> <li>Download Installer: Windows | macOS</li> <li>Install via Docker: Linux | Windows | macOS| Raspberry Pi</li> </ul>","title":"Release Notes - Version 0.39.0"},{"location":"release-notes/0.39.0/#new-exchange-connector-ftx-spot","text":"<p>FTX is a cryptocurrency derivatives exchange whose team comes from Wall Street quant firms and tech companies. It supports quarterly and perpetual futures for all major cryptocurrencies, leveraged tokens, and OTC.</p> <p>Starting this release, Hummingbot only supports spot trading but will be expanded to include perpetuals in a future release.</p>","title":"New Exchange Connector: FTX Spot"},{"location":"release-notes/0.39.0/#new-perpetual-connector-dydx","text":"<p>In version 0.34 release, we shipped out the dYdX connector that supports spot trading. In addition, Hummingbot now supports perpetuals trading for dYdX exchange by using the <code>dydx_perpetual</code> connector.</p> <p>Read more in our documentation: How to use dYdX Perpetual connector</p>","title":"New Perpetual Connector: dYdX"},{"location":"release-notes/0.39.0/#new-avellaneda-market-making-parameter-volatility-sensibility","text":"<p>In the previous version, Avellaneda market-making strategy's <code>vol_to_spread_multiplier</code> is used to expand spreads when it detects the volatility and, at the same time, acts as a threshold for parameter recalculation when the volatility regime changes.</p> <p>This release introduces a new parameter, <code>volatility_sensibility</code> to recalculate every time the current volatility goes beyond its % value from the original volatility when the parameters were initially calculated. While <code>vol_to_spread_multiplier</code> only expands the minimum and maximum spreads if this value multiplied by volatility is greater than the minimum spread.</p> <p>Read more in Avellaneda strategy documentation: Volatility Sensibility</p>","title":"New Avellaneda Market Making Parameter: Volatility Sensibility"},{"location":"release-notes/0.39.0/#other-enhancements","text":"<ul> <li>OKEx connector updated to support OKEx v5 API</li> <li>Himalaya exchange connector integrated into codebase. The connector will be usable when the exchange's production endpoints become available</li> <li>Hummingbot now only collects total trade volume denominated in USDT when this functionality is enabled. Important Disclosure re: Hummingbot Data Collection</li> </ul>","title":"Other Enhancements"},{"location":"release-notes/0.39.0/#bug-fixes","text":"<ul> <li>#3328 Fixed inconsistent balance updates in AscendEx, resulting to orders not created on specific cycles</li> <li>#3235 Fixed Avellaneda eta calculation, now at the maximum distance from inventory_target and opposing order decays 90% from the original amount</li> <li>#3218 Fixed Avellaneda spread update during volatility</li> <li>#3195 Changed condition to check for \"volatility is not NaN\" when using Avellaneda market making, since when volatility=0 although being valid number \"bool(volatility) =False\" and the status message was not showing</li> <li>#3183 Fixed instances when, while running the avellaneda_mm strategy, you enter the <code>status</code> command and the output doesn't show the strategy parameters (risk factor, order_book_depth_factor, volatility, and closing time)</li> <li>#3144 <code>get_active_markets</code> in the Kucoin connector was changed to <code>fetch_active_markets</code> because the former had a check that prevented the reading of newly added markets</li> <li>#2790 Parsing errors on Binance US when selecting a trading pair with 4-letter quote asset</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/0.39.1/","text":"<p>This release is a hotfix to version 0.39.0.</p> <p>KuCoin has changed its API endpoint today, which requires users to sign the requests. This results in 404 error issues when restarting the strategy (stop and start) while using the connector.</p> <p>This version contains a fix #3506 to an issue when fetching the order book snapshot as described in #3505.</p>","title":"Release Notes - Version 0.39.1"},{"location":"release-notes/0.4.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.4.0, the first release after our initial public beta release on April 4. Afterwards, we will resume our cadence of releasing every 2 weeks on Mondays around noon PST. Below are the most significant updates in this release.</p>","title":"Release Notes - Version 0.4.0"},{"location":"release-notes/0.4.0/#new-coinbase-pro-connector","text":"<p>Hummingbot now supports Coinbase Pro! One of the most liquid exchanges and also one of the few centralized exchanges with DAI trading pairs, Coinbase Pro is our 2nd centralized exchange connector. Users can now run the cross-exchange market making and arbitrage strategies using Coinbase Pro vs decentralized exchanges or Coinbase Pro vs Binance.</p> <p>We are still working out some kinks with this connector, so please consult the Known Issues page before using this connector.</p>","title":"\ud83d\udd17 New Coinbase Pro connector"},{"location":"release-notes/0.4.0/#command-line-interface-cli-improvements","text":"<p>As part of ongoing work to improve the user interface, we made a number of miscellaneous improvements to the CLI this sprint, including:</p> <ul> <li>Trades are now a global object, so you can use <code>list trades</code> in order to see a list of past trades performed by the bot</li> <li>Added a <code>export_private_key</code> command to export the private key of Ethereum wallets created in Hummingbot</li> <li>Added instructions to help users import and export wallets</li> <li>Added a warning to inform users when they have insufficient ETH in their wallet to fund gas costs</li> <li>Fixed a bug that prevented editing of certain strategy configuration settings</li> </ul>","title":"\ud83d\udcbb Command line interface (CLI) improvements"},{"location":"release-notes/0.4.0/#bug-fixes-and-miscellaneous-updates","text":"<ul> <li>Enhanced the Radar Relay connector to use the batch order API, which should decrease the probability that users hit rate limits</li> <li>Fixed a bug with the conversion class so that it calculates prices correctly when used in the arbitrage strategy</li> <li>Improved the reliability of the process that synchronizes clock time between the user's machine and exchanges</li> <li>Updated the CircleCI continuous integration build process so that it correctly builds Hummingbot</li> </ul>","title":"\ud83d\udc1e Bug fixes and miscellaneous updates"},{"location":"release-notes/0.40.0/","text":"<p>Released on June 16, 2021</p> <ul> <li>Download Installer: Windows | macOS</li> <li>Install via Docker: Linux | Windows | macOS| Raspberry Pi</li> </ul>","title":"Release Notes - Version 0.40.0"},{"location":"release-notes/0.40.0/#new-protocol-connector-uniswap-v3","text":"<p>With the new version's Concentrated Liquidity, traders can control over what price ranges their capital is allocated to. In addition, Uniswap v3 allows liquidity providers to be compensated accordingly for taking on varying degrees of risk.</p>","title":"New Protocol Connector : Uniswap v3"},{"location":"release-notes/0.40.0/#new-uniswapv3-iteration-1-strategy","text":"","title":"New UniswapV3 Iteration 1 strategy"},{"location":"release-notes/0.40.0/#uniswap_v3_lp","text":"<p>Create new liquidity positions and automate the process of readjusting these positions once the market price moves outside of the starting price range.</p>","title":"<code>uniswap_v3_lp</code>"},{"location":"release-notes/0.40.0/#additional-features-rate-oracle-now-in-amm-arbitrage","text":"<p>Get rates required to calculate arbitrage proposals profitability.</p>","title":"Additional Features : Rate Oracle now in AMM - Arbitrage!"},{"location":"release-notes/0.40.0/#new-strategy-features-with-avellaneda-market-making","text":"","title":"New Strategy Features with Avellaneda Market-Making"},{"location":"release-notes/0.40.0/#order_levels","text":"<ul> <li>A new strategy command that can be initiated when <code>parameters_based_on_spread = true</code>.</li> <li>The order size of the level will be equal to <code>order_amount</code> the spread between the orders will be calculated based on the <code>max_spread</code>, and the new orders related to order levels will be created between the first order and <code>max_spread</code>, distributed exponentially.</li> <li>When <code>parameters_based_on_spread</code> = false, the behaviour of <code>order_levels</code> will be similar to <code>pure_market_making</code></li> </ul>","title":"<code>order_levels</code>"},{"location":"release-notes/0.40.0/#order_override","text":"<p>If you prefer manual control of orders rather than bot calculated <code>order_amount</code> and <code>order_level_parameter</code>, manually set order value of buy/sell, order spread, and order amount with <code>order_override</code>.</p> <p>You can only set the <code>order_override</code> in the strategy config file you created.</p>","title":"<code>order_override</code>"},{"location":"release-notes/0.40.0/#other-enhancements","text":"<ul> <li> <p>#3017 Catch and report exceptions when importing scripts in PMM strategy in the event of syntax or module import errors</p> </li> <li> <p>Hummingbot client unit tests for the following:</p> </li> <li>Performance Calculation</li> <li>Core utils</li> <li>All 'dev' strategies</li> <li>Liquidity Mining Strategy</li> <li>Strategy base and common strategy classes</li> <li>Ascendex Connector</li> </ul>","title":"Other Enhancements"},{"location":"release-notes/0.40.0/#community-contribution","text":"<p>We want to thank \ud83d\ude4f community member zappra and krisj for helping!</p> <ul> <li>We can now input multiple commands with Custom Command Shortcuts</li> </ul>","title":"Community Contribution"},{"location":"release-notes/0.40.0/#bug-fixes","text":"<ul> <li>#3080 <code>Status --live</code> sends unwanted script status messages via Telegram</li> <li>#3386 Ascendex not handling partial fills</li> <li>#3342 <code>cancell_all()</code> removes manually placed orders in these connectors: Kucoin, Ascendex, BitFinex, Crypto.com</li> <li>#3409 Avellaneda MM <code>order_override</code> on expert mode returns unexpected error running clock tick after calculating volatility</li> <li>#3158 Buy and Sell order switch variables in Arbitrage strategy</li> </ul> <p>We want to thank \ud83d\ude4f community member shankinson</p>","title":"Bug Fixes"},{"location":"release-notes/0.41.0/","text":"<p>Released on July 15, 2021</p> <ul> <li>Download Installer: Windows | macOS</li> <li>Install via Docker: Linux | Windows | Mac | Raspberry Pi</li> </ul>","title":"Release Notes - Version 0.41.0"},{"location":"release-notes/0.41.0/#new-spot-connector-gateio","text":"<p>Gate.io is operated by Gate Technology Corp. Their mission is to serve the blockchain industry by providing secure and reliable products &amp; services to consumers and companies around the world.</p> <p>The \"Gate ecosystem\" consists of Gate.io, Wallet.io, HipoDeFi and Gatechain, all of which were created to provide users with a secure, simple and fair trading platform as well as the ability to safeguard assets and trading information.</p> <p>Read more in our documentation: How to use Gate.io connector.</p>","title":"New Spot Connector : Gate.io"},{"location":"release-notes/0.41.0/#new-strategy-twap","text":"<p>We took our existing TWAP strategy (Time-weighted Average Price) from the development branch into production to be used in the latest version. This strategy allows users to create either buy or sell orders continuously at a specified time interval in between orders.</p> <p>For more information, you may read through our TWAP strategy documentation.</p>","title":"New Strategy : TWAP"},{"location":"release-notes/0.41.0/#new-avellaneda-market-making-feature-hanging-orders","text":"<p>The hanging orders feature that was previously available only in Pure Market Making strategy, is now added to Avellaneda Market Making.</p>","title":"New Avellaneda Market Making Feature : Hanging Orders"},{"location":"release-notes/0.41.0/#new-rate-oracle-sources-kucoin-and-ascendex","text":"<p>There were reported issues where some assets are not showing their equivalent USD value as described in #3136. This is because previously, Hummingbot can only use Binance and CoinGecko as sources i.e. if the asset is not listed in any of those two, it cannot be converted.</p> <p>Starting this release, users can now select KuCoin and AscendEX from the list of options as the source. This will also help liquidity mining participants who are trading on the said exchanges when checking their balances.</p> <p>Run <code>config rate_oracle_source</code> in Hummingbot to change this setting.</p>  <p>Note</p> <p>Currently, USD (default) global token does not work with Kucoin and AscendEX, you may need to change your <code>global_token</code> to USDT.</p>","title":"New Rate Oracle Sources : KuCoin and AscendEX"},{"location":"release-notes/0.41.0/#uniswap-v3-lp-improvements","text":"<p>As part of improving the Uniswap v3 LP strategy, we added a profitability calculation to show the performance of open positions in the <code>status</code> command output. A notification in the logs will also show volatility parameters.</p> <p>In this release, we will continue testing the strategy and get feedback from users for the subsequent iterations.</p>","title":"Uniswap v3 LP Improvements"},{"location":"release-notes/0.41.0/#other-enhancements","text":"<ul> <li>#3097 Timestamps are now included in the notifications when a buy or sell order is filled. We want to thank our community member willzs03 for the initial contribution! \ud83d\ude4f</li> </ul>","title":"Other Enhancements"},{"location":"release-notes/0.41.0/#developer-updates","text":"<ul> <li>Implemented 66% minimum unit test coverage requirement for all incoming code changes (with the exception of connectors)</li> <li>Unit tests for core network module have been added. Thanks to our community member petioprv for creating the unit tests for <code>pubsub.pyx</code>! \ud83d\ude4f</li> <li>Cleaned up and deleted redundant error catches as well as unused exception in the codebase</li> <li>New connector base class <code>PerpetualTrading</code> based on <code>hummingbot/connector/derivative_base.py</code> to define perpetual trading. More details in this story #3308</li> <li>Refactored Spot Perpetual Arbitrage and Perpetual Market Making strategies to comply with <code>PerpetualTrading</code> interface</li> <li>Updated Binance Perpetual, Perpetual Finance, and DyDx derivative connectors to derive from <code>ExchangeBase</code> and <code>PerpetualTrading</code> instead of <code>DerivativeBase</code> class</li> <li>Added <code>HistoricalVolatilityIndicator</code> indicator class that can be used by any strategy. More details in this story #3629</li> <li>Renamed <code>AverageVolatilityIndicator</code> class to <code>InstantVolatilityIndicator</code> used by Avellaneda Market Making strategy</li> <li>Unit tests added to Avellaneda Market Making strategy</li> <li>Implement a new <code>APIThrottler</code> class which handles the rate limits in several exchange. More information in this pull request #3656</li> </ul>","title":"Developer Updates"},{"location":"release-notes/0.41.0/#bug-fixes","text":"<ul> <li>#2971 Fixed issue with KuCoin balance pulling from both Trading and Main accounts. We want to thank our community member zappra for contributing! \ud83d\ude4f</li> <li>#3226 Fixed funding fee events notification <code>get_funding_info()</code> on Binance Perpetual. Credits again to zappra for this contribution!</li> <li>#3510 KuCoin connector is now usable with paper trading mode using Level-2 order book (aggregated) at 100 pieces of data. More info in KuCoin API docs</li> <li>#3521 Fixed an issue where some trading pairs in KuCoin are not recognized</li> <li>#3578 Fixed issue where hanging orders are not recreated when refreshed after <code>max_order_age</code> takes into effect</li> <li>#3596 Inactive markets in Probit connectors are no longer shown when selecting a trading pair during market configuration</li> <li>#3611 Trading fees in Hummingbot and Kraken exchange should now be displayed correctly</li> <li>#3660 Applied the same pure market making fix for <code>max_order_age</code> feature in Avellaneda market making strategy</li> <li>#3715 Fixed websocket errors with KuCoin connector when using liquidity mining strategy</li> <li>#3716 Fixed issue with Probit KR failing to start and fetch order book data</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/0.42.0/","text":"<p>Released on August 11, 2021</p> <ul> <li>Download Installer:\u00a0Windows\u00a0|\u00a0macOS</li> <li>Install via Docker: Linux | Windows | macOS| Raspberry Pi</li> </ul>","title":"Release Notes - Version 0.42.0"},{"location":"release-notes/0.42.0/#new-spot-connector-ndax","text":"<p>NDAX (National Digital Asset Exchange) is a Canadian-based centralized exchange which is fully integrated into the Canadian banking system and designed for both individuals and institutions.</p> <p>They are incorporated in the province of Alberta and registered as a Money Service Business (MSB), making them subject to the Proceeds of Crime (Money Laundering) and Terrorist Financing Act (PCMLTFA) and applicable regulatory framework of the Financial Transactions and Reports and Analysis Centre of Canada (FINTRAC).</p> <p>Read more in our documentation: How to use NDAX connector</p>","title":"New Spot Connector: NDAX"},{"location":"release-notes/0.42.0/#new-global-config-rate-limits-share-pct","text":"<p>We added a new global parameter that allows user to set a certain percentage of rate limit to each bot when running multiple instances of Hummingbot. This is useful when using a single exchange account across all instances.</p> <p>To set this value, run <code>config rate_limits_share_pct</code> in the Hummingbot client.</p> <p>Read more in our documentation: Rate Limits Share Pct</p>","title":"New Global Config: Rate Limits Share Pct"},{"location":"release-notes/0.42.0/#developer-updates","text":"<ul> <li>Removed mock web server usages from the tests in <code>/test/hummingbot/core/api_throttler/</code> which will be replaced in the future and causes the workflow checks in Github to fail occasionally</li> <li>Fixed and added unit tests to not consider AscendEX inflight orders as open order when in \"Filled\" status</li> <li>Added fields <code>filled_amount</code> (Decimal), <code>creation_timestamp</code> (int), <code>status</code> (int) to <code>LimitOrder</code> #3622</li> <li>Created a new multi-limit pool throttler class to handle rate limits where a call can increase multiple pools as described in #3758</li> <li>In subsequent releases, we will make changes and improve the multi-pool throttler as well as consolidate existing different version of throttler. More details in this story #3766</li> </ul>","title":"Developer Updates"},{"location":"release-notes/0.42.0/#bug-fixes","text":"<ul> <li>#3547 Fixed issues for matched and unmatched trading pairs especially with USD in HitBTC connector. Thanks to TheHolyRoger for this fix! \ud83d\ude4f</li> <li>#3450 Fixed error submitting orders on most USD pairs when using dydx perpetual connector. Thanks to trkoneill18 for this fix! \ud83d\ude4f</li> <li>#3645 Fixed format-sensitive values for <code>markets</code> parameter in Liquidity Mining strategy</li> <li>#3648 Updated <code>ASSET_TO_NAME_MAPPING</code> in <code>kucoin_utils.py</code> to fix the error when selecting BSV markets</li> <li>#3754 Fixed rate limit issues when using AscendEx connector by implementing the new multi-limit pool throttler class</li> <li>#3767 Fixed a bug with AscendEx where cancelled orders are showing as active orders using Liquidity Mining strategy</li> <li>#3777 Fixed orders getting stuck on 'cancelling' message when using multiple orders in AscendEx connector</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/0.43.0/","text":"<p>Released on September 3, 2021</p> <ul> <li>Download Installer:\u00a0Windows\u00a0|\u00a0macOS</li> <li>Install via Docker: Linux | Windows | macOS| Raspberry Pi</li> </ul>","title":"Release Notes - Version 0.43.0"},{"location":"release-notes/0.43.0/#simplified-uniswap-v3-lp-strategy","text":"<p>In this release, we made some improvements to the Uniswap-v3 LP, which aims to make it easier for Hummingbot users to use compared to its previous version of the strategy.</p> <p>Read more in our documentation: Uniswap-v3 LP</p>","title":"Simplified Uniswap-v3 LP strategy"},{"location":"release-notes/0.43.0/#developer-updates","text":"<ul> <li>Unit test coverage requirement for pull requests increased from 66% to 75%</li> <li>Global unit test coverage requirement from 42% to 50%</li> <li>New connectors should include unit tests for all classes/modules. Refer to NDAX connector for examples of such unit tests</li> <li>Rework of the <code>uniswap_v3_lp</code> trading logic reducing complexity #3999</li> <li>Added throttler to NDAX for better rate limit handling #3865</li> <li>Refactor Crypto.com connector to use <code>AsyncThrottler</code> #3922</li> <li>Refactor the AscendEX connector to use <code>AsyncThrottler</code> #3889</li> <li>Added test script for Uniswap V3 to test all endpoints #124</li> <li>Improved order lifecycle logic in NDAX Connector #3866</li> <li>Added a component to assist with mocking network activity for connector unit tests #3947</li> </ul>","title":"Developer Updates"},{"location":"release-notes/0.43.0/#bug-fixes","text":"<ul> <li>#3062 Fixed various commands on Telegram. This also allows the <code>balance</code> command to be executed from the application. Thanks to zappra for this fix! \ud83d\ude4f</li> <li>#2707 Fixed the issue where the bot will fail to run when specifying a <code>custom_api</code> price source in the Pure Market Making config</li> <li>#3452 Fixed issue on Perpetual Market Making where partial fill leads to creating incorrect profit taking order size</li> <li>#3604 Fixed Binance pair parsing where SC-USDT is not being parsed correctly for Binance connector</li> <li>#3710 Fixed a bug on Perpetual Market Making when both orders are filled, the bot opens a position instead of creating a new set of orders</li> <li>#3763 Fixed a bug on Spot Perpetual Arbitrage where the bot does not look for <code>min_divergence</code> after the second arbitrage</li> <li>#3887 Fixed issue with Pure Market Making when the bot does not filter the proposals with invalid prices after it creates the proposals for creating orders</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/0.43.1/","text":"<p>This release is a hotfix to version 0.43.0.</p> <p>Fixed dependencies issues resulting to errors when installing Hummingbot from source on different operating systems as described in GitHub issue #4173.</p>","title":"Release Notes - Version 0.43.1"},{"location":"release-notes/0.44.0/","text":"<p>Released on October 1, 2021</p> <ul> <li>Download Installer:\u00a0Windows\u00a0|\u00a0macOS</li> <li>Install via Docker: Linux | Windows | macOS| Raspberry Pi</li> </ul>","title":"Release Notes - Version 0.44.0"},{"location":"release-notes/0.44.0/#new-spot-connector-bitmart","text":"<p>BitMart is a centralized exchange based in the Cayman Islands. It also has four offices located in New York, China, Hong Kong, and Seoul. It supports spot trading, otc trading, and USD trading. Its mission is to drive the world towards a better financial system.</p> <p>BitMart aims to provide diversified system functions for spot trading to satisfy different needs for a wide array of users.</p>","title":"New Spot Connector: BitMart"},{"location":"release-notes/0.44.0/#new-perpetual-connector-bybit","text":"<p>Bybit is one of the fastest growing cryptocurrency derivatives exchanges, with more than 1.6 million registered users. Built on customer-centric values, we endeavor to provide a professional, smart, intuitive and innovative trading experience for retail and professional clients around the world. Bybit is committed to creating a fair, transparent and efficient trading environment, and offer 24/7 multi-language customer support to provide assistance in a timely manner.</p> <p>Derivatives products currently offered on the Bybit platform are inverse perpetual contracts (BTCUSD, ETHUSD, XRPUSD, EOSUSD), linear perpetual contracts (BTCUSDT, ETHUSDT, BCHLINK, LINKUSDT, LTCUSDT, XTZUSDT, ADAUSDT, DOTUSDT, UNIUSDT) and inverse futures contracts (BTCUSD quarterly).</p>","title":"New Perpetual Connector: Bybit"},{"location":"release-notes/0.44.0/#developer-updates","text":"<ul> <li>TWAP strategy is now able to set configuration specifying the start time and the end time, specifying the start time without specifying the end time, and without start time and without an end time. #3643</li> <li>Integrated new <code>APIThrottler</code> to Binance, Binance Perpetual, Coinzoom, Gate.io, and KuCoin connectors #3664, #3666, #3893, #3894, #3891</li> <li>Integrated <code>AsyncThrottler</code> into Kraken connector #3892</li> <li>Solved incorrect use of WebSocket in Bittrex #3867</li> <li>Added prefix to client order Id for orders created using NDAX connector #4165</li> <li>Merged the new hanging order tracker into Pure Market Making. Pure Market Making and Avellaneda's hanging order behavior are now the same. #3978</li> <li>Added Uniswap from Gateway-v2 into Hummingbot client #3984</li> <li>Removed <code>asset_mid_price</code> from Pure Market Making #4202</li> </ul>","title":"Developer Updates"},{"location":"release-notes/0.44.0/#bug-fixes","text":"<ul> <li>#4089 Fixed dYdX perpetual issue when the bot attempts to place an order it will throw an error. Thanks to trkoneill18 for this fix! \ud83d\ude4f</li> <li>#2480 Fixed the issue on Bittrex where the bot assumes that filled orders are unfilled orders, results to errors.</li> <li>#4100 Fixed a bug where the bot fails to cancel the order and prints <code>is_testing_mode()</code> continuously</li> <li>#4118 Fixed the NDAX fee calculations bug</li> <li>#4207 Fixed a bug where gateway script still uses old balancer settings</li> <li>#4297 Fixed the bug on the Binance connector where <code>split_trading_pair</code> was not properly imported</li> <li>#3961 Fixed the issue on Binance Perpetual where setting the same position on the bot and the exchange still throws an error</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/0.44.0/#other-enhancements","text":"<ul> <li>#2967 Refactor <code>celocli</code>, update the ticker strings used when parsing <code>celocli</code> output. Thanks to pgold for this fix! \ud83d\ude4f</li> <li>#4090 Added <code>maxNext</code> parameter to change <code>storageId</code> request in Loopring. Thanks to trkoneill18 for this fix! \ud83d\ude4f</li> <li>#4210 Updated Blocktane trading pair parser. Thanks to trkoneill18 for this fix! \ud83d\ude4f</li> </ul>","title":"Other Enhancements"},{"location":"release-notes/0.45.0/","text":"<p>Released on November 2, 2021</p> <ul> <li>Download Installer:\u00a0Windows\u00a0|\u00a0macOS</li> <li>Install via Docker: Linux | Windows | macOS | Raspberry Pi</li> </ul>","title":"Release Notes - Version 0.45.0"},{"location":"release-notes/0.45.0/#new-market-making-strategy-aroon-oscillator","text":"<p>In this release, we shipped out a new strategy into production which was the winning submission for our first Open DeFi hackathon.</p> <p>The strategy attempts to take a well-known set of market indicators called Aroon Indicators that collect trade prices over a configurable set of periods of a given duration. They represent how recent the highest highs and the lowest lows are. And the Oscillator Indicator can strongly suggest a market trend.</p> <p>More information in Aroon Oscillator documentation.</p>","title":"New Market Making Strategy: Aroon Oscillator"},{"location":"release-notes/0.45.0/#new-strategy-hedge","text":"<p>The winning submission for the recent dYdX hackathon bounty is also available starting this release. This strategy allows you to hedge a market making strategy by automatically opening short positions on <code>dydx_perpetual</code> or another <code>perp</code> exchange. Configs like <code>hedge_ratio</code> allow you to customize how much to hedge. Users are expected to run this strategy alongside another market making strategy.</p> <p>More information in Hedge documentation.</p>","title":"New Strategy: Hedge"},{"location":"release-notes/0.45.0/#client-ui-improvements","text":"<p></p> <ul> <li>Adjusted default panel colors to create a division between the input pane and log pane</li> <li>Changed top panel colors including paper trade mode indicator</li> <li>Added a button in the upper-right corner or press <code>CTRL + T</code> to open and close the log pane</li> <li>Added global configuration parameters allowing users to specify and customize colors inside the client terminal (<code>top-pane</code>, <code>bottom-pane</code>, <code>output-pane</code>, <code>input-pane</code>, <code>logs-pane</code>, <code>terminal-primary</code>)</li> <li>Press <code>CTRL + R</code> to reset the style to use default colors</li> </ul>","title":"Client UI Improvements"},{"location":"release-notes/0.45.0/#developer-updates","text":"<ul> <li>Added HTTP <code>Referer</code> header into <code>_create_order</code> requests in <code>bybit_perpetual</code> connector</li> <li>Previously, we instruct users to install the required dependencies using <code>pip</code> when creating a Docker image on ARM. Since miniconda already supports ARM architecture, we updated the <code>Dockerfile</code> to create an image on ARM using miniconda and manage all dependencies</li> <li>Cleaned up unnecessary dependencies from the <code>conda</code> config files for Windows and Mac</li> <li>Removed legacy feature used to enforce a minimum order size in the Hummingbot client when creating or reconfiguring a strategy (<code>min_quote_order_amount</code>, <code>minimum_order_amount</code>, <code>default_min_quote</code>)</li> <li>Removed outdated connectors (<code>bamboo_relay</code>, <code>radar_relay</code>, <code>dolomite</code>, <code>eterbase</code>) and any reference to their code</li> <li>Cleaned up unused and legacy codes found in the codebase. More information in #4420</li> <li>Replaced <code>websockets</code> library with <code>aiohttp</code> in <code>MockWebSocketServer</code> component and the following connectors: <code>binance</code>, <code>binance_perpetual</code>, <code>kucoin</code>, <code>ascend_ex</code>, <code>gate_io</code>, <code>crypto_com</code>, <code>ndax</code></li> <li>Updated all calls to <code>asyncio.ensure_future()</code> to <code>safe_ensure_future()</code> to ensure proper error logs from background tasks. More information in #2516</li> <li>Removed all Hummingsim dependencies no longer needed. Replaced certain Hummingsim classes with Hummingbot classes. More information in #4260</li> <li>Unit tests added for <code>bitmart</code> connector</li> <li>Unit tests added for <code>ConfigVar</code> class</li> <li>Deprecated <code>MockEventListener</code> class and replaced with <code>EventLogger</code> wherever used</li> <li>Removed <code>get_active_exchange_markets</code> function from the <code>OrderBookDataSource</code> class and wherever used. Also refactored some parts of the code for Liquid exchange that used this function</li> <li>Made a change in the quantization logic to use <code>math.floor</code> to round instead of the native <code>round</code> Python function to fix quantization to the smallest value</li> </ul>","title":"Developer Updates"},{"location":"release-notes/0.45.0/#bug-fixes","text":"<ul> <li>#2274 Corrected trading rule in <code>min_base_amount_increment</code> to fix a bug where an <code>order_amount</code> with decimal values is adjusted unexpectedly on <code>coinbase_pro</code> and <code>liquid</code></li> <li>#2900 Fixed a bug where cancelling the strategy config creation assigns a <code>None</code> value to all of its parameters</li> <li>#3317 Fixed duplicate logs when orders are filled using <code>kucoin</code> connector</li> <li>#3324 Fixed a bug where positions are not retrieved after restarting Hummingbot when using <code>dydx_perpetual</code> connector</li> <li>#3688 Fixed timeout error when fetching for funding fee with <code>dydx_perpetual</code> connector</li> <li>#3787 Fixed orderbook desynchronization issues with <code>kucoin</code> connector</li> <li>#3967 Fixed <code>Return %</code> in UI navbar not in sync with <code>history</code> command output</li> <li>#4115 Configured <code>bitmart</code> connector to estimate balances to address issues with orders not created consistently in every cycle</li> <li>#4220 Fixed failing to submit orders when <code>order_amount</code> is greater than the available balance in Pure Market Making strategy</li> <li>#4231 Added better error handing in <code>ndax</code> connector to fix errors when cancelling or updating orders</li> <li>#4374 Fixed some Binance test cases that needed to <code>asyncio.sleep</code> to complete</li> <li>#4390 Fixed <code>ascend_ex</code> connector not replying correctly to all PING messages</li> <li>#4425 Fixed <code>status</code> output error with liquidity mining strategy when campaign details are not provided from backend</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/0.45.0/#other-enhancements","text":"<ul> <li>When connecting to Kraken exchange from Hummingbot, users can now specify their account tier to manage rate limits more effectively</li> </ul>","title":"Other Enhancements"},{"location":"release-notes/0.46.0/","text":"<p>Released on December 1, 2021</p> <ul> <li>Download Installer:\u00a0Windows\u00a0|\u00a0macOS</li> <li>Install via Docker: Linux | Windows | macOS | Raspberry Pi</li> </ul> <p>We are very excited to ship the December 2021 Hummingbot release (v0.46.0) today! This release contains significant improvements to the <code>avellaneda</code> and <code>perpetual_market_making</code> strategies, new connectors to MEXC and WazirX, and a brand-new approach to paper trading!</p> <p>v0.46 will be the last beta release of Hummingbot. Going forward, the Hummingbot Foundation will begin to enact a process that enables the community to participate in deciding what\u2019s included in each Hummingbot release.</p> <p>To mark this shift to a new community-oriented direction for Hummingbot, the next release will be Hummingbot 1.0 and is planned for mid-January 2022.</p>","title":"Release Notes - Version 0.46.0"},{"location":"release-notes/0.46.0/#discontinue-binary-support","text":"<p>In this release, we added a package dependency required for improving Avellaneda Market Making strategy and for its calculations to work correctly. This change is incompatible with Windows operating system which caused issues building the binary installer or the strategy not being usable.</p> <p>Currently, <code>loopring</code> and <code>dydx_perpetual</code> connectors as well as <code>amm_arbitrage</code> strategy, do not work with binary versions and we have encountered other similar issues in previous releases caused by these incompatibilities. After this release, we will deprecate and no longer support binary versions.</p> <p>New users who want to test and try out Hummingbot can launch an instance of our Test Drive from https://hummingbot.io/test-drive/.</p>","title":"Discontinue Binary Support"},{"location":"release-notes/0.46.0/#reworked-paper-trade-mode","text":"<p>Paper trading now only supports Binance, KuCoin, AscendEX, and Gate.io exchange. The main objective of paper trade mode is to allow new users to test and familiarize themselves with Hummingbot's basic operations (e.g. creating / importing a strategy, checking available balances, checking bot status, etc.) before risking real assets.</p> <p>As our codebase grows, the current design will not be able to support all strategies and connectors. Several exchanges also do not provide endpoints that we require for a paper trade bot's performance to be the same as actual trading.</p> <p>To enable paper trading, users will now have to select paper trade exchanges when configuring a strategy. Read more about Paper Trade in our documentation.</p>","title":"Reworked Paper Trade Mode"},{"location":"release-notes/0.46.0/#improved-avellaneda-market-making-part-1","text":"<p>We are making improvements to the initial implementation of the Avellenada-Stoikov strategy. In this release, we fixed the greek parameters <code>gamma</code> (risk factor), <code>eta</code> (shape factor), and <code>kappa</code> (liquidity factor) to use the calculation of its original design.</p> <p>Some advanced parameters were added and we removed those that were not a requirement for the strategy to behave correctly. The updated list of parameters can be found in Avellaneda Market Making documentation.</p> <p>In the next release, we will rework the time factor to allow an infinite time horizon as described in Github issue #4650.</p>","title":"Improved Avellaneda Market Making (Part 1)"},{"location":"release-notes/0.46.0/#simplified-perpetual-market-making","text":"<p>The strategy is now written in pure Python code to make it easier for developers in our community to debug and build on top of its code for future enhancements. We also removed some rarely used advanced parameters (or not used at all) inherited from Pure Market Making that were not required for this strategy to run.</p> <p>Some other changes and improvements are:</p> <ul> <li>Changed to <code>LIMIT</code> order type to allow taker orders when crossing the order book</li> <li>Profit taking is always on by default instead of having a trailing stop loss feature</li> <li>Added a stop loss order retry logic</li> <li>Unit tests were added to cover the entire strategy</li> </ul> <p>More detailed information on these changes can be found in Github issue #4565 and updated Perpetual Market Making documentation.</p>","title":"Simplified Perpetual Market Making"},{"location":"release-notes/0.46.0/#new-spot-connector-mexc-global","text":"<p>Launched in April 2018, MEXC Global is a centralized cryptocurrency exchange registered in Seychelles. The exchange supports USD, GBP, EUR, AUD and VND deposit and withdrawal.</p> <p>More information about the connector in MEXC documentation.</p>","title":"New Spot Connector: MEXC Global"},{"location":"release-notes/0.46.0/#new-spot-connector-wazirx","text":"<p>Launched in 2018, WazirX aims to make crypto accessible to everyone in India, with over 400,000 users and an average app rating of 4.6. WazirX is a part of the Binance ecosystem and was acquired by Binance in November 2019.</p> <p>More information about the connector in <code>WazirX</code> documentation.</p>","title":"New Spot Connector: WazirX"},{"location":"release-notes/0.46.0/#client-ui-improvements","text":"<ul> <li>#4519 Added text margins in the main layout</li> <li>#4273 Added a graphical appearance to command parameters</li> <li>Inspired by zappra's pull request submission #3154, running <code>order_book --live</code> command will show a live output of the order book in a tab in the logs pane</li> </ul> <p>We will continue to work on adding more features that can be displayed in the tabs. Please feel free to submit a feature request for any suggestions.</p>","title":"Client UI Improvements"},{"location":"release-notes/0.46.0/#developer-updates","text":"<ul> <li>Deprecated <code>dydx</code> spot connector</li> <li>Introduced a new functionality to allow more accurate sizing of the collateral required for perpetual orders. More information in #4573</li> <li>Replace the use of <code>aioconsole</code> to start the debug console for the client with the use of <code>ptpython</code> from the prompt-toolkit project due to GPL license incompatibility</li> <li>Allow <code>get_active_campaigns</code> function that retrieves liquidity mining campaign information from the miner API to parse tokens from <code>binance</code>, <code>kucoin</code>, <code>ascend_ex</code>. This should display the same status messages for current active campaigns with Miner when using Liquidity Mining strategy</li> <li>Replace <code>websockets</code> library with <code>aiohttp</code> in <code>probit</code> connector</li> <li>Extracted API-call functionality into a helper class to handle both REST and WS API calls, currently added to <code>gate_io</code> connector</li> <li>Removed <code>NetworkStatus</code> class in <code>network_base</code>, keeping the definition of the class only in <code>network_iterator</code> core component. Thanks to blakephillips for this contribution! \ud83d\ude4f</li> <li>Packages are automatically detected instead of manually listing out the sub-packages in <code>setup.py</code></li> <li><code>GateIoAPIOrderBookDataSource</code> now uses a single websocket connection to open as little websocket connection as possible. More information in #4562</li> </ul>","title":"Developer Updates"},{"location":"release-notes/0.46.0/#bug-fixes","text":"<ul> <li>#3697 Fixed issue with TWAP strategy where the <code>order_step_size</code> accepts a value larger than <code>target_asset_amount</code></li> <li>#3970 Fixed <code>DupNewCoid</code> error for <code>ascend_ex</code></li> <li>#4192 Fixed <code>dydx_perpetual</code> connector's <code>_update_account_positions</code> function</li> <li>#4514 Fixed <code>dydx_perpetual</code> connector's <code>no funding payment</code> notification</li> <li>#4559 Fixed issue with TWAP strategy accepting invalid inputs</li> <li>#4647 Fixed the issue for <code>gate_io</code> connector where the bot keeps trying to find the order and prevents the creation of new orders resulting in the <code>Order not found in inflight orders</code> error</li> <li>#4756 Fixed memory leaks and order book desynchronization</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/0.5.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.5.0! In this release, we focused on fixing bugs, building transaction costs into exchange connectors, and adding more documentation. Below are the most significant updates:</p>","title":"Release Notes - Version 0.5.0"},{"location":"release-notes/0.5.0/#arbitrage-strategy-now-incorporates-exchange-specific-transaction-costs","text":"<p>As requested by many users, we have codified exchange-specific transaction costs such as trading fees and gas costs (for decentralized exchanges) into each exchange connector.</p> <p>This allowed us to incorporate fee/gas logic into the arbitrage strategy, so that users can set a <code>min_profitability</code> parameter that is net of exchange transaction costs. Please note that we will be testing this feature heavily this sprint, and that issues may arise as a result of this change.</p> <p>We plan to add this to the cross-exchange market making strategy in the next release.</p>","title":"\ud83d\udcb8 Arbitrage strategy now incorporates exchange-specific transaction costs"},{"location":"release-notes/0.5.0/#improved-cli-commands","text":"<p>We added and improved a number of the commands in the Hummingbot command line interface:</p> <p></p> <ul> <li><code>status</code>: we revamped the output of the <code>status</code> command to be more consistent across strategies and to provide more granular information</li> <li><code>list configs</code>: this command now lists the value for each configuration parameter</li> <li><code>config [parameter name]</code>: this command, which allows users to change bot parameters without exiting Hummingbot, now supports tab auto-complete, which makes changing parameters much easier</li> <li><code>export_private_key</code>: this new command allows you to export a wallet created/imported in Hummingbot to other applications</li> </ul>","title":"\ud83d\udcbb Improved CLI commands"},{"location":"release-notes/0.5.0/#new-docs-for-strategies-debug-console-known-issues-etc","text":"<p>New documentation in this release includes:</p> <ul> <li>Strategies: diagrams and explanations of Hummingbot's strategies</li> <li>Debug console: how to use the debug console to inspect your bot in real-time</li> <li>Known issues: list of currently outstanding issues and their resolution status</li> <li>Windows installation: how to install Hummingbot on Windows</li> <li>Exchange rates: how to use the exchange rates utility class to resolve price differences between stablecoins</li> <li>Wallet import/export: how to import and export Ethereum wallets</li> </ul>","title":"\ud83d\udcdd New docs for strategies, debug console, known issues, etc"},{"location":"release-notes/0.5.0/#bug-fixes-and-miscellaneous-updates","text":"<p>We fixed a number of bugs in this release. Thanks \ud83d\ude4f all the bug reporters who took part in our bug bounty program!</p> <ul> <li>Fixed a bug in which Coinbase Pro orders were failing due to overly high precision in the order amount field (bug bounty recipient)</li> <li>Fixed an bug in which the bug prints excessive <code>Maker order size must be greater than 0</code> log messages (bug bounty recipient)</li> <li>Resolved an issue that prevented installation in Virtual Box for Windows due to file permissions (bug bounty recipient)</li> <li>Resolved an issue in which running Hummingbot using Infura nodes causes intermittent <code>Error fetching logs from block with filters</code> log messages</li> <li>Fixed a bug that causes duplicate orders in DDEX in certain cases</li> <li>Fixed a bug in which Radar Relay orders could be incorrectly sorted, causing unexpected bot behavior</li> <li>Fixed a bug in which the log file was not being generated after installing from source</li> <li>Fixed a bug in which Hummingbot incorrectly warned users of arbitrage bots that their wallet/exchanges balances were 0.</li> <li>Fixed a bug in which a temporary lack of order book volume triggers <code>Volume beyond order book depth</code> errors</li> <li>Hummingbot no longer prompts users for their Ethereum wallet even when only trading on centralized exchanges</li> <li>Removed legacy <code>config not found</code> warnings when starting Hummingbot</li> <li>Hummingbot now logs the expected hedge price when it creates and adjusts orders when running the cross-exchange market making strategy</li> </ul>","title":"\ud83d\udc1e Bug fixes and miscellaneous updates"},{"location":"release-notes/0.5.1/","text":"<p>This release is a hotfix to version 0.5.0.</p>","title":"Release Notes - Version 0.5.1"},{"location":"release-notes/0.5.1/#fixed-ddex-market-order-bug","text":"<p>We fixed a critical bug with the DDEX connector that prevented market orders from being successfully executed.</p>","title":"\ud83d\udc1e Fixed DDEX market order bug"},{"location":"release-notes/0.6.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.6.0! This release, we focused on making it easier for you to generate profits with Hummingbot. Highlights include:</p> <ul> <li>Market-specific transaction costs incorporated into all strategies</li> <li>Improved resilience against network connection issues</li> <li>New <code>discovery</code> strategy that helps you discover trading opportunities</li> <li>New <code>history</code> and <code>export_trades</code> commands that helps you analyze trading performance</li> <li>Stop loss switch that automatically shuts down Hummingbot if losses exceed a certain threshold.</li> </ul> <p>See below for more details!</p>","title":"Release Notes - Version 0.6.0"},{"location":"release-notes/0.6.0/#market-specific-transaction-costs-incorporated-into-all-strategies","text":"<p>In the last release, we incorporated market-specific transaction costs like trading commissions and gas costs (for decentralized exchanges) into Hummingbot's decision model. This means that you can set a <code>min_profitability</code> that ignores transaction costs, and Hummingbot will only make and take orders that it expects to be profitable after factoring in transaction costs.</p>","title":"\ud83d\udcb8 Market-specific transaction costs incorporated into all strategies"},{"location":"release-notes/0.6.0/#improved-resilience-against-network-connection-issues","text":"<p>We added network status detection to our market and wallet connectors. If you are running a bot like <code>arbitrage</code> that trades on two markets, the bot won't place trades if one of the markets is offline. If a market is offline, the <code>status</code> command will display a warning.</p>","title":"\ud83d\udcf6 Improved resilience against network connection issues"},{"location":"release-notes/0.6.0/#new-strategy-discovery","text":"<p>The <code>discovery</code> scans markets for the best opportunities with which to apply the <code>arbitrage</code> strategy. It runs our arbitrage profitability analysis upon matching trading pairs in two different markets and displays a ranked list of trading pairs and their profitability. We plan to add support for the <code>cross-exchange market making</code> strategy soon.</p>","title":"\ud83d\udd0d New strategy: <code>discovery</code>"},{"location":"release-notes/0.6.0/#new-cli-commands-history-and-export_trades","text":"<p>We have added two new CLI commands to help users analyze bot performance: * <code>history</code>: displys information about the trades that the bot has executed during the current session * <code>export_trades</code>: exports the list of trades to a CSV file</p>","title":"\ud83d\udcbb New CLI commands: <code>history</code> and <code>export_trades</code>"},{"location":"release-notes/0.6.0/#stop-loss-switch","text":"<p>We added a feature to automatically shut down a trading bot if it loses a certain amount. Users can configure the stop loss switch in different ways, such as setting the percent loss threshold, whether it uses dynamic prices or initial starting prices, and the base asset used to calculate price changes. These settings are in the global configuration file <code>conf_global.yml</code>.</p>","title":"\ud83d\uded1 Stop loss switch"},{"location":"release-notes/0.6.0/#bug-fixes-and-miscellaneous-updates","text":"<ul> <li>Fixed a bug with the <code>status</code> outut of the arbitrage strategy</li> <li>Fixed a bug in which duplicate orders may appear on DDEX. We have discovered an issue with the DDEX API and are working with them to isolate and rectify the bug.</li> <li>Cross-exchange market making strategy now utilizes exchange rates when it displays the expected hedging price.</li> </ul>","title":"\ud83d\udc1e Bug fixes and miscellaneous updates"},{"location":"release-notes/0.7.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.7.0! In release, we focused on improving core stability and fixing bugs. In addition, we're excited to announce a new market making strategy and our first 3rd party exchange connector! Please see below for more details.</p>","title":"Release Notes - Version 0.7.0"},{"location":"release-notes/0.7.0/#new-strategy-pure-market-making","text":"<p></p> <p>We have added the first version of a pure market making strategy, so all three strategies described in our whitepaper have now been released into production.</p> <p>Please note that this initial release contains a naive implementation that simply sets and maintains a constant spread around a trading pair's mid price. Note that this is intended to be a basic template that users can test and customize. Running the strategy with substantial capital without additional modifications will likely lose money.</p> <p>Over the next few releases, we will add additional functionality that allows users of this strategy to incorporate important factors such as inventory level and market volatility.</p>","title":"\ud83e\udd16 New strategy: pure market making"},{"location":"release-notes/0.7.0/#new-connector-bamboo-relay","text":"<p></p> <p>Thanks to Hummingbot user <code>Joshua | Bamboo Relay</code>, we have our first community-contributed 3rd party exchange connector! Bamboo Relay is a 0x open order book relayer that offers active trading pairs in many ERC-20 Ethereum tokens, including DAI, MKR, and BAT.</p> <p>This connector is now available as part of the core Hummingbot codebase, and all strategies should work with it. Since this is a new connector, users may encounter bugs or unexpected behavior. Please report any issues on Github or the #support channel in our Discord.</p>","title":"\ud83d\udd17 New connector: Bamboo Relay"},{"location":"release-notes/0.7.0/#improved-logging","text":"<p>In order to make log messages more actionable and relevant to users, we have made significant improvements in Hummingbot's logging infrastructure. Stack traces and detailed error messages are now confined to the log file only. The log pane in the Hummingbot client will still mention errors, but the majority of the messages are related to Hummingbot's trading activity</p>","title":"\ud83d\udcdc Improved logging"},{"location":"release-notes/0.7.0/#improved-discovery-strategy","text":"<p>We made a number of improvements to the discovery to make it easier for users to use. For example, users can now automatically scan for arbitrage opportunities across all possible trading pairs, though it still takes a long time to process. We will continue to improve this function in order to help users identify the best trading pairs and markets in which to run Hummingbot.</p>","title":"\ud83d\udd0d Improved <code>discovery</code> strategy"},{"location":"release-notes/0.7.0/#started-configurability-initiative","text":"<p>We have started an initiative to make the Hummingbot codebase more configurable and accessible to developers, because we want to make it easy for users to create new strategies, add connectors, and contribute to our community.</p> <p>In this release, we have re-organized the codebase file structure and added more comments to the strategy files. In the upcoming releases, users can expect a lot more documentation on code layout, simpler strategies, tutorials, and other resources for developers interested in hacking on Hummingbot.</p>","title":"\u2699\ufe0f Started configurability initiative"},{"location":"release-notes/0.7.0/#bug-fixes-and-miscellaneous-updates","text":"<p>Our top priority currently is to improve Hummingbot's core stability. To that end, we made the following fixes in the last release and will continue to make more stability fixes in the coming release.</p> <ul> <li>Hummingbot now only cancels its own orders on Coinbase Pro and not any other orders placed by the same user</li> <li>Fixed a bug that incorrectly displayed the profitability in the <code>status</code> output for the cross-exchange market making strategy</li> <li>Fixed a bug that resulted in division by zero errors in Binance</li> <li>Fixed a bug that caused unnecessary \"API call error\" log messages</li> <li>Fixed a bug that caused inadvertent \"Order book empty\" log messages</li> <li>Fixed a bug that prevented users from exiting Hummingbot when the Coinbase Pro API key is invalid</li> <li>Added Hummingbot version to log files</li> </ul>","title":"\ud83d\udc1e Bug fixes and miscellaneous updates"},{"location":"release-notes/0.8.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.8.0! Please see below for what's new in this release.</p>","title":"Release Notes - Version 0.8.0"},{"location":"release-notes/0.8.0/#telegram-bot-allows-you-to-control-hummingbot-on-the-go","text":"<p></p> <p>Now, you can create a Telegram bot that is linked to a running instance of Hummingbot. This allows you to start and stop the bot, as well monitor activity with <code>history</code> and <code>status</code> commands. The integration works across all operating systems and environments, both locally and in the cloud.</p> <p>Check out the new Telegram documentation page to learn how to set this up.</p>","title":"\ud83c\udfc3 Telegram bot allows you to control Hummingbot on the go"},{"location":"release-notes/0.8.0/#pure-market-making-strategy-is-now-extensible-via-plugins","text":"<p>We modified the architecture of the pure market making strategy to allow for extensibility and customization. The strategy can now use external plugins that enhance the sophistication of the basic strategy. For instance, advanced users can add a plugin that incorporates a signal for the direction in which the market is trending. We will publish more documentation that describes how this works.</p> <p>In addition, the strategy now halts making orders on one side of the order book if the user's inventory is insufficient.</p>","title":"\ud83e\udd16 Pure market making strategy is now extensible via plugins"},{"location":"release-notes/0.8.0/#improvements-to-client-interface","text":"<p></p> <p>Based on user feedback, we've added a couple of features to make users' lives easier:</p> <ul> <li>Users can now use the <code>config</code> command to reset the current configuration and import/create a new one, rather than having to exit Hummingbot and restart</li> <li>The trade log displayed in the <code>history</code> command now shows fees and gas costs.</li> </ul>","title":"\ud83d\udcbb Improvements to client interface"},{"location":"release-notes/0.8.0/#update-idex-connector","text":"<p>Over the past few weeks, we have been working closely with the IDEX team to integrate with their decentralized exchange. While the bulk of the work is complete, there are some some edge cases and bugs on which we are working out. </p> <p>We anticipate that the IDEX connector will be incorporated into the <code>master</code> branch in the next release, and users should be able to test it on the <code>development</code> branch in a few days.</p>","title":"\ud83d\udd17 Update: IDEX connector"},{"location":"release-notes/0.8.0/#bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <p>Below are the main ones that we fixed in this release:</p> <ul> <li>Coinbase Pro connector now accounts for already-cancelled orders (#328)</li> <li>Fixed a bug that caused small orders to fail (#329)</li> <li>Fixed a bug that caused stop loss tracker errors for tokens without a price feed (#336)</li> <li>Fixed a bug that displayed the wrong error message in the pure market making strategy when user balances were too low (#337)</li> <li>Fixed a bug that showed orders as active even after they are filled (#341)</li> </ul>","title":"\ud83d\udc1e Bug fixes and miscellaneous updates"},{"location":"release-notes/0.8.1/","text":"<p>This release is a hotfix to version 0.8.0.</p> <ul> <li>Fixed log errors and order tracking of filled ordes in pure market making strategy</li> <li>Fix bug in re-configuring a single variable</li> </ul>","title":"Release Notes - Version 0.8.1"},{"location":"release-notes/0.9.0/","text":"<p>\ud83d\ude80Welcome to <code>hummingbot</code> version 0.9.0! Please see below for what's new in this release.</p>","title":"Release Notes - Version 0.9.0"},{"location":"release-notes/0.9.0/#earn-rewards-from-trading-with-liquidity-bounties","text":"<p>Liquidity bounties are live! We have partnered with Harmony Protocol to launch the $ONE Makers program, which gives ETH-based rewards for Hummingbot users who provide liquidity to Harmony's $ONE token. </p> <p></p> <p>To get started, update Hummingbot to <code>v0.9.0</code> and use the <code>bounty --register</code> command when you run Hummingbot.</p>","title":"\ud83c\udfc3 Earn rewards from trading with Liquidity bounties"},{"location":"release-notes/0.9.0/#new-market-connector-idex","text":"<p></p> <p>With 67% market share (source: dex.watch), IDEX is the most active Ethereum-based decentralized exchange currently. We have worked closely with their team over the past few weeks to build this connector.</p> <p>Today, we're happy to announce that the IDEX market connector is ready for use, and all Hummingbot strategies should work on IDEX.</p>","title":"\ud83d\udd17 New market connector: IDEX"},{"location":"release-notes/0.9.0/#multiple-orders-in-the-pure-market-making-strategy","text":"<p>The pure market making strategy now allows you to place multiple levels of orders on each side of the order book. This allows market makers to set different tiers of orders with different spreads and order amounts. </p> <p>For information on how to use this new feature, please see the Multiple Orders configuration section.</p>","title":"\ud83d\udcbb Multiple orders in the pure market making strategy"},{"location":"release-notes/0.9.0/#performance-analysis-in-history-command","text":"<p>Tracking profits and losses is an essential part of trading. The <code>history</code> command now has a Profitability section which computes your return expressed as a percentage of your starting inventory balance. We will publish a blog post shortly with the methodology of how we calculate performance.</p>","title":"\ud83d\udcc8 Performance analysis in <code>history</code> command"},{"location":"release-notes/0.9.0/#bug-fixes-and-miscellaneous-updates","text":"<p>Thanks to everyone who reported bugs! Note that we pay bug bounties to anyone who reports a bug that we end up fixing.</p> <p>Below are the main ones that we fixed in this release:</p> <ul> <li><code>status</code> command now stops printing duplicate output</li> <li>Fixed a bug which causes exchange rate conversion issues when running the cross-exchange market making strategy between DDEX and IDEX #386</li> <li>Fixed a bug which prevented running the arbitrage and cross-exchange strategies one one exchange #401</li> <li>Hummingbot now displays warnings if order amounts are lower than minimum order size #402</li> <li>Fixed a error that stopped the cross-exchange market making strategy after one trade on Binance #427</li> <li>Fixed a bug in the pure market making strategy that flooded trade logs with error messages when balances were insufficient #451</li> </ul>","title":"\ud83d\udc1e Bug fixes and miscellaneous updates"},{"location":"release-notes/0.9.1/","text":"<p>This release is a hotfix to version 0.9.0.</p> <ul> <li>Fixed a rounding error related to tracking of BTC-denominated trading pairs for liquidity bounties</li> </ul>","title":"Release Notes - Version 0.9.1"},{"location":"release-notes/1.0.0/","text":"<p>Released on January 27, 2022</p> <ul> <li>Install via Docker: Linux | Windows | macOS | Raspberry Pi</li> </ul> <p>We are very excited to ship the first official Hummingbot release (v1.0.0) today!</p> <p>This release contains significant improvements to the <code>avellaneda</code> strategies, major updates of Binance and Binance Perpetual connectors, discontinue of the Binary build, and improved documentation for both Avellaneda and Perpetual market making strategies as well as developer documentation for perpetual connectors.</p>","title":"Release Notes - Version 1.0.0"},{"location":"release-notes/1.0.0/#binance-and-binance-perpetual-improvement","text":"<p>We have refactored <code>binance</code> and <code>binance_perpetual</code> with the best practices of a Hummingbot connector. Going forward, these connecotrs will be the standard for <code>spot</code> and <code>perpetual</code> type exchange connectors, respectively. Community developers who want to integrate an exchange into Hummingbot should use these two connectors as references.</p> <p>Updates to these connectors include:</p> <ul> <li>Refactored from Cython to pure Python code</li> <li>Removed dependency from python-binance library and implemented all interactions by directly consuming the official API</li> <li>Adapted all REST API interactions to use the recently developed web assistant</li> <li>Changed implementation of data source classes to use only one WebSocket connection and use only one shared connection in all places wherever possible</li> <li>All consumptions of the API are regulated by the user of the API throttler for both REST and WebSocket API</li> <li>Used the newly developed orders tracker to manage inflight orders</li> <li>Stopped using ad-hoc logic to translate from exchange token-pair notation and vice versa. Connectors now keep track of the mapping base on the information provided by the exchange and the tokens composing each pair</li> <li>Added docstrings for the \u201cinterface\u201d methods that users of the class will use</li> </ul> <p>Some exclusive parameters for Binance have also been removed, following the major update to the Binance connector. These commands are no longer available: <code>pnl</code>, <code>open_orders</code>, <code>trades</code>, and <code>binance_markets</code>.</p> <p>Changes can be seen here for Binance and Binance Perpetual.</p>","title":"Binance and Binance Perpetual Improvement"},{"location":"release-notes/1.0.0/#discontinued-binary-support","text":"<p>We previously announced in the version 0.46 release notes about discontinuing binary installers. In this release, we have removed and cleaned up the codebase anything related to supporting binary installation, however, users can continue to use the older version of binaries available until version 0.46. that can be downloaded from the installation page.</p> <p>New users who want to test and try out Hummingbot can launch an instance of Test Drive at https://hummingbot.io/test-drive/.</p>","title":"Discontinued Binary Support"},{"location":"release-notes/1.0.0/#improved-avellaneda-market-making-part-2","text":"<p>We are making improvements to the initial implementation of the Avellaneda-Stoikov strategy. In this release, we added improvements specifically to the infinite time horizon, making more sense for crypto markets since they run 24/7. The original strategy was invented for stock markets which are only active during certain trading hours.</p> <p>Users can now set an infinite time horizon. Additionally, users can specify the strategy to run from time to time every day, or from one date to another date, making the strategy more flexible. For example, users can schedule the strategy to run only during a mining campaign or schedule it to only run during hours when the user is awake to keep an eye on it.</p> <p>Three different use cases are possible in the current implementation:</p> <ul> <li>A: The trader wants to run the bot 24/7, creating orders as long as the bot is running  (infinite_time)</li> <li>B: The trader wants to run the bot only during a defined time during the day    (daily_trading_time)</li> <li>C: The trader wants to run the bot 24 hours, but until a certain date      (fixed_end_date)</li> </ul> <p>More details are described in the Github issue #4650.</p>","title":"Improved Avellaneda Market Making (Part 2)"},{"location":"release-notes/1.0.0/#developer-updates","text":"<ul> <li>Replaced <code>websockets</code> library with <code>aiohttp</code> in <code>Bitmart</code>, <code>Coinbase Pro</code>, and <code>Kraken</code> connector</li> <li>Rework the <code>Time factor (T)</code> on the <code>Avellaneda</code> strategy to allow an infinite time horizon</li> <li>Implement changes to <code>mexc</code> connector</li> <li>Deprecate <code>MarketBase</code> abstract class</li> </ul>","title":"Developer Updates"},{"location":"release-notes/1.0.0/#bug-fixes","text":"<ul> <li>#2084 Fixed incorrect trade fees recorded for some connectors</li> <li>#4712 Fixed for the bottom nav bar, which freezes and stops updating</li> <li>#4738 Fixed the <code>NoOpenForCancel</code> error which causes untracked fills in Ascendex. Thanks to zappra for this fix! \ud83d\ude4f</li> <li>#4815 Fixed parsing errors on some trading pairs for Beaxy and HitBTC</li> <li>#4828 No printing in the output pane after <code>status --live</code> is terminated</li> <li>#4869 Fixed Avellaneda Market Making order refresh tolerance not working</li> <li>#4894 Top bid is assigned top ask in Cross Exchange Market Making</li> <li>$4914 Fixed randomly appearing <code>RunTimeWarning</code> on the log pane</li> <li>#4923 Fixed trade monitor freezing</li> <li>#4998 Fixed the argument -h and --help they now print help for the particular command, and these options are also being displayed in dropdown menus</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/1.0.1/","text":"<p>This release is a hotfix to version 1.0.0.</p> <p>Fixed an issue where <code>Trade P&amp;L</code> in <code>history</code> command output still shows 0 value even after trades are executed. More information about this bug in #5069 and the hotfix in #5099.</p>","title":"Release Notes - Version 1.0.1"},{"location":"release-notes/1.1.0/","text":"<p>Released on February 28, 2022</p> <ul> <li> <p>Install via Docker: Linux | Windows | macOS | Raspberry Pi</p> </li> <li> <p>Binary builds are no longer supported. Docker and Source are now the only supported methods of install.</p> </li> </ul> <p>We are very excited to ship the February 2022 Hummingbot release (v1.1.0) today!</p>","title":"Release Notes - Version 1.1.0"},{"location":"release-notes/1.1.0/#new-spot-connector-altmarketsio","text":"<p>AltMarkets.io is a centralised cryptocurrency exchange focusing on lower tier cryptocurrencies. They offer a stable, easy to use platform for anyone in the cryptocurrency industry looking to trade upcoming tokens/coins before they hit bigger/more established exchanges.</p> <p>More information about the connector in AltMarkets.io documentation.</p>","title":"New Spot Connector: AltMarkets.io"},{"location":"release-notes/1.1.0/#developer-updates","text":"<ul> <li>Replacement of websockets library with <code>web_assistant (aiohttp)</code> library for the Bitmart Connector.</li> <li>Enable derivates connectors to be used as price source for external markets Thanks to leastchaos </li> <li>Refactor / change avellaneda mm <code>reserved</code> to <code>reservation</code></li> <li>Refactor / update connector status in the client</li> </ul>","title":"Developer Updates"},{"location":"release-notes/1.1.0/#bug-fixes","text":"<ul> <li>#4865 Include str type in Prompt type Thanks to unparalleled-js for this fix! \ud83d\ude4f</li> <li>#4867 Mutable default argument Thanks to unparalleled-js for this fix! \ud83d\ude4f</li> <li>#4923 Fixed trade monitor freezing</li> <li>#4944 Normalize primary color login screen Thanks to sisco0 for this fix! \ud83d\ude4f</li> <li>#4968 Fixed rounding for balance over hundred percent Thanks to sisco0 for this fix! \ud83d\ude4f</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/1.1.1/","text":"<p>This release is a hotfix to version 1.1.0.</p> <p>Refactor of the logic that collects anonymous trade volume metrics and sends the information to Hummingbot Foundation. The previous logic that associated metrics collection to processing the logs has been removed.  The new logic associates the trades volume metrics collection directly to the connectors, and uses the events to gather trades (or order fills). More information about the hotfix here #5173.</p>","title":"Release Notes - Version 1.1.1"},{"location":"release-notes/1.10.0/","text":"<p>Released on November 29, 2022</p> <ul> <li>Install via Docker: Linux | Windows | macOS | Raspberry Pi</li> </ul> <p>We are very excited to ship the November 2022 Hummingbot release (v1.10.0) today! See below for the highlights in this release.</p>","title":"Release Notes - Version 1.10.0"},{"location":"release-notes/1.10.0/#new-chains-and-dex-connectors-bnb-chain-cronos-near-pancakeswap","text":"<p>Gateway continues to expand connectivity to leading DEX ecosystems, enabling Hummingbot users develop cross-chain, cross-exchange stategies. This release adds support for the following blockchains and the DEXs on them:</p> <ul> <li>BNB Chain: PancakeSwap and SushiSwap</li> <li>Cronos: VVS Finance and MM Finance</li> <li>NEAR: Ref.Finance</li> </ul>","title":"New Chains and DEX Connectors: BNB Chain, Cronos, NEAR, PancakeSwap"},{"location":"release-notes/1.10.0/#3-new-spot-cex-connectors-btc-markets-lbank-whitebit","text":"<p>This release features 3 new connectors to spot markets on the following centralized exchanges:</p> <ul> <li> <p><code>BTC Markets</code> is a centralized cryptocurrency exchange established in Australia, and is available for local residents only. BTC Markets aims to provide clients with an efficient, secure, and reliable trading platform. Its services are available to individuals, organizations, and Self-Managed Super Funds.</p> </li> <li> <p>LBank is a Hong Kong-based centralized exchange (CEX) platform that was established in 2015, with offices in the British Virgin Islands, U.S., Australia and Canada. The platform allows users to buy and sell major crypto assets like Bitcoin (BTC) and Ethereum (ETH) in over 50 fiat currencies, with over 20 payment methods. The company has licenses from the National Futures Association, Australian Transaction Reports and Analysis Center and money services businesses in Canada.</p> </li> <li> <p>Whitebit is a European centralized exchange that offers crypto-to-crypto and crypto-to-fiat transactions with 0.1% trading fees.</p> </li> </ul>","title":"3 New Spot CEX Connectors: BTC Markets, LBank, WhiteBIT"},{"location":"release-notes/1.10.0/#2-new-perpetual-cex-connectors-gateio-bitget","text":"<p>This release features 3 new connectors to perpetual futures markets on the following centralized exchanges:</p> <ul> <li> <p>Gate.io is operated by Gate Technology Corp. Their mission is to serve the blockchain industry by providing secure and reliable products &amp; services to consumers and companies around the world.</p> </li> <li> <p>Bitget is a centralized cryptocurrency exchange established in 2018 and is registered in Singapore. Bitget is one of the world\u2019s leading cryptocurrency exchanges with a core focus on social trading.</p> </li> </ul> <p>See the Bitget documentation for more information.</p>","title":"2 New Perpetual CEX Connectors: Gate.io, Bitget"},{"location":"release-notes/1.10.0/#new-strategy-cross-exchange-mining","text":"<p>This new strategy offers sets orders on a maker exchange and seeks to profit off of the difference in the spread between taker and maker exchanges. The strategy is similar to the cross exchange market making strategy however it is more reliable in ensuring orders on the taker side are filled and assets remain hedged and balanced across exchanges. See cross exchange mining for more details.</p> <p>Thanks to bsmeaton for this contribution! \ud83d\ude4f</p>","title":"New Strategy: Cross Exchange Mining"},{"location":"release-notes/1.10.0/#new-script-examples","text":"<p>Hummingbot has evolved from a simple market making bot into a powerful generalized framework for building any automated trading stategy on any CEX or DEX. Hummingbot codebase now features examples of 12 different scripts that you can customize and run using Hummingbot.</p> <p>Each cohort of Hummingbot Botcamp, our new intensive 4-week bootcamp that teaches students how to create custom trading strategies as simple Hummingbot scripts, will add more examples into the codebase.</p> <p>All scripts examples can be found here.</p>","title":"New Script Examples"},{"location":"release-notes/1.10.0/#other-changes","text":"","title":"Other Changes"},{"location":"release-notes/1.10.0/#client-updates","text":"<ul> <li>5849 Refactored the <code>dYdX perpetual</code> connector to gold standard</li> <li>5860 Updated the <code>Bybit</code> spot connector to v2.1 *Thanks to yancong001 for this fix! \ud83d\ude4f</li> <li>5893 Removed <code>FTX</code> connector and other references from the codebase</li> </ul>","title":"Client Updates"},{"location":"release-notes/1.10.0/#gateway-updates","text":"<ul> <li>5719 Fixed issue with the <code>gateway connector-tokens</code> parameter nor returning the set tokens for balance command</li> <li>5735 Fixed conflict with the <code>curl.sh</code> script *Thanks to han-qiu for this fix! \ud83d\ude4f</li> </ul>","title":"Gateway Updates"},{"location":"release-notes/1.10.0/#bug-fixes","text":"<ul> <li>5766 Fixed issue with <code>OKX</code> cancel order error code *Thanks to huatahhhhh for this fix! \ud83d\ude4f</li> <li>5781 Fixed issue with incorrect quote volume quantize method when querying the order book *Thanks to supervik for this fix! \ud83d\ude4f</li> <li>5809 Fixed issue with the <code>config</code> command that allowed a strategy to be updated in a loaded config *Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5812 Fixed issue with the <code>XEMM</code> strategy price conversions *Thanks to kadirc for this fix! \ud83d\ude4f</li> <li>5820 Fixed issue where the throttler duplicates requests in the task log *Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5828 Fixed issue with <code>OKX</code> orderbook datasource getting the wrong amount *Thanks to huatahhhhh for this fix! \ud83d\ude4f</li> <li>5852 Fixed issue with base asset balance in asset ratio config *Thanks to ethicrypt for this fix! \ud83d\ude4f</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/1.11.0/","text":"<p>Released on December 21, 2022</p> <ul> <li>Install via Docker: Linux | Windows | macOS | Raspberry Pi</li> </ul> <p>We are very excited to ship the December 2022 Hummingbot release (v1.11.0) today! See below for the highlights in this release.</p>","title":"Release Notes - Version 1.11.0"},{"location":"release-notes/1.11.0/#revamped-hedge-strategy","text":"<p>We awarded HIP-19 to community developer <code>leastchaos</code> who developed the hedge strategy, so that he could revamped and improve it. The changes have now been released!</p> <p>Here are the key changes:</p> <ul> <li>Cython \u2192 Python: Simplified code for easier improvements in the future.</li> <li>One exchange \u2192 Multiple Exchange: Allow hedging of multiple assets at multiple exchanges at the same time</li> <li>Hedge by amount \u2192 Hedge by amount or value: Allow hedge based on the current asset value in quote asset.</li> <li>Remove restriction on spot/perp on both maker and taker: Able to select both spot and perpetual for both monitored market and hedge market</li> <li>Added fixed offset: Allow maintaining of a fixed net amount of asset amount/value.</li> </ul> <p>Thanks to leastchaos for this contribution! \ud83d\ude4f</p>","title":"Revamped <code>hedge</code> Strategy"},{"location":"release-notes/1.11.0/#improvements-to-ascendex-and-huobi-connectors","text":"<p>The improvements below upgraded two of our certified exchanges to the latest CEX connector standard and should resolve issues that users have been encountering with them:</p> <ul> <li>5891 Refactored the <code>Ascendex</code> spot connector to v2.1</li> <li>5892 Refactored the <code>Huobi</code> spot connector to v2.1</li> </ul> <p>Thanks to CoinAlpha for these contributions! \ud83d\ude4f</p>","title":"Improvements to AscendEx and Huobi connectors"},{"location":"release-notes/1.11.0/#gateway-ux-improvements","text":"<p>Installing Gateway from source should now be much easier, since we have modified the <code>generate_certs</code> command so that it automatically populates the correct path in Gateway's <code>ssl.yml</code> file. The Gateway developer setup docs now reflect this new, simpler workflow. In addition, we also added prompts to guide users in using Gateway commands intended for Docker and non-Docker use cases in this pull request.</p> <ul> <li>5918 Added support for configurable cert paths for Gateway</li> </ul> <p>We also changed the default <code>TokenList</code> settings for each Gateway DEX connector so that it uses a local file rather than a URL. See the new Adding Tokens documentation page for more information.</p> <ul> <li>5953 Changed the default tokenlists from URLs to files in gateway</li> </ul>","title":"Gateway UX improvements"},{"location":"release-notes/1.11.0/#changes-to-governance-and-maintenance-process","text":"<p>In this blog post, we described some big upcoming changes to our monthly process. Starting in January, we will use regular Snapshot polls to let HBOT holders decide how maintenance bandwidth should be allocated the various exchanges, strategies, and issues. In particular, exchanges and strategies will need to get a certain minimum number of HBOT votes to stay in the codebase.</p> <p>This month, we started the process by removing exchanges from the codebase that don't seem to be operational anymore:</p> <ul> <li>5943 Removed <code>Blocktane</code> and <code>CoinFlex</code> connector and other references from the codebase</li> </ul> <p>We also started a Discord thread that lets users nominate issues for the first Issues Poll later this month.</p>","title":"Changes to governance and maintenance process"},{"location":"release-notes/1.11.0/#other-fixes-and-updates","text":"<ul> <li>5885 Fixed \"unsupported <code>Nonetype</code> and <code>decimal.Decimal</code>\" errors running Spot-Perp arb on Gateway</li> <li>5923 Fixed Gateway perpetual price quantum Thanks to kadirc for this fix! \ud83d\ude4f</li> <li>5475 Fixed issue with the <code>AroonOscillatorIndicator</code> so that it correctly reflects the value ranges from 0 to 100 Thanks to tramchamploo for this fix! \ud83d\ude4f</li> <li>5862 Fixed the <code>avellaneda</code> strategy status for hanging orders Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5867 Fixed issue with <code>binance</code> perpetual get position Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5921 Fixed <code>XEMM</code> strategy taker queries Thanks to kadirc for this fix! \ud83d\ude4f</li> </ul>","title":"Other Fixes and Updates"},{"location":"release-notes/1.12.0/","text":"<p>Released on January 27, 2023</p> <ul> <li>Install via Docker: Linux | Windows | macOS | Raspberry Pi</li> </ul> <p>We are very excited to ship the January 2023 Hummingbot release (v1.12.0) today! See below for the highlights in this release.</p>","title":"Release Notes - Version 1.12.0"},{"location":"release-notes/1.12.0/#epoch-3-polls-changes","text":"<p>Recently, we finished the first set of Polls, a new initiative that lets HBOT holders decide how the Foundation allocates its engineering bandwidth and developer bounties across the components in the Hummingbot codebase. Based on the results of the Polls, below are the outline of the changes made initially in this release.  </p> <ul> <li>Adjusted the documentation pages for each Exchange Connector and Strategy</li> <li>Removed exchange connectors that did not meet the Minimum Voting Power Threshold from the codebase</li> <li>Removed <code>Fixed Grid</code> and <code>Arbitrage</code> strategies since they did not meet the Minimum Voting Power Threshold</li> <li>Running the <code>connect</code> command reflects the CEX connector tiers (Gold, Silver, Bronze), also a new command was added <code>gateway list</code> to display all available DEX connectors and their tiers</li> </ul> <p>For more details of the Epoch 3 poll results check out this blog post: https://blog.hummingbot.org/epoch-3-polls/</p>","title":"Epoch 3 Polls Changes"},{"location":"release-notes/1.12.0/#orchestration-module-phase-i","text":"<p>Last year, the community voted to allocate a bounty to fund development of an orchestration module that lets users control multiples instances of Hummingbot. See this Notion doc for an overview of the project.</p> <p>Phase 1 will provide a clean communication and messaging layer and allow for remote control and monitoring of multi-bot environments in a distributed context. Meaning that bots can \"live\" on different machines and infrastructures (e.g. having a bot local and another bot on AWS).</p> <p>To achieve this approach, Phase 1 implements an MQTT layer for bots to connect remotely to message brokers, as a single point of reference, using asynchronous bidirectional communication channels (push/pull). In this architecture, bots can be considered as clients to the overall environment. Bot scaling is seamless and does not require any further setup, anyone can connect any number of bots the a message broker (e.g. RabbitMQ, EMQX etc) without any other dependencies.</p> <p>Outline of the features included in Phase I</p> <ul> <li> <p>Interface to execute remote commands -     <code>Start</code> , <code>Stop</code> , <code>Import</code> , <code>Config strategy</code>, <code>Balance</code> , <code>Change balance limits</code></p> </li> <li> <p>All these commands can be called using an unified web application that also receives the following information from the bots - <code>Heartbeat - Status</code>, <code>PNL - History</code></p> </li> <li> <p>The configuration of the broker in the client should be in the <code>conf_client.yml</code> file</p> </li> </ul> <p>See this page for a requirements doc for this project and past discussions.</p> <p>Thanks to klpanagi and TheHolyRoger for your work! \ud83d\ude4f</p>","title":"Orchestration Module Phase I"},{"location":"release-notes/1.12.0/#hedge-strategy-updates","text":"<p>Key changes:</p> <ul> <li>Add more info to facilitate debugging.</li> <li>Refactor the status screen and add more information and log</li> <li>Fixed position name referring to True and False to ONE-WAY and HEDGE</li> <li>Fixed issues related to typing</li> <li>For hedge by amount,     a. change the matching of pairs from the match by trading pair to match by base asset     b. change hedge price calculation for hedge by the amount to use mid-price instead of VWAP price.     i. This is mainly used to calculate the market price to put since hummingbot only allows limit orders. Users can still increase slippage to guarantee their trade is made.</li> </ul> <p>Thanks to leastchaos for this contribution! \ud83d\ude4f</p>","title":"<code>hedge</code> Strategy Updates"},{"location":"release-notes/1.12.0/#new-exchange-connector-ci-ex","text":"<p>Centurion Invest Exchange (CI-EX)'s vision is to bring avant-gardist investment tools and instruments into one platform, bridging the fiat and forex world with cryptocurrency through multiple services. See the CI-EX documentation for more information.</p> <p>Thanks to CoinAlpha for this contribution! \ud83d\ude4f</p>","title":"New Exchange Connector: CI-EX"},{"location":"release-notes/1.12.0/#new-gateway-chain-cosmos","text":"<p>This release adds a Cosmos chain base that can be used to add other Cosmos-based chains and connectors like Sifchain.</p> <p>See the Cosmos documentation for more information.</p> <p>Thanks to pecuniafinance for this contribution! \ud83d\ude4f</p>","title":"New Gateway Chain: Cosmos"},{"location":"release-notes/1.12.0/#gateway-ux-improvements","text":"<p>We've added multiple ways users can approve tokens for spending on Gateway in this pull request</p> <ul> <li> <p>6005 Added methods to approve tokens</p> </li> <li> <p>Using the <code>approve-token</code> command</p> </li> <li>Approve manually using the DEX interface</li> <li>Approve manually using Etherscan</li> </ul> <p>See the Gateway Setup documentation page for more information on how to approve tokens.</p> <p>Also removed the auto approval method from Gateway and added the <code>btc.b</code> token to the tokenlist</p> <ul> <li>5997 Removed auto approval from <code>gateway_evm_amm</code></li> <li>6016 Added the <code>btc.b</code> token to the Avalanche tokenlist</li> </ul>","title":"Gateway UX improvements"},{"location":"release-notes/1.12.0/#other-fixes-and-updates","text":"<ul> <li>4922 Removed duplicated property in the <code>PMM</code> strategy Thanks to takuya29 for this fix! \ud83d\ude4f</li> <li>5499 Fixed issue with the time display in Hummingbot Thanks to theomaniac for this fix! \ud83d\ude4f</li> <li>5976 Refactored the <code>Binance perpetual</code> connector to the latest standards Thanks to yancong001 for this fix! \ud83d\ude4f</li> <li>5982 Fixed issue with the custom API feature not working in the <code>PMM</code> strategy</li> <li>5999 Fixed issue with the <code>import</code> command crashing when given <code>file_name</code> is wrong Thanks to klpanagi for this fix! \ud83d\ude4f</li> <li>6008 Removed the <code>suspend</code> and <code>restore</code> feature from the <code>start</code> and <code>exit</code> commands Thanks to klpanagi for this fix! \ud83d\ude4f</li> <li>6011 Fixed issue with <code>Gate.io</code> delay in updating the total balance Thanks to supervik for this fix! \ud83d\ude4f</li> </ul>","title":"Other Fixes and Updates"},{"location":"release-notes/1.13.0/","text":"<p>Released on February 28, 2023</p> <p>We are very excited to ship the February 2023 release of Hummingbot (v1.13.0) today! This release introduces new standalone open source repositories for the <code>gateway</code> DEX connector module, the community-maintained <code>/brokers</code> multi-bot orchestration module, and a new <code>deploy-examples</code> repo. </p> <p>Hummingbot</p> <ul> <li>Github: <code>v1.13.0</code></li> <li>DockerHub: <code>version-1.13.0</code> | <code>version-1.13.0-arm_beta</code></li> </ul> <p>Hummingbot Gateway</p> <ul> <li>Github: <code>v1.13.0</code></li> <li>DockerHub: <code>version-1.13.0</code></li> </ul> <p>Deployment Repos</p> <ul> <li><code>hummingbot/deploy-examples</code>: Deploy Hummingbot in various configurations with Docker</li> <li><code>hummingbot/brokers</code>: Multi-bot orchestration</li> </ul> <p>See below for what's new this month!</p>","title":"Release Notes - Version 1.13.0"},{"location":"release-notes/1.13.0/#directional-framework","text":"<p>This release adds the first components of the Directional Framework mentioned in our 2023 Technical Roadmap:</p>  <p>Execution bot: Bot that receives signals that based on local rules, create a new position and control three barriers: (1) stop loss, (2) take profit and (3) time limit. After execution, the bot can send trading status and history to other destinations.</p>  <p>6026 added the <code>PositionExecutor</code> smart component. This component receives as input the strategy and the <code>PositionConfig</code>, which is a new data type that includes the information needed to start a directional position on a perpetuals exchange that utilizes the triple barrier method popularized in Advances in Financial Machine Learning by Martin Prado.</p> <p>For now, the component is controlled by the strategy by calling the method control position every tick, but is going to be improved by creating an async task that is going to execute this process until the executor is done.</p> <p>Watch our monthly developer call for an explanation of the directional framework.</p>","title":"Directional Framework"},{"location":"release-notes/1.13.0/#custom-ohlcv-candles","text":"<p>Our 2023 technical roadmap post also mentioned a project to help users generate custom indicators using exchange data:</p>  <p>Many of the traders and Hummingbot developers are interested in add indicators to their strategies.</p> <p>Currently, the only way to do this with Hummingbot right now is using trailing indicators (per-tick price data collected by the bot), but this solution is not suitable for candlestick indicators, since you have to get historical data to construct the OHLCs needed.</p> <p>That\u2019s why one of the projects will be the OHLC Generator, that will allow users to initialize their strategies with multiple OHLCs (time or volume based). In addition, we plan to support third-party library like ta-lib so that users can compute and create various indicators.</p>  <p>6046 added a candles data feed for binance and binance-perpetual. This \"signal factory\" component allows users to generate custom OHLCV candles using both historical and live Websocket data, allowing traders to use technical indicators to code directional strategies.</p> <p>A base class is provided to add more candle providers and a <code>CandlesFactory</code> is also included to simplify the creation of the candles. We encourage community members to add data feeds for other exchanges.</p>","title":"Custom OHLCV Candles"},{"location":"release-notes/1.13.0/#new-gateway-standalone-repo-and-docs","text":"<p>Gateway is now a standalone repository: https://github.com/hummingbot/gateway. It has a similar license, folder structure, and contribution process to Hummingbot. In addition, the Gateway DockerHub is located at: https://hub.docker.com/repository/docker/hummingbot/gateway.</p> <p>In addition, we have significantly updated the Gateway installation process. Now, users can install Gateway from source or via Docker, similarly to Hummingbot. The newly updated Gateway documentation show you how to install and use Gateway with Hummingbot. </p> <p>In addition, the <code>/deploy-examples</code> repo shows you how to set up Hummingbot and Gateway with Docker Compose.</p> <ul> <li>6080 Removed Gateway from Hummingbot repo</li> <li>6092 Removed the gateway <code>start</code>, <code>stop</code> and <code>create</code> commands since the new setup is different</li> <li>6063 Simplified Gateway certs management</li> </ul>","title":"New Gateway Standalone Repo and Docs"},{"location":"release-notes/1.13.0/#new-script-examples","text":"<ul> <li>amm_price_example.py: Fetches price from a DEX connector using Gateway</li> <li>amm_trade_example.py: Executes a swap using a DEX connector using Gateway</li> <li>candles_example.py: Build custom indicators using the Binance candles feed</li> <li>simple_directional_script_example.py: Creates a simple directional strategy that uses RSI</li> <li>advanced_directional_script_example.py: Creates an advanced directional strategy that uses both RSI and Bollinger Bands</li> <li>microprice_calculator.py: Computes the microprice price estimator using exchange data</li> </ul> <p>See our January developer call for an explanation of the two directional scripts above, as well as this video from Sasha Stoikov in which he discusses the microprice indicator and runs Hummingbot.</p>","title":"New Script Examples"},{"location":"release-notes/1.13.0/#new-cex-connector-btc-markets","text":"<p>Per PRP-6052, we are happy to welcome the <code>btc-markets</code> connector back to the Hummingbot codebase!</p> <p>BTC Markets is a centralized cryptocurrency exchange established in Australia, and is available for local residents only. BTC Markets aims to provide clients with an efficient, secure, and reliable trading platform. Its services are available to individuals, organizations, and Self-Managed Super Funds. See the btc-markets connector documentation for more information.</p> <p>Thanks to vdmerweandre for this contribution! \ud83d\ude4f</p>","title":"New CEX Connector: <code>btc-markets</code>"},{"location":"release-notes/1.13.0/#other-updates","text":"","title":"Other Updates"},{"location":"release-notes/1.13.0/#hummingbot","text":"<ul> <li>5821 Fixed issue with <code>CoinGecko</code> rate oracle exceeding rate limit Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>6061 Fixed incorrect websocket account position Thanks to yancong001 for this fix! \ud83d\ude4f</li> <li>6066 Added the ability for Hummingbot to autostart scripts. Users can now pass the parameter <code>--config-file-name={script_name}.py</code> for the script to autostart.</li> <li>6051 Added <code>pandas_ta</code> dependency</li> <li>6064 Fixed issue with <code>PaperTrade</code> exchange where the maker order defaults to taker fee</li> <li>6065 Removed the remaining strategies that failed to reach the quorum on last community poll. Recap of Epoch 3 polls here</li> <li>6090 Fixed issue with the <code>Docker</code> update script</li> <li>6104 Fixed some minor cosmetic issues with the <code>directional script</code></li> <li>6067 Fixed issue where Gateway wouldn't start when passphrase is a number</li> </ul>","title":"Hummingbot"},{"location":"release-notes/1.13.0/#gateway","text":"<ul> <li>0016 Refactored <code>Sushiswap</code> connector to support <code>Polygon</code> and <code>Mumbai</code> network Thanks to gzliudan for this fix! \ud83d\ude4f</li> <li>0034 Refactored <code>OpenOcean</code> connector. Thanks to onjeffery for the original fix! \ud83d\ude4f</li> </ul>","title":"Gateway"},{"location":"release-notes/1.2.0/","text":"<p>Released on March 31, 2022</p> <ul> <li> <p>Install via Docker: Linux | Windows | macOS | Raspberry Pi</p> </li> <li> <p>Binary builds are no longer supported. Docker and Source are now the only supported methods of install.</p> </li> </ul> <p>We are very excited to ship the March 2022 Hummingbot release (v1.2.0) today!</p>","title":"Release Notes - Version 1.2.0"},{"location":"release-notes/1.2.0/#developer-updates","text":"<ul> <li>Added formatting to the printout tables in the client CLI. Also allows the user to set the format in the config using <code>tables_format</code></li> <li>Added creation timestamp to <code>in flight orders</code></li> <li>Refactor <code>PaperTradeExchange</code> to use the <code>BudgetChecker</code> when simulating order fills</li> <li>Avellaneda - a multiplier to normalize the <code>risk factor</code> for all assets. The <code>risk_factor</code> now is a fraction / percentage / multiplier of the asset's volatility</li> <li>Pure market making - split and allow multiple order level spread</li> <li>Separate <code>order update</code> from <code>order fill</code> in <code>order tracker</code></li> </ul>","title":"Developer Updates"},{"location":"release-notes/1.2.0/#bug-fixes","text":"<ul> <li>#5037 Fixed incorrect trade ID in order filled event</li> <li>#5050 Fixed XEMM-allow-auto-set-order-amount Thanks to leastchaos for this fix! \ud83d\ude4f</li> <li>#5057 Fixed trade fill CSV export where CSV randomly gets split to multiple files</li> <li>#5090 Fixed the REST mocking performed in the MEXC test cases</li> <li>#5092 Fixed RingBuffer's <code>c_get_as_numpy_array()</code> doesn't return the correct array</li> <li>#5100 Fixed Avellaneda's validation of the execution time parameter when <code>execution_timeframe</code> is set to <code>infinite</code></li> <li>#5101 Fixed Binance spot and perpetual connector delayed start </li> <li>#5108 Fixed issue with the TWAP strategy where the default values don't make sense</li> <li>#5109 Fixed crash-at-start issue when using <code>hummingbot_quickstart.py</code> with password</li> <li>#5117 Fixed a bug where config variable is set to <code>None</code> when an invalid value is provided and <code>CTRL + X</code> is entered afterwards.</li> <li>#5118 Fixed Exception when no command is provided in the client (pressing Enter)</li> <li>#5119 Fixed issues found in TWAP Plus</li> <li>#5141 Fixed Fix Binance conflicting Trade Order information</li> <li>#5203 Update connector status in the client for <code>Altmarkets</code> and <code>Binance</code></li> </ul>","title":"Bug Fixes"},{"location":"release-notes/1.3.0/","text":"<p>Released on April 29, 2022</p> <ul> <li> <p>Install via Docker: Linux | Windows | macOS | Raspberry Pi</p> </li> <li> <p>Binary builds are no longer supported. Docker and Source are now the only supported methods of install.</p> </li> </ul> <p>We are very excited to ship the April 2022 Hummingbot release (v1.3.0) today!</p>","title":"Release Notes - Version 1.3.0"},{"location":"release-notes/1.3.0/#new-spot-connector-coinflex","text":"<p>CoinFLEX is the first connector built under Hummingbot Foundation's community maintenance model. Established in 2019, CoinFLEX is a centralized cryptocurrency exchange located in Seychelles with 26 trading pairs on the exchange.</p> <p>For more information, check out the <code>CoinFLEX</code> documentation, including a special VIP tier trial offer for Hummingbot users!</p>","title":"\ud83d\udd17 New Spot Connector: CoinFLEX"},{"location":"release-notes/1.3.0/#i-more-resources-sections","text":"<p>Look for a new section titled \u2139\ufe0f More Resources in the documentation pages for each Hummingbot strategy, as well as for certain exchange connectors. This section contains community-submitted resources such as guide, videos, and other useful content related to each strategy and connector.</p>","title":"\u2139\ufe0f More Resources sections"},{"location":"release-notes/1.3.0/#developer-updates","text":"<ul> <li><code>ascendex</code> connector has been refactored to include all the latest components and improvements to make it compliant with the new \"gold standard\"</li> <li><code>kucoin</code> connector has been refactored to include all the latest components and improvements to make it compliant with the new \"gold standard\"</li> <li>Change in the implementation of the <code>order age calculation</code> to stop using the <code>timestamp</code> that is part of the <code>order_id</code> and start using the new <code>creation_timestamp</code> field in the orders</li> <li>Allow fees in different tokens</li> </ul>","title":"\ud83d\udcbb Developer Updates"},{"location":"release-notes/1.3.0/#bug-fixes","text":"<ul> <li>#3555 Fixed <code>rate is not available</code> despite using Coingecko as the <code>rate_oracle</code> source</li> <li>#4339 Fixed <code>Unable to display status output</code> on Windows source build</li> <li>#5130 Fixed handling of balance for paper connectors in global config</li> <li>#5135 Fixed order of orders in status, order spread in TWAP strategy</li> <li>#5146 Removed <code>_latest_parameter_calculation_vol</code> in the Avellaneda strategy</li> <li>#5153 Fixed missing import of the <code>ConditionalExecutionState</code> in the Avellaneda strategy</li> <li>#5156 Fixed <code>TradingIntensity</code> with the Avellaneda strategy where trade saving was not correct</li> <li>#5165 Fixed user balance failure for <code>time synchronizer</code></li> <li>#5170 Fixed Binance Perpetual <code>InFlightOrder</code> returns wrong executed amount for partial fills</li> </ul>","title":"\ud83d\udc1b Bug Fixes"},{"location":"release-notes/1.4.0/","text":"<p>Released on May 30, 2022</p> <ul> <li> <p>Install via Docker: Linux | Windows | macOS | Raspberry Pi</p> </li> <li> <p>Binary builds are no longer supported. Docker and Source are now the only supported methods of install.</p> </li> </ul> <p>We are very excited to ship the May 2022 Hummingbot release (v1.4.0) today!</p>","title":"Release Notes - Version 1.4.0"},{"location":"release-notes/1.4.0/#gateway-v2","text":"<p>This release adds Gateway V2, as previously described in the following Hummingbot blog posts:</p> <p>Gateway V2 Code Architecture</p> <p>Gateway V2 Code Architecture part 2</p> <p>Gateway V2 is a major overhaul to the Gateway system, in which Hummingbot uses to communicate with decentralized markets such as Uniswap and Pangolin. Compared to the original Hummingbot Gateway, Gateway V2 adds major improvements to the reliability, user experience and security.</p> <p>Gateway Documentation</p>","title":"Gateway V2"},{"location":"release-notes/1.4.0/#script-strategies","text":"<p>This release also introduces a simplified version of the trading strategies called Script. The scripts are intended to be used without requiring a configuration. All data used by the script should be included in the script file.</p> <p>The script is a Python class. It can be created by subclassing the new <code>ScriptStrategyBase</code> class. All scripts modules should be stored in the <code>/scripts folder</code> (the old scripts folder is renamed to pmm_scripts). There is a new version of the start command for the scripts: <code>start --script &lt;script_module_name&gt;</code></p> <p>Check out the Script Strategies documentation</p>","title":"Script Strategies"},{"location":"release-notes/1.4.0/#developer-updates","text":"<ul> <li>Added a pre-commit hook that will run <code>isort</code> with pre-configured settings to automatically sort the imports of files</li> <li>Simplification of the <code>GitHub validation workflow</code> for the project by extracting the logic that creates the Hummingbot conda environment and compiles and installs Hummingbot client into its own action.</li> <li>Added <code>position mode</code> checks to <code>Perpetual MM</code> and <code>PerpetualTrading</code> base class</li> <li>Use the US spelling of <code>'canceled'</code> and <code>'canceling'</code></li> <li>Restart gateway when the route <code>/config/update</code> is called</li> <li>Replacement of a legacy definition of trade fee schemas with <code>TradeFeeSchema</code> in connectors maintained by CoinAlpha</li> <li>Added FTX referral program</li> </ul>","title":"Developer Updates"},{"location":"release-notes/1.4.0/#bug-fixes","text":"<ul> <li>#3555 Fixed rate oracle coingecko prices request</li> <li>#5084 Fixed <code>Unexpected error</code> while processing <code>event 202</code> during funding payment period</li> <li>#5107 Fixed bug which causes a compiling error when installing Hummingbot from Source</li> <li>#5113 #4975, #5096, #4372, #4778 Fixed multiple issues with the Bybit perpetual connector</li> <li>#5193 Fixed unnecessary text in split order level prompt</li> <li>#5215 Fixed k2 startup error</li> <li>#5222 Fixed <code>Decimal Invalid Operation</code> error when quote balance is too high in the <code>Cross Exchange Market Making</code> strategy</li> <li>#5227 Fixed issue in TWAP strategy where <code>has_enough_balance()</code> doesn't consider <code>order amount</code>, but a total <code>target_asset_amount</code></li> </ul>","title":"Bug Fixes"},{"location":"release-notes/1.5.0/","text":"<p>Released on June 30, 2022</p> <ul> <li> <p>Install via Docker: Linux | Windows | macOS | Raspberry Pi</p> </li> <li> <p>Binary builds are no longer supported. Docker and Source are now the only supported methods of install.</p> </li> </ul> <p>We are very excited to ship the June 2022 Hummingbot release (v1.5.0) today!</p>","title":"Release Notes - Version 1.5.0"},{"location":"release-notes/1.5.0/#new-perpetual-exchange-connector-coinflex","text":"<p>CoinFLEX is a centralized cryptocurrency exchange located in Seychelles. There are 23 coins and 26 trading pairs on the exchange. CoinFLEX volume in the last 24 hours is reported to be at \u20bf54,774.17. The most active trading pair on CoinFLEX exchange is FLEX/USD. Launched on 16/4/2019, CoinFLEX is a centralized exchange that supports physically delivered derivatives as well as the spot market.</p> <p>See the <code>coinflex_perpetual</code> documentation for more information.</p>","title":"New Perpetual Exchange Connector: CoinFLEX"},{"location":"release-notes/1.5.0/#new-spot-exchange-connector-bybit","text":"<p>Bybit is one of the fastest growing cryptocurrency derivatives exchanges, with more than 1.6 million registered users. Built on customer-centric values, we endeavor to provide a professional, smart, intuitive and innovative trading experience for retail and professional clients around the world. Bybit is committed to creating a fair, transparent and efficient trading environment, and offer 24/7 multi-language customer support to provide assistance in a timely manner.</p> <p>See the <code>bybit</code> documentation for more information.</p>","title":"New Spot Exchange Connector: Bybit"},{"location":"release-notes/1.5.0/#new-gateway-dex-connector-traderjoe","text":"<p>TraderJoe is an AMM DEX on the Avalanche (AVAX) blockchain that offers DeFi services, including swapping, staking and yield farming. The exchange has been growing rapidly, attracting over $4 billion in total value locked (TVL) since it was launched in June 2021. Trader Joe claims to take a community-first approach, and to prioritize innovation, speed and safety. It aims to provide a one-stop-shop DeFi experience and to integrate new products without compromising on security.</p> <p>See the <code>traderjoe</code> documentation for more information.</p>","title":"New Gateway DEX Connector: TraderJoe"},{"location":"release-notes/1.5.0/#new-gateway-dex-connector-sushiswap","text":"<p>SushiSwap (SUSHI) is an AMM DEX built on the Ethereum network. Originally forked from Uniswap, SushiSwap leverages smart contracts in order to provide liquidity pools that allow users to directly trade crypto assets \u2014 with no intermediary. Users can also become liquidity pool providers, supplying an equal value pair of two cryptocurrencies in order to receive rewards whenever anyone utilizes that pool. It is a decentralized finance (or DeFi) protocol.</p> <p>See the <code>sushiswap</code> documentation for more information.</p>","title":"New Gateway DEX Connector: Sushiswap"},{"location":"release-notes/1.5.0/#new-fixed-grid-strategy","text":"<p>In this release, we are happy to introduce the <code>fixed_grid</code> strategy for Hummingbot,  the first community strategy created under the Developer Grant proposal HGP-4</p> <p>The <code>fixed_grid</code> strategy is similar to \"Grid Trading Bot\" strategies available on popular exchanges such as Binance and Kucoin, which are often the entry point of users to algorithmic trading in crypto. The strategy may provide a useful tool for market making in consolidating or range-bound markets, as well as for stablecoin pairs.</p> <p>The main parameters needed to set up this strategy are <code>grid_price_ceiling</code>, <code>grid_price_floor</code>, <code>n_levels</code> (the number of grid levels).</p> <p>See the <code>fixed_grid</code> documentation for more information.</p>","title":"New Fixed Grid Strategy"},{"location":"release-notes/1.5.0/#removed-documentation-for-celo-arb-uniswap-v3-lp-and-balancer","text":"<p>We have removed the documentation pages for the <code>celo-arb</code> amd <code>uniswap-v3-lp</code> strategies since they were designed to work with DEX connectors in Gateway-V1, an earlier, deprecated version of Gateway. For the same reason, we have removed the <code>balancer</code> connector page.</p> <p>We plan to restore these pages if the community adds support for UbeSwap (Celo), Balancer, and Uniswap-V3, respectively, in future releases.</p>","title":"Removed Documentation for <code>celo-arb</code>, <code>uniswap-v3-lp</code>, and <code>balancer</code>"},{"location":"release-notes/1.5.0/#developer-updates","text":"","title":"Developer Updates"},{"location":"release-notes/1.5.0/#hummingbot-changes","text":"<ul> <li>5246 Remember the last strategy created or imported</li> <li>5279 Adapt Trade Intensity Indicator to Use Trade Events</li> <li>5296 Add a flag for <code>start_command</code>, if <code>true</code> do not let <code>start_command</code> run</li> <li>5313 Refactor the <code>gate_io</code> connector to bring the code to latest standards</li> <li>5366 Remove the deprecated s flag from Dockerfile</li> <li>5368 Refactor the <code>OKX</code> connector to bring the code to latest standards</li> <li>5379 Change source of Docker images to the Foundation DockerHub instead of CoinAlpha</li> <li>5400 Update the <code>Bitmart</code> connector to the latest connector standard</li> </ul>","title":"Hummingbot changes"},{"location":"release-notes/1.5.0/#gateway-changes","text":"<ul> <li>5257 Increase default <code>gas_limit</code> for <code>ethereum</code> chain</li> <li>5259 Prevent Gateway from logging calls to <code>\u2018/\u2018</code></li> <li>5266 Validate changes to <code>allowedSlippage</code></li> <li>5268 Check for the node API key when starting a strategy that uses Gateway</li> <li>5270 Allow users to pull full Gateway config by not providing key</li> <li>5272 Restrict possible values for <code>gasLevel</code> in the Ethereum Gas Station schema</li> <li>5302 Add routes for the forthcoming Uniswap-v3 connector</li> <li>5304 Fix issues related to use of LevelDB</li> <li>5335 Allow users to manage the Gateway tokens they want reported with <code>balance</code> command</li> <li>5337 Add support for <code>polygon</code> chain</li> <li>5360 The <code>gateway create</code> command now generates the necessary traderjoe.yml file</li> <li>5377 Add missing parameters to polygon to make it build</li> <li>5380 Reduce log noise when Hummingbot communicates with gateway</li> <li>5381 General improvements to gateway</li> <li>5391 Only show zero balances for gateway tokens inserted by the user</li> </ul>","title":"Gateway changes"},{"location":"release-notes/1.5.0/#bug-fixes","text":"<ul> <li>#5250 Set codec to UTF-8 when opening config files</li> <li>#5262, #5263, #5265, #5286, #5292 Fix multiple issues with the Bybit perpetual connector.</li> <li>#5293 Remove <code>_last_recv_time</code> variable from <code>binance</code> connector</li> <li>#5303 Align initial screen style with the rest of the client</li> <li>#5362 Fix quickstart style</li> <li>#5367 Fix for the bug that causes the hummingbot_quickstart.py to fail</li> <li>#5382 Fix in <code>KucoinAuth</code> when preparing the string to generate the signature.</li> <li>#5384 Fix for <code>conf_fee_overrides</code> values erased at startup</li> <li>#5386 Fix balance comparison with order amount</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/1.6.0/","text":"<p>Released on July 26, 2022</p> <ul> <li> <p>Install via Docker: Linux | Windows | macOS | Raspberry Pi</p> </li> <li> <p>Binary builds are no longer supported. Docker and Source are now the only supported methods of install.</p> </li> </ul> <p>We are very excited to ship the July 2022 Hummingbot release (v1.6.0) today!</p>","title":"Release Notes - Version 1.6.0"},{"location":"release-notes/1.6.0/#config-management-refactoring","text":"<p>In 5428, Hummingbot's configuration management system was significantly overhauled. The new approach uses <code>pydantic</code> models to define the configuration maps. Aside from built-in validation functionality, this approach also allows the automatic generation of JSON schemas which is a big first step in the direction of decoupling the bot from its interface. Another major step in that direction is significantly restricting the use of global variables when dealing with the global config map (now renamed to client config map) and the <code>AllConnectorSettings</code> class.</p> <p>The approach to storing and retrieving secure configs has also been refactored. We no longer store secure configs in the client config map (former global config map). Those are only stored in the <code>Security</code> class (which is still unfortunately accessed globally). In addition, the secure values are no longer stored separate from non-secure configs \u2014 they are both part of the same config map and stored in the same <code>yaml</code> file.</p> <p>When returning users log in to version 1.6.0, they will be prompted to enter their password to migrate their old configurations to the new configuration schema. If the configuration is successful, users will see the screen below\"</p> <p></p>  <p>Warning</p> <p>As this new version will automatically migrate any old configuration files due to the config management refactoring, we strongly advise users to create a backup of the config files first prior to updating the bots to 1.6.0. The migration process may also take some time or may encounter issues so it's advisable to implement the update at a more convenient period. Lastly, make sure to remove any existing scripts you have and download instead the latest helper scripts (<code>create.sh</code>, <code>update.sh</code>) from our installation page.</p>","title":"Config Management Refactoring"},{"location":"release-notes/1.6.0/#new-gateway-dex-connector-uniswaplp","text":"<p>We are excited to re-introduce a connector for Uniswap that supports the Uniswap V3 AI, enabling users to add and remove concentrated liquidity ranges.</p> <p>See the Uniswap documentation for more information.</p>","title":"New Gateway DEX Connector: UniswapLP"},{"location":"release-notes/1.6.0/#restored-strategy-uniswap-v3-lp","text":"<p>Because Gateway now supports the UniswapLP connector, we have restored the Uniswap V3 LP strategy that allows users to create a bot that adds concentrated liquidity ranges and dynamically adjusts them given flucutations in market price and volatility.</p> <p>See the <code>uniswap-lp-v3</code> documentation for more information.</p>","title":"Restored Strategy: Uniswap-V3 LP"},{"location":"release-notes/1.6.0/#new-gateway-dex-connector-quickswap","text":"<p>Quickswap is the leading AMM DEX on the Polygon Network.</p> <p>See the <code>quickswap</code> documentation for more information.</p>","title":"New Gateway DEX Connector: Quickswap"},{"location":"release-notes/1.6.0/#new-spot-and-perpetual-exchange-connectors-bitmex","text":"<p>Bitmex is a cryptocurrency exchange and derivative trading platform. It is owned and operated by HDR Global Trading Limited, which is registered in the Seychelles.</p> <p>See the <code>bitmex</code> and <code>bitmex_perpetual</code> documentation pages for more information.</p>","title":"New Spot and Perpetual Exchange Connectors: Bitmex"},{"location":"release-notes/1.6.0/#new-spot-exchange-connector-latoken","text":"<p>Latoken is a rapidly growing crypto exchange focusing on liquidity for new tokens.</p> <p>See the <code>latoken</code> documentation for more information.</p>","title":"New Spot Exchange Connector: Latoken"},{"location":"release-notes/1.6.0/#developer-updates","text":"","title":"Developer Updates"},{"location":"release-notes/1.6.0/#hummingbot-changes","text":"<ul> <li>5428: Refactor configuration management to use a pydantic approach</li> <li>5515: Fixes to Fixed Grid strategy exchange validation due to pydantic configuration changes</li> </ul>","title":"Hummingbot changes"},{"location":"release-notes/1.6.0/#gateway-changes","text":"<ul> <li>5388 Added the <code>Uniswap LP</code> client connector and a \"basic\" <code>Uniswap v3 LP</code> strategy.</li> <li>5426 Prevent Gateway respawn on exit code 2</li> <li>5427 Added routes for <code>Perp Curie</code></li> <li>5482 Added <code>gasLimitTransaction</code> and <code>gasLimitEstimate</code></li> </ul>","title":"Gateway changes"},{"location":"release-notes/1.6.0/#bug-fixes","text":"<ul> <li>5254 Fixed \"AttributeError: module <code>os</code> has no attribute <code>uname</code>\" Thanks to manhhailua for this fix! \ud83d\ude4f</li> <li>5329 Marked stopped telegram listener as not started Thanks to ctria for this fix! \ud83d\ude4f</li> <li>5382 Fixed <code>Kucoin</code> issue when retrieving trading fees for multiple pairs</li> <li>5400 Refactor <code>Bitmart</code> connector to the latest connector standards</li> <li>5421 Fixed bug of async call in status command from Cython Thanks to klpanagi for this fix! \ud83d\ude4f</li> <li>5429 Fixed <code>Huobi</code> update event bug</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/1.7.0/","text":"<p>Released on August 31, 2022</p> <ul> <li>Install via Docker: Linux | Windows | macOS | Raspberry Pi</li> </ul> <p>We are very excited to ship the August 2022 Hummingbot release (v1.7.0) today!</p>","title":"Release Notes - Version 1.7.0"},{"location":"release-notes/1.7.0/#new-exchange-certification-program","text":"<p>We introduce a new program that certifies certain exchanges in the Hummingbot codebase, selected via a Snapshot vote by the Hummingbot community. This allows the Foundation to support these exchange connectors better via bug bounties and improvement bounties, as well as partner with these exchanges to promote usage of their connectors.</p>","title":"New Exchange Certification Program"},{"location":"release-notes/1.7.0/#upgraded-ftx-and-bybit-perpetual-connectors","text":"<p>We are proud to announce significant upgrades to the <code>ftx</code> and <code>bybit_perpetual</code> connectors:</p> <ul> <li>5508 Refactor <code>Bybit Perpetual</code> connector to the latest standards</li> <li>5569 Refactor <code>FTX</code> spot connector to the latest standards</li> </ul>","title":"Upgraded FTX and ByBit Perpetual connectors"},{"location":"release-notes/1.7.0/#new-gateway-dex-connector-perpetual-protocol","text":"<p>We are excited to re-introduce support for Perpetual Protocol, an on-chain perpetual futures DEX with deep liquidity and builder-ready composability.</p> <ul> <li>5520 Added perpetual generic connector for Gateway</li> </ul> <p>See the Perpetual Protocol documentation for more information.</p>","title":"New Gateway DEX Connector: Perpetual Protocol"},{"location":"release-notes/1.7.0/#added-cross-chain-support-for-uniswap","text":"<p>We extended support for Uniswap across to the Polygon blockchain, as well as to the Arbitrum and Optimism networks on Ethereum.</p> <ul> <li>5462 Added support for <code>Uniswap v2</code> and <code>Uniswap v3</code> on the Polygon chain</li> <li>5565 Added support for <code>arbitrum_one</code> and <code>optimism_mainnet</code> for Uniswap</li> </ul>","title":"Added cross-chain support for Uniswap"},{"location":"release-notes/1.7.0/#added-dex-support-to-cross-exchange-market-making","text":"<p>Now, the <code>cross exchange market making</code> strategy now has an option to use DEXes as taker exchanges. Now, you can hedge your filled orders on any Gateway-supported AMM!</p>","title":"Added DEX support to Cross-Exchange Market Making"},{"location":"release-notes/1.7.0/#new-script-examples","text":"<p>We have added more examples of Scripts for the upcoming Hummingbot BotCamp developer bootcamp.</p> <ul> <li>5586: Add BotCamp script examples</li> <li>5624: Improved BotCamp examples</li> </ul>","title":"New Script examples"},{"location":"release-notes/1.7.0/#new-gateway-dex-connector-openocean","text":"<p>OpenOcean is the leading DEX aggregator, integrating the most liquidity sources across a wide range of blockchains into one seamless trading interface, to bring users a one-stop trading solution!</p> <p>See the OpenOcean documentation for more information.</p>","title":"New Gateway DEX Connector: OpenOcean"},{"location":"release-notes/1.7.0/#new-gateway-dex-connector-defi-kingdoms","text":"<p>DeFi Kingdoms is a blockchain game combining the aspect of decentralized finance (DeFi) and play-to-earn on the Harmony ONE network.</p> <p>See the DeFi Kingdoms documentation for more information.</p>","title":"New Gateway DEX Connector: Defi Kingdoms"},{"location":"release-notes/1.7.0/#new-gateway-dex-connector-defira","text":"<p>Defira is a fusion of DeFi and GameFi, creating a unique blockchain metaverse.</p> <p>See the Defira documentation for more information.</p>","title":"New Gateway DEX Connector: Defira"},{"location":"release-notes/1.7.0/#developer-updates","text":"","title":"Developer Updates"},{"location":"release-notes/1.7.0/#gateway-changes","text":"<ul> <li>5621 Removed unused Gateway files in setup folder and changed default <code>nodeURL</code> providers to Ankr public endpoints where available</li> <li>Improved Gateway developer setup docs</li> <li>New Gateway testing docs</li> </ul>","title":"Gateway changes"},{"location":"release-notes/1.7.0/#bug-fixes","text":"<ul> <li>5458 Fixed issue where the rate command fails when the pair is within quotes Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5460 Fixed issue where bot fails to cancel an order due to order status not found</li> <li>5518 Fixed time synchronizer and abandoned orders issue</li> </ul>","title":"Bug Fixes"},{"location":"release-notes/1.8.0/","text":"<p>Released on September 30, 2022</p> <ul> <li>Install via Docker: Linux | Windows | macOS | Raspberry Pi</li> </ul> <p>We are very excited to ship the September 2022 Hummingbot release (v1.8.0) today!</p>","title":"Release Notes - Version 1.8.0"},{"location":"release-notes/1.8.0/#variable-tick-size","text":"<p>Previously, the default tick size (how long it takes Hummingbot to loop through a strategy iteration) was set at 1 second. Now, users can adjust this setting and define a custom <code>tick_size</code> parameter.</p> <ul> <li>5649 added <code>tick_size</code> as a variable, allowing the tick size to be changed in the <code>conf_client.yml</code> file or by running <code>config tick_size</code></li> </ul>","title":"Variable Tick Size"},{"location":"release-notes/1.8.0/#new-connector-serum","text":"<p>Project Serum is a Solana-based decentralized liquidity infrastructure protocol that brings a fully functional centralized exchange experience \u2013 full central limit order books, matching engine, fast settlement and trading, and low transaction costs \u2013 to the DeFi marketplace at scale.</p> <p>See the <code>Serum</code> documentation for more information, as well as this forum thread for future plans for this connector.</p> <p>Thanks to MHHukiewitz and Danilo-Araujo-Silva for this fix! \ud83d\ude4f</p>","title":"New Connector: Serum"},{"location":"release-notes/1.8.0/#new-community-tool-hummingbot-postprocess","text":"<p>A companion tool that helps you visualise and analyse performance of Hummingbot trade logs.</p> <p>Thanks to rkc2000 for this fix! \ud83d\ude4f</p> <p>https://github.com/hummingbot/community-tools</p>","title":"New Community Tool: Hummingbot Postprocess"},{"location":"release-notes/1.8.0/#all-changes","text":"","title":"All Changes"},{"location":"release-notes/1.8.0/#developer-updates","text":"<ul> <li>5561 Refactored the Rate Oracle to extract the source-specific logic into separate components</li> </ul>","title":"Developer updates"},{"location":"release-notes/1.8.0/#gateway-updates","text":"<ul> <li>5441 Addition of interfaces for future DEXes utilizing central limit order books (CLOBs)</li> <li>5741 Fixed issue where Gateway fails to connect to Uniswap LP Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5652 Updated broken Ethereum token list</li> <li>5645 Fixed issue with Gateway restart</li> <li>5637 Fixed \"_\" to \"-\" URL typo in Gateway readme doc Thanks to han-qiu for this fix! \ud83d\ude4f</li> <li>5636 Fixed Gateway issue where token pairs on Avalanche are doubled when checking autocomplete lists Thanks to han-qiu for this fix! \ud83d\ude4f</li> <li>5622 Changed default Gateway port from 5000 to 15888</li> </ul>","title":"Gateway updates"},{"location":"release-notes/1.8.0/#bug-fixes","text":"<ul> <li>5703 Fixed issue where client accepts a blank password on initial password setup Thanks to tomasgaudino for this fix! \ud83d\ude4f</li> <li>5690 Fixed issue with the <code>XEMM</code> strategy where autocomplete doesn't work for the taker_connector field Thanks to leastchaos for this fix! \ud83d\ude4f</li> <li>5687 Fixed HitBTC order book failure Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5686 Fixed issue where Strategy Autostart wasn't working for the <code>Avellaneda</code> and <code>XEMM</code> strategies Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5683 Fixed issue where <code>Binance Perpetual</code> gets stuck cancelling an order</li> <li>5679 Fixed issue where <code>Gate.io</code> is showing the wrong available balance</li> <li>5666 Fixed issue with <code>Huobi</code> getting \"Error listening to order book streams\" when placing orders Thanks to han-qiu for this fix! \ud83d\ude4f</li> <li>5662 Fixed issue with the <code>XEMM</code> strategy unable to select active_order_refresh</li> <li>5649 Fixed issue where the conf_client.yml file is not created when Hummingbot starts</li> <li>5635 Fixed issue with the <code>PMM Strategy</code> where values shown on Amount (Orig) was not showing Thanks to leastchaos for this fix! \ud83d\ude4f</li> <li>5630 Fixed cimport bool should be renamed to cimport bool as cppbool Thanks to lt7 for this fix! \ud83d\ude4f</li> <li>5626 Fixed issue with Bybit Perpetual order fills update using HTTP</li> <li>5616 Fixed issue with using the export trades command where skipping on filename (ctrl + x) creates a blank filename Thanks to leastchaos for this fix! \ud83d\ude4f</li> <li>5600 Updated Binance rate limits and weight Thanks to hekte for this fix! \ud83d\ude4f</li> <li>5599 Fixed issue where 'Coinbase Pro' order book fails Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5574 Fixed error \"('cannot represent an object', WindowsPath('C:/dev/hummingbot/logs')\" when writing configs on Windows Thanks to lt7 for this fix! \ud83d\ude4f</li> <li>5501 Fixed issue with the <code>Liquidity Mining</code> strategy getting \"Unexpected error while requesting data from Hummingbot API Thanks to MementoRC for this fix! \ud83d\ude4f</li> </ul>","title":"Bug fixes"},{"location":"release-notes/1.9.0/","text":"<p>Released on October 28, 2022</p> <ul> <li>Install via Docker: Linux | Windows | macOS | Raspberry Pi</li> </ul> <p>We are very excited to ship the October 2022 Hummingbot release (v1.9.0) today!</p>","title":"Release Notes - Version 1.9.0"},{"location":"release-notes/1.9.0/#new-sample-scripts-from-botcamp","text":"<p>We're excited to launch Botcamp, an intensive 4-week bootcamp that teaches you to create custom trading strategies as simple Hummingbot scripts.</p> <p>This release added script examples created by participants in the beta Botcamp cohort:</p> <ul> <li>Buy Low / Sell High Script</li> <li>Adjusted Mid Price Script</li> <li>PMM Script</li> </ul> <p>All scripts examples can be found here.</p>","title":"New Sample Scripts from Botcamp"},{"location":"release-notes/1.9.0/#new-connector-eve-exchange","text":"<p>Eve brings together all the necessary features for individuals &amp; businesses to harness the power of crypto, in a single low-cost platform \u2014 powered by EVE token.</p>","title":"New Connector: Eve Exchange"},{"location":"release-notes/1.9.0/#new-community-tool-manage-bot-cycles","text":"<p>The purpose of this folder structure and scripts is to make it easier to manage multiple bots and launch them all at once on your computer or server.</p> <p>Thanks to mlguys for this contribution! \ud83d\ude4f</p> <p>https://github.com/hummingbot/community-tools</p>","title":"New Community Tool: Manage Bot Cycles"},{"location":"release-notes/1.9.0/#all-changes","text":"","title":"All Changes"},{"location":"release-notes/1.9.0/#developer-updates","text":"<ul> <li>5708 Added broker IDs for <code>Bitmart</code> and <code>Bitmex</code></li> <li>5783 Added <code>Gate.io</code> as a Rate Oracle source Thanks to MementoRC for this fix! \ud83d\ude4f</li> </ul>","title":"Developer updates"},{"location":"release-notes/1.9.0/#gateway-updates","text":"<ul> <li>5664 Fixed the issue with quantizing amount for gateway connectors</li> <li>5729 Fixed incorrect gateway certs directory Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5759 Added <code>Goerli</code> testnet to Gateway</li> <li>5776 Fixed update install for Gateway so that patches and minor updates don't occur when users setup Gateway</li> <li>5789 Changed default tokenlist for <code>Polygon</code> mainnet</li> </ul>","title":"Gateway updates"},{"location":"release-notes/1.9.0/#bug-fixes","text":"<ul> <li>5707 Fixed issue with <code>Kucoin</code> reaching API rate limit for api/v1/fills Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5711 Fixed issue with the <code>Liquidity Mining</code> strategy raising an exception on empty order books Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5721 Fixed issue with the trading_pairs property in paper_trade</li> <li>5750 Fixed issue with <code>int object has no attribute is_nan</code> error in the history command Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5751 Fixed the \"Failed to refresh the listen key\" error message in <code>Binance Perpetuals</code> Thanks to leastchaos for this fix! \ud83d\ude4f</li> <li>5782 Fixed missing mocked API Thanks to MementoRC for this fix! \ud83d\ude4f</li> <li>5807 Fixed quantize rounding in paper_trade Thanks to peterwilli for this fix! \ud83d\ude4f</li> <li>5829 Fixed issue with <code>Bybit perpetual</code> not working because of deprecated endpoints</li> </ul>","title":"Bug fixes"},{"location":"scripts/","text":"<p>Scripts enable Hummingbot users to build customized strategies and access the full power of Hummingbot exchange connectors in a few lines of Python code. </p> <p>Introduced in version 1.4.0, Scripts offer users an easier alternative to creating a full-blown strategy. They are light Python files that can be run and modified without re-compilation, so users can <code>stop</code> a script, adjust the code, and <code>start</code> it without leaving the Hummingbot client interface. </p> <p>Unlike strategies, scripts can be created without configuration files, so only a single file is needed. However, scripts can access all the raw data, events, and methods in Hummingbot connectors, as well as other features such as the Rate Oracle.</p> <p>See Getting Started to start running scripts.</p> <p>See Examples for a list of the current sample scripts in the Hummingbot codebase. These examples show you how to:</p> <ul> <li>Place orders</li> <li>Listen to order book events</li> <li>Use the rate oracle</li> <li>Call exchange APIs</li> <li>Process the events produced by the connectors related to the orders lifecycle</li> </ul>","title":"Scripts"},{"location":"scripts/#pmm-scripts-deprecated","text":"<p>Introduced in version 0.29.0, PMM Scripts are an earlier component that allows users customize the behavior of the Pure Market Making strategy with snippets of Python code.</p> <p>Since PMM Scripts run in a separate process, they have limited access to variables and events in the main Hummingbot process. For this reason, Hummingbot Foundation advises the community to contribute to the generalized Scripts module rather than PMM Scripts going forward.</p> <ul> <li>Getting Started with PMM Scripts</li> <li>\ud83d\udcc1 PMM Script Examples</li> </ul>","title":"PMM Scripts (deprecated)"},{"location":"scripts/#videos-and-guides","text":"<p> Scripts Demo | How to build custom trading scripts with Hummingbot</p>","title":"\ud83d\udcfa Videos and Guides"},{"location":"scripts/examples/","text":"<p>See the following examples located in the <code>/scripts</code> folder for how to:</p> <ul> <li>Place orders</li> <li>Listen to order book events</li> <li>Use the rate oracle</li> <li>Call exchange APIs</li> <li>Process the events produced by the connectors related to the orders lifecycle</li> </ul>","title":"Script Examples"},{"location":"scripts/examples/#adjusted_mid_price","text":"<p>Code: https://github.com/hummingbot/hummingbot/blob/master/scripts/adjusted_mid_price.py</p> <p>Author: https://github.com/cmichaeltimmons</p> <p>Description: This is an example of a pure market making strategy with an adjusted mid price.  The mid price is adjusted to the midpoint of a hypothetical buy and sell of a user defined {test_volume}.</p>","title":"<code>adjusted_mid_price</code>"},{"location":"scripts/examples/#buy_dip_example","text":"<p>Code: https://github.com/hummingbot/hummingbot/blob/development/scripts/buy_dip_example.py </p> <p>Author: https://github.com/aarmoa</p> <p>Description: This script buys ETH (with BTC) when the ETH-BTC drops 5% below 50 days moving average (of a previous candle). It demonstrates:</p> <ul> <li>How to call Binance REST API for candle stick data</li> <li>How to incorporate external pricing source (Coingecko) into the strategy</li> <li>How to listen to order filled event</li> <li>How to structure order execution on a more complex strategy</li> </ul>","title":"<code>buy_dip_example</code>"},{"location":"scripts/examples/#buy_low_sell_high","text":"<p>Code: https://github.com/hummingbot/hummingbot/blob/master/scripts/buy_low_sell_high.py </p> <p>Author: https://github.com/Alkhalifah-blockchain</p> <p>Description: N/A</p>","title":"<code>buy_low_sell_high</code>"},{"location":"scripts/examples/#buy_only_three_times_example","text":"<p>Code: https://github.com/hummingbot/hummingbot/blob/master/scripts/buy_only_three_times_example.py</p> <p>Author: https://github.com/cardosofede</p> <p>Description: This example places shows how to add a logic to only place three buy orders in the market, and uses an event to increase the counter and stop the strategy once the task is done.</p>","title":"<code>buy_only_three_times_example</code>"},{"location":"scripts/examples/#dca_example","text":"<p>Code: https://github.com/hummingbot/hummingbot/blob/development/scripts/dca_example.py </p> <p>Author: https://github.com/cardosofede</p> <p>Description: This script shows how to set up a simple strategy to buy a token on fixed (dollar) amount on a regular basis.</p>","title":"<code>dca_example</code>"},{"location":"scripts/examples/#format_status_example","text":"<p>Code: https://github.com/hummingbot/hummingbot/blob/master/scripts/format_status_example.py </p> <p>Author: https://github.com/cardosofede</p> <p>Description: This script shows how to add a custom format_status to a strategy and query the order book, and run the command <code>status --live</code>, once the strategy starts.</p>","title":"<code>format_status_example</code>"},{"location":"scripts/examples/#log_price_example","text":"<p>Code: https://github.com/hummingbot/hummingbot/blob/master/scripts/log_price_example.py </p> <p>Author: https://github.com/cardosofede</p> <p>Description:  This script shows how to get the ask and bid of a market and log it to the console.</p>","title":"<code>log_price_example</code>"},{"location":"scripts/examples/#simple_pmm_example","text":"<p>Code: https://github.com/hummingbot/hummingbot/blob/master/scripts/simple_pmm_example.py</p> <p>Author: https://github.com/cardosofede</p> <p>Description: This script implements a simple version of Hummingbot\u2019s flagship pure market making strategy that will be useful as a baseline that lets other users build their own features on top of it.</p>","title":"<code>simple_pmm_example</code>"},{"location":"scripts/examples/#simple_rsi_example","text":"<p>Code: https://github.com/hummingbot/hummingbot/blob/master/scripts/simple_rsi_example.py</p> <p>Author: https://github.com/cardosofede</p> <p>Description: The script shows how to automate buys upon an overbought RSI signal and sell orders upon an oversold RSI signal.</p>","title":"<code>simple_rsi_example</code>"},{"location":"scripts/examples/#simple_vwap_example","text":"<p>Code: https://github.com/hummingbot/hummingbot/blob/master/scripts/simple_vwap_example.py</p> <p>Author: https://github.com/cardosofede</p> <p>Description: This example lets you create one VWAP in a market using a percentage of the sum volume of the order book until a spread from the mid price.</p> <p>This example demonstrates:</p> <ul> <li>How to get the account balance</li> <li>How to get the bids and asks of a market</li> <li>How to code a \"utility\" strategy</li> </ul>","title":"<code>simple_vwap_example</code>"},{"location":"scripts/examples/#simple_xemm_example","text":"<p>Code: https://github.com/hummingbot/hummingbot/blob/master/scripts/simple_xemm_example.py</p> <p>Author: https://github.com/mifeng</p> <p>Description: A simplified version of the cross-exchange market making strategy, this bot makes a market on the maker pair and hedges any filled trades in the taker pair. If the spread (difference between maker order price and taker hedge price) dips below min_spread, the bot refreshes the order.</p>","title":"<code>simple_xemm_example</code>"},{"location":"scripts/examples/#triangular_arbitrage","text":"<p>Code: https://github.com/hummingbot/hummingbot/blob/master/scripts/triangular_arbitrage.py</p> <p>Author: https://github.com/supervik</p> <p>Description: This script executes arbitrage trades on 3 markets of the same exchange when a price discrepancy among those markets found.</p>","title":"<code>triangular_arbitrage</code>"},{"location":"scripts/getting-started/","text":"<p>Scripts make it easier for Hummingbot users to prototype new strategies focusing only on the functionality and forgetting about configuration files and compilation</p> <p>Since scripts are in Python, you can modify the script's code and re-run it to apply the changes without exiting the Hummingbot interface or re-compiling the code.</p> <p>Scripts do not require configuration files, so the <code>create</code> and <code>import</code> commands do not apply when using them.</p>","title":"Getting Started"},{"location":"scripts/getting-started/#adding-scripts","text":"<p>All script examples are located in the <code>/scripts</code> folder. If you save your scripts there, they will be accessible from Hummingbot.</p>","title":"Adding scripts"},{"location":"scripts/getting-started/#running-a-script","text":"<p>From the Hummingbot client interface, enter <code>start --script [filename]</code> to start a script. </p> <p>Run <code>stop</code> to stop a script.</p>","title":"Running a script"},{"location":"scripts/getting-started/#creating-your-first-script","text":"<p>Let's get started with a \"Hello World\" example of a script:</p>","title":"Creating your first script"},{"location":"scripts/getting-started/#1-create-file","text":"<p>Create a new Python file <code>script1.py</code> in the <code>/scripts</code> folder. From the root Hummingbot directory, run: <pre><code>touch scripts/script1.py\n</code></pre></p> <p>Open the file in a text editor like Visual Studio Code, add the following code to it, and save the file:</p> <pre><code>from hummingbot.strategy.script_strategy_base import ScriptStrategyBase\nclass Script1(ScriptStrategyBase):\n\n  # It is best to first use a paper trade exchange connector \n  # while coding your strategy, once you are happy with it\n  # then switch to real one.\n\n  markets = {\"binance_paper_trade\": {\"BTC-USDT\"}}\n</code></pre>","title":"1. Create file"},{"location":"scripts/getting-started/#2-start-and-stop-script","text":"<p>Start the Hummingbot client, and run the command: <code>start --script script1.py</code></p> <p>At this point, you should see Hummingbot loading up a connector (<code>binance_paper_trade</code>) and an order book (BTC-USDT) for your script, as well messages in the log pane about your script running.</p> <p></p> <p>Run the <code>status</code> command to see the current status of your running script:</p> <p></p> <p>Stop the script by running the <code>stop</code> command.</p>","title":"2. Start and stop script"},{"location":"scripts/getting-started/#3-emit-log-messages","text":"<p>Now, lets log the Bitcoin price every tick by adding the <code>on_tick</code> function to our <code>Script1</code> class. Add the following function to the <code>Script1</code> base class in the file above, and save the file:</p> <pre><code>def on_tick(self):\n        price = self.connectors[\"binance_paper_trade\"].get_mid_price(\"BTC-USDT\")\n        msg = f\"Bitcoin price: ${price}\"\n        self.logger().info(msg)\n        self.notify_hb_app_with_timestamp(msg)\n</code></pre> <p>Restart the script with <code>start --script script1.py</code>. You should see log messages appearing in the left pane:</p> <p></p> <p>Here is what is happening:</p> <ul> <li><code>on_tick</code> runs for every tick the bot internal clock executes (by default a new tick is generated every 1 second).</li> <li><code>self.logger().info(msg)</code> logs the message to your Hummingbot app log panel and to <code>logs/log_script1.log</code> file</li> <li><code>self.notify_hb_app_with_timestamp(msg)</code> sends the message to your output panel (top left). If you have set up Telegram bot integration, you will get the message on your Telegram chat as well.</li> </ul>","title":"3. Emit log messages"},{"location":"scripts/getting-started/#notes-tips","text":"<ul> <li>You can define multiple connectors and multiple order books, e.g.</li> </ul> <pre><code>markets = { \"binance_paper_trade\": {\"BTC-USDT\", \"ETH-USDT\"}, \n            \"kucoin\": {\"LUNA-USDT\"}\n          }\n</code></pre> <ul> <li>You will see a sqlite database (<code>/data/script1.sqlite</code>) and a log file (<code>/logs/log_script1.log</code>) created for your script</li> <li>Your script is loaded up at runtime, so you don\u2019t have to exit Hummingbot while you are updating your script code. You will just need to <code>stop</code> (to stop the current execution) and start it again with the command <code>start --script script.py</code> again.</li> <li>If you want to use a real connector instead of a paper trade one, first you need to configure it using the <code>connect</code> command and provide all the required API credentials</li> <li>Use arrow up key in the client to cycle through the list of previous commands</li> <li>Use DBeaver or another free database management tool) to open the sqlite database to see what the data that Hummingbot stores for you</li> </ul>","title":"Notes &amp; Tips"},{"location":"scripts/getting-started/#debugging-scripts-with-pycharm","text":"<p>Watch this video to learn how you can debug Scripts at runtime with the PyCharm IDE:</p> <p> Script Debugging with PyCharm</p>","title":"Debugging scripts with PyCharm"},{"location":"scripts/pmm-scripts/","text":"<p>Snippets of Python code that let users customize the Pure Market Making strategy.</p>  <p>Warning</p> <p>PMM Scripts were an early experiment to let users customize Hummingbot, but it can only be used with the PMM strategy. In the 1.4.0 release, we introduced a generalized form of Scripts</p>","title":"PMM Scripts (DEPRECATED)"},{"location":"scripts/pmm-scripts/#how-it-works","text":"<p>After configured, the PMMScript will start automatically once the Pure Market Making strategy starts and stops when the strategy stops. A PMMScript is run on a new dedicated process, in case where the script fails or has a bug, your main Hummingbot application can still function.</p>","title":"How it works"},{"location":"scripts/pmm-scripts/#create-your-own-pmmscript","text":"<ol> <li>Create a new script file, you can see examples in the Examples section below, and save it into the <code>/pmm_scripts</code> folder</li> <li> <p>Configure your Hummingbot</p> <ul> <li>Inside Hummingbot run command <code>config pmm_script_mode</code> and/or <code>config pmm_script_mode.pmm_script_file_path</code>.</li> <li> <p>Editing the <code>conf_client.yml</code> file located inside the <code>hummingbot_conf</code> folder using a text editor.</p> <pre><code>pmm_script_enabled: true\npmm_script_file_path: spreads_adjusted_on_volatility_script.py\n</code></pre> </li> </ul> </li> <li> <p>Start running a strategy</p> </li> </ol>  <p>Note</p> <p>In past versions of Hummingbot (1.5.0 and below), the <code>conf_client.yml</code> file is named <code>conf_global.yml</code></p>","title":"Create your own PMMScript"},{"location":"scripts/pmm-scripts/#examples","text":"<p>The following examples can be found in the <code>/pmm_scripts</code> folder:</p>","title":"Examples"},{"location":"scripts/pmm-scripts/#hello_world_scriptpy","text":"<p>The most basic example only a few lines of code.</p>","title":"hello_world_script.py"},{"location":"scripts/pmm-scripts/#ping_pong_scriptpy","text":"<p>Replicates our current ping pong strategy using script.</p>","title":"ping_pong_script.py"},{"location":"scripts/pmm-scripts/#price_band_scriptpy","text":"<p>Replicates our current price band strategy using script.</p>","title":"price_band_script.py"},{"location":"scripts/pmm-scripts/#dynamic_price_band_scriptpy","text":"<p>Demonstrates how to set the band around mid price moving average, the band moves as the average moves.</p>","title":"dynamic_price_band_script.py"},{"location":"scripts/pmm-scripts/#spreads_adjusted_on_volatility_scriptpy","text":"<p>Demonstrates how to adjust bid and ask spreads dynamically based on price volatility.</p>","title":"spreads_adjusted_on_volatility_script.py"},{"location":"scripts/pmm-scripts/#script_templatepy","text":"<p>Provides you a base template to start using the scripts functions.</p>","title":"script_template.py"},{"location":"scripts/pmm-scripts/#pmmscriptbase-class","text":"<p><code>PMMScriptBase</code> is the base class for PMM Scripts.</p> <p>At every tick, the script gets current market price (<code>mid_price</code>), strategy configuration (<code>pmm_parameters</code>) and total balances (<code>all_total_balances</code>). The <code>mid_price</code> is stored in a list (<code>mid_prices</code>) where a new <code>mid_price</code> is added to the end of the list, whereas strategy configuration and total balances are replaced every time.</p>","title":"PMMScriptBase class"},{"location":"scripts/pmm-scripts/#pmm_parameters","text":"<p>To set a pure market making strategy parameter to a new value, simply assign a new value to it.</p> <p>Usage Example: <code>self.pmm_parameters.bid_spread = Decimal(\"0.03\")</code> - to update bid spread to 3%</p> <p>These below are configurable parameters:</p> <ul> <li>buy_levels (a number of buy orders to place, initially set to <code>order_levels</code> when the strategy starts)</li> <li>sell_levels (a number of sell orders to place, initially set to <code>order_levels</code> when the strategy starts)</li> <li>order_levels</li> <li>bid_spread</li> <li>ask_spread</li> <li>order_amount</li> <li>order_level_spread</li> <li>order_level_amount</li> <li>order_refresh_time</li> <li>order_refresh_tolerance_pct</li> <li>filled_order_delay</li> <li>hanging_orders_enabled</li> <li>hanging_orders_cancel_pct</li> </ul>","title":"pmm_parameters"},{"location":"scripts/pmm-scripts/#events","text":"","title":"Events"},{"location":"scripts/pmm-scripts/#on_tick","text":"<p>The code here will be executed on every tick which is every second on a default Hummingbot configuration.</p>","title":"<code>on_tick</code>"},{"location":"scripts/pmm-scripts/#on_buy_order_completed","text":"<p>The script will be notified every time a buy order of yours is fully filled. Put in your code logic here to handle such   situation if needed.</p>","title":"<code>on_buy_order_completed</code>"},{"location":"scripts/pmm-scripts/#on_sell_order_completed","text":"<p>The script will be notified every time a sell order of yours is fully filled. Put in your code logic here to handle such   situation if needed.</p>","title":"<code>on_sell_order_completed</code>"},{"location":"scripts/pmm-scripts/#on_status","text":"<p>This is called upon <code>status</code> command issued on the Hummingbot application. You can provide your custom status message   here.</p>","title":"<code>on_status</code>"},{"location":"scripts/pmm-scripts/#functions","text":"","title":"Functions"},{"location":"scripts/pmm-scripts/#notify","text":"<p>Notifies the user, the message will appear on top left panel of HB application.   If Telegram integration enabled, the message will also be sent to the telegram user.</p> <p>Usage Example: <code>self.notify(\"Hello world\")</code></p>","title":"<code>notify</code>"},{"location":"scripts/pmm-scripts/#log","text":"<p>Logs message to the strategy log file and display it on Running Logs section of HB.</p> <p>Usage Example: <code>self.log(\"Hello world\")</code></p>","title":"<code>log</code>"},{"location":"scripts/pmm-scripts/#avg_mid_price","text":"<p>Calculates average (mean) of the stored mid prices.</p> <p>Usage Example: <code>avg_value = self.avg_mid_price(60, 30)</code> - to calculate average mid price at a minute interval for the   last 30 minutes</p>","title":"<code>avg_mid_price</code>"},{"location":"scripts/pmm-scripts/#avg_price_volatility","text":"<p>Calculates average (mean) price volatility, volatility is a price change compared to the previous cycle regardless of   its direction, e.g. if price changes -3% (or 3%), the volatility is 3%.</p> <p>Usage Example: <code>avg_value = self.avg_price_volatility(60, 30)</code> - to calculate average price volatility at a minute   interval for the last 30 minutes</p>","title":"<code>avg_price_volatility</code>"},{"location":"scripts/pmm-scripts/#median_price_volatility","text":"<p>Calculates median (middle value) price volatility.</p> <p>Usage Example: <code>median_value = self.median_price_volatility(60, 30)</code> - to calculate median price volatility at   a minute interval for the last 30 minutes</p>","title":"<code>median_price_volatility</code>"},{"location":"scripts/pmm-scripts/#locate_central_price_volatility","text":"<p>Calculates central located price volatility based on a given mean function. The mean function can be one   that is supported by <code>statistics</code> library e.g. mean, median, geometric_mean and many more.</p> <p>Usage Example: <code>median_value = self.locate_central_price_volatility(60, 30, median)</code> - to calculate median price   volatility at a minute interval for the last 30 minutes</p>","title":"<code>locate_central_price_volatility</code>"},{"location":"scripts/pmm-scripts/#round_by_step","text":"<p>Rounds a given number down by a given step size.</p> <p>Usage Example: <code>rounded_value = self.round_by_step(1.8, 0.25)</code> will give you 1.75</p>","title":"<code>round_by_step</code>"},{"location":"scripts/pmm-scripts/#take_samples","text":"<p>Takes samples out of a given list where the last item is the most recent.   Example List <code>a_list = [1, 2, 3, 4, 5, 6, 7]</code></p> <p>Usage Example: <code>samples = self.take_samples(a_list, 3, 2)</code> will give you <code>[4, 7]</code></p>","title":"<code>take_samples</code>"},{"location":"strategies/","text":"<p>A Strategy is a template for an algorithmic trading strategy that users can configure, extend, and run. The trading strategy itself is a continual process that monitors trading pairs on one or more exchanges in order to make trading decisions.</p> <p>Strategies separate trading logic, open source code that defines how the strategy behaves, versus parameters, user-defined variables like spread and order amount that control how the strategy is deployed against live market conditions. Strategy parameters are stored in a local config file that is not exposed externally.</p> <p>Strategies utilize the standardized trading interfaces exposed by exchange and protocol connectors, enabling developers to write code that can be used across many exchanges. Each Hummingbot strategy is a sub-folder in the <code>/hummingbot/strategy</code> folder.</p>","title":"Strategies"},{"location":"strategies/#strategy-tiers","text":"<p>Quarterly Polls allow the Hummingbot community to vote using HBOT tokens to decide which strategies in the codebase should be core strategies maintained by the Foundation:</p>","title":"Strategy Tiers"},{"location":"strategies/#core","text":"<p></p> <p>Core strategies are maintained and continually improved by Hummingbot Foundation. Foundation staff focuses on testing these strategies and rewards users who answer questions related to these strategies on Discord.</p>    Strategy Maintainer Description     pure_market_making Hummingbot Foundation Our original single-pair market making strategy   cross_exchange_market_making Hummingbot Foundation Provide liquidity while hedging filled orders on another exchange   amm_arb Hummingbot Foundation Exploits price differences between AMM and spot exchanges","title":"Core"},{"location":"strategies/#community","text":"<p></p> <p>Community strategies have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>    Strategy Maintainer Description     avellaneda_market_making None Single-pair market making strategy based on the classic Avellaneda-Stoikov paper   aroon_oscillator None Modified version of Pure Market Making that uses Aroon technical indicator   cross_exchange_mining bsmeaton Community-maintained mod of Cross Exchange Market Making strategy   hedge leastchaos Hedges spot exchange inventory risk using perpetual swaps   liquidity_mining None Provide liquidity on multiple pairs using a single base or quote token   perpetual_market_making None Market-making strategy for perpetual swap markets   spot_perpetual_arbitrage None Exploits price differences between spot and perpetual swap exchanges   twap None Places a batch of limit orders over a period of time","title":"Community"},{"location":"strategies/#strategy-maintenance","text":"<p>Strategies may have a maintainer who is responsible for ongoing maintenance: fixing bugs, addressing user issues, and keeping up with Hummingbot codebase updates. Specifically, maintainer responsibilities include:</p> <ul> <li>Addressing user Github issues and pull requests related to the strategy</li> <li>Keeping the strategy updated for changes to the connector changes for each exchange type supported by the strategy</li> <li>Keeping the strategy's documentation page updated</li> </ul>","title":"Strategy Maintenance"},{"location":"strategies/#contributing-strategies","text":"<p>We encourage users to create and extend Strategy templates for their own purposes, and if they so desire, share them with the community.</p> <p>Developers may submit strategies for review. Please note the Contribution Guidelines. For developers interested to create or customize their own strategies, please see Strategies in the Developers section.</p>","title":"Contributing Strategies"},{"location":"strategies/#more-resources","text":"<ul> <li> What is Market Making? Interview with Hummingbot CEO Michael Feng</li> <li> HBOT 101 : What Is Market Making?</li> <li> Beginner\u2019s Top misconceptions on market making</li> <li> Trader Sharing: Pure Market Making with cgambit</li> <li> How to Spot Market Making and Arbitrage opportunities?</li> <li> Strategy coding for dummies: This article is a blog post submission from our of our users. It is not directly related to TWAP strategy, but it demos how you can write a custom script for cross exchange market making strategy</li> <li> Create a Custom Strategy | Hummingbot Live: Learn about creating custom strategies with Paulo. Hummingbot lets you customize your strategies by configuring your bots to optimize its maximum potential in liquidity providing.</li> </ul>","title":"More Resources"},{"location":"strategies/amm-arbitrage/","text":"","title":"<code>amm_arb</code>"},{"location":"strategies/amm-arbitrage/#strategy-info","text":"<ul> <li>Folder: /hummingbot/strategy/amm_arb</li> <li>Configs: /hummingbot/strategy/amm_arb/amm_arb_config_map.py</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Strategy Info"},{"location":"strategies/amm-arbitrage/#strategy-tier","text":"<p></p> <p>Core strategies are maintained and continually improved by Hummingbot Foundation. Foundation staff focuses on testing these strategies and rewards users who answer questions related to these strategies on Discord.</p>","title":"\ud83c\udfc6 Strategy Tier"},{"location":"strategies/amm-arbitrage/#summary","text":"<p>This strategy monitors prices between a trading pair (<code>market_1</code>) on a SPOT AMM DEX versus another trading pair (<code>market_2</code>) on another SPOT AMM CEX or SPOT CLOB DEX in order to identify arbitrage opportunities. It executes offsetting buy and sell orders in both markets in order to capture arbitrage opportunities with profitability higher than <code>min_profitability</code>, net of transaction costs, which include both blockchain transaction fees (gas) and exchange fees.</p>","title":"\ud83d\udcdd Summary"},{"location":"strategies/amm-arbitrage/#supported-exchange-types","text":"<ul> <li>SPOT CLOB CEX</li> <li>SPOT AMM DEX</li> </ul>","title":"\ud83c\udfe6 Supported Exchange Types"},{"location":"strategies/amm-arbitrage/#strategy-configs","text":"Parameter Type Default Prompt     <code>connector_1</code> string  Enter your first spot connector (Exchange/AMM)   <code>market_1</code> string  Enter the token trading pair you would like to trade on [connector_1]   <code>connector_2</code> string  Enter your second spot connector (Exchange/AMM)   <code>market_2</code> string  Enter the token trading pair you would like to trade on [connector_2]   <code>order_amount</code> decimal  What is the amount of [base_asset] per order?   <code>min_profitability</code> decimal 1 What is the minimum profitability for you to make a trade?   <code>market_1_slippage_buffer</code> decimal 1 How much buffer do you want to add to the price to account for slippage for orders on the first market   <code>market_2_slippage_buffer</code> decimal 0 How much buffer do you want to add to the price to account for slippage for orders on the second market   <code>concurrent_orders_submission</code> bool False Do you want to submit both arb orders concurrently (Yes/No) ? If No, the bot will wait for first connector order filled before submitting the other order   <code>debug_price_shim</code> bool  Do you want to enable the debug price shim for integration tests? If you don't know what it does you should keep it disabled.   <code>gateway_transaction_cancel_interval</code> int 600 After what time should blockchain transactions be cancelled if they are not included in a block? (this only affects decentralized exchanges) (Enter time in seconds) &gt;&gt;&gt;","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/amm-arbitrage/#description","text":"<p>See Trading logic to understand how the strategy works.</p>","title":"\ud83d\udcd3 Description"},{"location":"strategies/amm-arbitrage/#i-more-resources","text":"<p> How to arbitrage AMMs like Uniswap and Balancer: Learn how you can Arbitrage AMMs with our strategy</p> <p> Quickstart Guide for amm_arb (deprecated): This guide will walk you through the installation and launch of the new <code>amm_arb</code> strategy</p>","title":"\u2139\ufe0f More Resources"},{"location":"strategies/aroon-oscillator/","text":"","title":"<code>aroon_oscillator</code>"},{"location":"strategies/aroon-oscillator/#strategy-info","text":"<ul> <li>Folder: /hummingbot/strategy/aroon_oscillator</li> <li>Configs: aroon_oscillator_config_map.py</li> <li>Maintainer: None</li> </ul>","title":"\ud83d\udcc1 Strategy Info"},{"location":"strategies/aroon-oscillator/#strategy-tier","text":"<p></p> <p>Community strategies have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Strategy Tier"},{"location":"strategies/aroon-oscillator/#summary","text":"<p>This strategy is a modified version of the Pure Market Making strategy that uses the Aroon technical indicator to adjust order spreads based on the uptrend or downtrend signified by the indicator.</p> <p>This strategy was the winning submission in the Hummingbot track of the Open DeFi hackathon.</p>","title":"\ud83d\udcdd Summary"},{"location":"strategies/aroon-oscillator/#exchanges-supported","text":"<ul> <li>SPOT CLOB CEX</li> </ul>","title":"\ud83c\udfe6 Exchanges supported"},{"location":"strategies/aroon-oscillator/#strategy-configs","text":"Parameter Type Default Prompt New? Prompt     <code>exchange</code> string  True Enter your maker spot connector   <code>market</code> string  True Enter the token trading pair you would like to trade on [exchange]   <code>minimum_spread</code> decimal  True What is the closest to the mid price should the bot automatically create orders for?   <code>maximum_spread</code> decimal  True What is the farthest away from the mid price do you want the bot automatically create orders for?   <code>period_length</code> int 25 True How many time periods will be used to calculate the Aroon Oscillator? This indicator typically uses a timeframe of 25 periods however the timeframe is subjective. Use more periods to get fewer waves and smoother trend indicator. Use fewer periods to generate more waves and quicker turnarounds in the trend indicator.   <code>period_duration</code> int 60 True How long in seconds are the Periods in the Aroon Oscillator?   <code>minimum_periods</code> int 1 True How long in seconds are the Periods in the Aroon Oscillator?   <code>aroon_osc_strength_factor</code> decimal 0.5 True How strong will the Aroon Osc value affect the spread adjustement? A strong trend indicator (when Aroon Osc is close to -100 or 100) will increase the trend side spread, and decrease the opposite side spread. Values below 1 will decrease its affect, increasing trade likelihood, but decrease risk.   <code>order_refresh_time</code> float  True How often do you want to cancel and replace bids and asks (in seconds)?   <code>order_amount</code> decimal  True What is the amount of [base_asset] per order?   <code>max_order_age</code> float 1800 False How often do you want to cancel and replace bids and asks with the same price (in seconds)?   <code>order_refresh_tolerance_pct</code> decimal 0 False Enter the percent change in price needed to refresh orders at each cycle   <code>cancel_order_spread_threshold</code> decimal 0 False Enter the percent change in price needed to refresh orders at each cycle   <code>price_ceiling</code> decimal -1 False Enter the price point above which only sell orders will be placed   <code>price_floor</code> decimal -1 False Enter the price below which only buy orders will be placed   <code>order_levels</code> int 1 False How many orders do you want to place on both sides?   <code>order_level_amount</code> decimal 0 False How much do you want to increase or decrease the order size for each additional order?   <code>order_level_spread</code> decimal 0 False Enter the price increments (as percentage) for subsequent orders?   <code>inventory_skew_enabled</code> bool False False Would you like to enable inventory skew?   <code>inventory_target_base_pct</code> decimal 50 False What is your target base asset percentage?   <code>inventory_range_multiplier</code> decimal 50 False What is your tolerable range of inventory around the target, expressed in multiples of your total order size?   <code>inventory_price</code> decimal 1 False What is the price of your base inventory?   <code>filled_order_delay</code> decimal 60 False How long do you want to wait before placing the next order if your order gets filled (in seconds)?   <code>hanging_orders_enabled</code> bool False False Do you want to enable hanging orders?   <code>hanging_orders_cancel_pct</code> decimal 10 False At what spread percentage (from mid price) will hanging orders be canceled?   <code>order_optimization_enabled</code> bool False False Do you want to enable best bid ask jumping?   <code>ask_order_optimization_depth</code> decimal 0 False How deep do you want to go into the order book for calculating the top ask, ignoring dust orders on the top (expressed in base asset amount)?   <code>bid_order_optimization_depth</code> decimal 0 False How deep do you want to go into the order book for calculating the top bid, ignoring dust orders on the top (expressed in base asset amount)?   <code>add_transaction_costs</code> bool False False Do you want to add transaction costs automatically to order prices?   <code>price_type</code> decimal 1 False Which price type to use (mid_price/last_price/last_own_trade_price/best_bid/best_ask/inventory_cost)   <code>take_if_crossed</code> bool False False Do you want to take the best order if orders cross the orderbook?   <code>order_override</code> bool None False","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/aroon-oscillator/#description","text":"<p>Trading logic</p>  <p>Approximation only</p> <p>The description below is a general approximation of this strategy. Please inspect the strategy code in Trading Logic above to understand exactly how it works.</p>  <p>By squarelover - see original pull request</p> <p>One of the major downsides to many of the Market-Making strategies in Hummingbot is that they don't understand trends. In my experience, I've often had my bots trade on the wrong side of a trend. This is what it frequently looks like:  Bad Bad Bot, No Good! \u2b06\ufe0f</p> <p>My strategy attempts to take a well-known set of Market Indicators called Aroon Indicators. These indicators collect trade prices over a configurable set of periods of a given duration. The indicators represent how recent the highest highs and the lowest lows are. And the Oscillator indicator can strongly suggest a market trend. I've tried to distill what the indicators signify and use them to adjust spreads so traders are positioned at the hopefully the best point to execute at profitable positions. In other words, it tries to be better at buying low and selling high.</p> <p>Here's a screenshot of the status screen: </p> <p>You can learn more about Aroon Indicators, here: https://www.investopedia.com/terms/a/aroon.asp</p> <p>The Aroon Oscillator strategy is a market-making strategy that uses Aroon Indicators to detect trends. A user will set up the number of periods in the Indicator and how long each period is in seconds. The user also sets a minimum and maximum spread that they desire. Then the indicator will use the collected period data to automatically adjust the spreads to try and position orders at the best spot for profitable trades.</p> <p>Traditionally the number of periods is 25, but any amount can be used. Lower numbers will produce more oscillations, which in turn will adjust the spreads more drastically. Higher numbers will produce less oscillations, this will adjust the spreads more smoothly.</p> <p>The time duration of the period can be chosen to best suit your trade strategy. For example if you use 5 minute candles when analysing market data, set the duration to 300 seconds.</p> <p><code>minimum_periods</code> can be set to have the indicator engage adjusting the spreads before the Indicator periods fill up. Set this to -1 to have only adjust spreads when the indicator is full.</p> <p>The strategy will adjust the <code>bid_spread</code> closer to <code>minimum_spread</code> the closer Aroon Down indicator gets to 100. It will adjust the <code>ask_spread</code> closer to the <code>minimum_spread</code> the closer Aroon Up gets to 100.</p> <p>The spread is further adjusted by the Aroon Oscillator indicator. If the indicator strongly suggests a trend, it will push the spread out further from <code>minimum_spread</code> in order to wait for a more optimal point to trade. The effect of the oscillator indicator can be adjusted by the <code>aroon_osc_strength_factor</code> parameter a setting lower than 1.0 will decrease its effect on the spread during a strong trend.</p> <p>The rest of the strategy is pretty much copied from PureMarketMakingStrategy. A few options have been removed such as the pricing delegates. There are more features that could possibly be removed since they don't work well with the Indicator.</p>","title":"\ud83d\udcd3 Description"},{"location":"strategies/aroon-oscillator/#i-more-resources","text":"<p> Investopedia - Aroon Oscillator: Learn how the Aroon Oscillator indicator works.</p> <p> Aroon Indicator Strategy Hummingbot Live Followup: Learn how to set up an <code>aroon-oscillator</code> bot.</p> <p>Check out Hummingbot Academy for more resources related to this strategy and others!</p>","title":"\u2139\ufe0f More Resources"},{"location":"strategies/avellaneda-market-making/","text":"","title":"<code>avellaneda_market_making</code>"},{"location":"strategies/avellaneda-market-making/#strategy-info","text":"<ul> <li>Folder: /hummingbot/strategy/avellaneda_market_making</li> <li>Configs: avellaneda_market_making_config_map_pydantic.py</li> <li>Maintainer: None</li> </ul>","title":"\ud83d\udcc1 Strategy Info"},{"location":"strategies/avellaneda-market-making/#strategy-tier","text":"<p></p> <p>Community strategies have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Strategy Tier"},{"location":"strategies/avellaneda-market-making/#summary","text":"<p>This strategy implements a market making strategy described in the classic paper High-frequency Trading in a Limit Order Book written by Marco Avellaneda and Sasha Stoikov. It allows users to directly adjust the <code>risk_factor</code> (<code>gamma</code>) parameter described in the paper. It also features an order book liquidity estimator calculating the trading intensity parameters (<code>alpha</code> and <code>kappa</code>) automatically. Additionally, the strategy implements an order size adjustment algorithm and its <code>order_amount_shape_factor</code> (<code>eta</code>) parameter as described in Optimal High-Frequency Market Making. The strategy is implemented to be used either in fixed timeframes or to be ran indefinitely.</p>","title":"\ud83d\udcdd Summary"},{"location":"strategies/avellaneda-market-making/#exchanges-supported","text":"<ul> <li>SPOT CLOB CEX</li> </ul>","title":"\ud83c\udfe6 Exchanges supported"},{"location":"strategies/avellaneda-market-making/#strategy-configs","text":"Parameter Type Default Prompt     <code>exchange</code> string  Enter your maker spot connector   <code>market</code> string  Enter the token trading pair you would like to trade on <code>exchange</code>   <code>execution_timeframe</code> string  Choose execution timeframe ( <code>infinite</code> / <code>from_date_to_date</code> / <code>daily_between_times</code> )   <code>start_time</code> string  Please enter the start date and time (YYYY-MM-DD HH:MM:SS) OR Please enter the start time (HH:MM:SS)   <code>end_time</code> string  Please enter the end date and time (YYYY-MM-DD HH:MM:SS) OR Please enter the end time (HH:MM:SS)   <code>order_amount</code> decimal  What is the amount of <code>base_asset</code> per order?   <code>order_optimization_enabled</code> bool True Do you want to enable best bid ask jumping?   <code>risk_factor</code> decimal Computed Enter risk factor (\ud835\udefe)   <code>order_amount_shape_factor</code> decimal Computed Enter order amount shape factor (\u03b7)   <code>min_spread</code>  0 Enter minimum spread limit (as % of mid price)   <code>order_refresh_time</code> decimal  How often do you want to cancel and replace bids and asks (in seconds)?   <code>max_order_age</code> decimal 1800 How long do you want to cancel and replace bids and asks with the same price (in seconds)?   <code>order_refresh_tolerance_pct</code> decimal 0 Enter the percent change in price needed to refresh orders at each cycle   <code>filled_order_delay</code> decimal 60 How long do you want to wait before placing the next order if your order gets filled (in seconds)?   <code>inventory_target_base_pct</code> decimal 50 What is the inventory target for the base asset?   <code>add_transaction_costs</code> decimal False Do you want to add transaction costs automatically to order prices? (Yes/No)   <code>volatility_buffer_size</code> decimal 200 Enter amount of ticks that will be stored to calculate volatility   <code>trading_intensity_buffer_size</code> decimal 200 Enter amount of ticks that will be stored to estimate order book liquidity?   <code>order_level_mode</code> int 1 How many orders do you want to place on both sides?   <code>level_distances</code> decimal 0 How far apart in % of optimal spread should orders on one side be?   <code>order_override</code> json     <code>hanging_orders_mode</code> bool False How do you want to handle hanging orders? (track_hanging_orders/ignore_hanging_orders)   <code>should_wait_order_cancel_confirmation</code> bool True Should the strategy wait to receive a confirmation for orders cancellation before creating a new set of orders? (Not waiting requires enough available balance) (Yes/No)","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/avellaneda-market-making/#description","text":"<p>Trading logic</p>  <p>Approximation only</p> <p>The description below is a general approximation of this strategy. Please inspect the strategy code in Trading Logic above to understand exactly how it works.</p>","title":"\ud83d\udcd3 Description"},{"location":"strategies/avellaneda-market-making/#overview","text":"<p>The strategy continuously calculates optimal positioning of a market maker's buy and sell limit orders within an order book, based on the following information:</p> <ul> <li>Current order book liquidity</li> <li>Asset price volatility</li> <li>Desired portfolio allocation (target inventory)</li> <li>Trading session timeframe</li> <li>Risk factor (user choice)</li> </ul> <p>There is two main values that are calculated by the model, based on the factors mentioned above:</p> <ul> <li>Reservation price: A price different from the market mid price, that will be used as reference to create orders.</li> <li>Optimal spread: The best possible spread from the reservation price where the orders will be created.</li> </ul> <p>Compared to the previous version these parameters were removed:</p> <ul> <li><code>parameters_based_on_spread</code></li> <li><code>max_spread</code></li> <li><code>vol_to_spread_multiplier</code></li> <li><code>volatility_sensibility</code></li> <li><code>inventory_risk_aversion</code></li> <li><code>order_book_depth_factor</code></li> <li><code>closing_time</code></li> </ul> <p>Parameter <code>min_spread</code> has a different meaning, parameter <code>risk_factor</code> is being used differently in the calculations and therefore attains a different range of values.</p>","title":"Overview"},{"location":"strategies/avellaneda-market-making/#reservation-price","text":"<p>The farther the current inventory is from the desired asset allocation (as defined by the <code>inventory_target_base_pct</code> parameter), the greater the distance between reservation price and the market mid price. The strategy skews the probability of either buy or sell orders being filled, depending on the difference between the current inventory and the <code>inventory_target_base_pct</code>.</p> <p>For example, If the strategy needs an asset to be sold to reach the <code>inventory_target_base_pct</code> value, sell orders will be placed closer to the mid price than buy orders.</p>","title":"Reservation Price"},{"location":"strategies/avellaneda-market-making/#optimal-spreads","text":"<p>The Optimal spread values (which defines at what price each order will be created) is a function of the order book liquidity, asset price volatility and trading session timeframe. Each factor have an influence on the value calculated:</p> <ul> <li>Low order book liquidity = Smaller optimal spread value</li> <li>Low price volatility = Smaller optimal spread value</li> <li>Time closer to the end of the trading session = Smaller optimal spread value</li> </ul>","title":"Optimal Spreads"},{"location":"strategies/avellaneda-market-making/#risk-factor","text":"<p>The final piece of information that influence both Reservation price and Optimal Spread values is the <code>risk_factor</code> (<code>gamma</code>).</p> <p>This value is defined by the user, and it represents how much inventory risk he is willing to take.</p> <p>The closer the <code>risk_factor</code> is to zero, the more symmetrical will be orders will be created, and the Reservation price will be pretty much equal to the market mid price.</p> <p>In that case, the user is taking more inventory risk, because there will be no skew on the orders positions aiming to reach the <code>inventory_target_base_pct</code>.</p> <p>The higher the value, the more aggressive the strategy will be to reach the <code>inventory_target_base_pct</code>, increasing the distance between the Reservation price and the market mid price.</p> <p>It's a unit-less parameter, that can be set to any non-zero value as necessary, depending on the inventory risk the user is willing to take.</p>  <p>NOTE: The <code>risk_factor</code> is defined relative to the instant volatility of the asset given in absolute price values. For all assets the values <code>risk_factor</code> can attain should be roughly within the same range, however there can be a few exceptions where the parameter would require a significantly different value to start having an effect on the Reservation price and on the Optimal Spread As an example, for asset A, a <code>risk_factor = 1</code> can already have a noticeable effect, while for asset B, the <code>risk_factor</code> must be at least around 10 to have any noticeable effect. The only way to find a value for the <code>risk_factor</code> is to experiment with different values and see it's effects on the Reservation price and the Optimal spread. Based on our experience common values of this parameter are between 1 and 20, however it is unrestricted on the upper side, therefore if necessary its value can be even 100 or 1000, although it's not very common.</p>  <p>Given the right market conditions and the right <code>risk_factor</code>, it's possible that the optimal spread will be wider than the absolute price of the asset, or that the reservation price will by far away from the mid price, in both cases resulting in the optimal bid price to be lower than or equal to 0. If this happens neiher buy or sell will be placed. To prevent it from happening, users can set the <code>risk_factor</code> to a lower value.</p> <p>In setting the <code>risk_factor</code> it's important to observe the reservation price in regards to the mid price. If the user wishes the spread between these two prices to be wider, the risk factor should be set to a higher value. The further away the reservation price is from the mid price, the more aggressive the strategy is in pursuing its target portfolio allocation, because orders on one side will be far more likely to be filled than on the other.</p> <p></p>","title":"Risk Factor"},{"location":"strategies/avellaneda-market-making/#eta-order-size-adjustment","text":"<p>If users choose to set the <code>eta</code> parameter, order sizes will be adjusted to further optimize the strategy behavior in regards to the current and desired portfolio allocation.</p> <p>With a value of <code>eta = 1</code>, buy and sell orders will have the same size. A different value will create assymetrical order sizes, with the goal to reach the <code>inventory_target_pct</code> faster.</p>","title":"ETA (Order size adjustment)"},{"location":"strategies/avellaneda-market-making/#order-levels","text":"<p>Users have an option to layer orders on both sides. If more than 1 <code>order_levels</code> are chosen, multiple buy and sell limit orders will be created on both sides, with predefined price distances from each other, with the levels closest to the reservation price being set to the optimal bid and ask prices. This price distance between levels is defined as a percentage of the optimal spread calculated by the strategy. The percentage is given as the <code>level_distances</code> parameter. Given that optimal spreads tend to be tight, the <code>level_distances</code> values should be in general in tens or hundreds of percents.</p>","title":"Order levels"},{"location":"strategies/avellaneda-market-making/#trading-logic-flow","text":"<p></p>    Step Meaning     Are buffers filled? Are instant volatility indicator and trading intensity indicator buffers full?   Are characteristics estimated? Are order book liquidity / trading intensity parameter estimations available?   Is infinite timeframe? Is the trading session set to be <code>infinite</code> or constrained to <code>from_date_to_date</code> or <code>daily_between_times</code>?   Are multiple levels defined? Is value of <code>order_levels</code> higher than 1?   Is minimum spread defined? Is value of <code>min_spread</code> higher than 0?","title":"Trading logic flow"},{"location":"strategies/avellaneda-market-making/#timeframes","text":"<p>The original Avellaneda-Stoikov model was designed to be used for market making on stock markets, which have defined trading hours. The assumption was that the market maker wants to end the trading day with the same inventory he started.</p> <p>Since cryptocurrency markets are open 24/7, there is no \"closing time\", and the strategy should also be able run indefinitely, based on an infinite timeframe.</p>  <p>NOTE: Avellaneda-Stoikov also considered the possibility of running the model on an infinite timeframe</p>  <p>The strategy allows three possible timeframes to be used:</p> <ul> <li><code>infinite</code> - No closing time for the trading session is considered</li> <li><code>from_date_to_date</code> - The strategy will begin trading on the <code>start_time</code> (YYYY-MM-DD HH:MM:SS) and stop at the <code>end_time</code> (YYYY-MM-DD HH:MM:SS), as one single trading session.</li> <li><code>daily_between_times</code> - The strategy will run as multiple trading sessions, and every day will begin to trade at <code>start_time</code> (HH:MM:SS) and stop at <code>end_time</code> (HH:MM:SS)</li> </ul> <p>For the <code>infinite</code> timeframe the equations used to calculate the reservation price and the optimal spread are slightly different, because the strategy doesn't have to take into account the time left until the end of a trading session.</p> <p>Both the <code>start_time</code> and the <code>end_time</code> parameters are defined to be in the local time of the computer on which the client is running. For the <code>infinite</code> timeframe these two parameters have no effect.</p>","title":"Timeframes"},{"location":"strategies/avellaneda-market-making/#asset-characteristics-estimation","text":"<p>The strategy calculates the reservation price and the optimal spread based on measurements of the current asset volatility and the order book liquidity. The asset volatility estimator is implemented as the <code>instant_volatility</code> indicator, the order book liquidity estimator is implemented as the <code>trading_intensity</code> indicator.</p> <p>Before any estimates can be given, both estimators need to have their buffers filled. By default the lengths of these buffers are set to be 200 ticks. In case of the <code>trading_intensity</code> estimator only order book snapshots different from preceding snapshots count as valid ticks. Therefore the strategy may take longer than 200 seconds (in case of the default length of the buffer) to start placing orders.</p> <p>The <code>trading_intensity</code> estimator is designed to be consistent with ideas outlined in the Avellaneda-Stoikov paper. The <code>instant_volatility</code> estimator defines volatility as a deviation of prices from one tick to another in regards to a zero-change price action.</p>","title":"Asset Characteristics Estimation"},{"location":"strategies/avellaneda-market-making/#minimum-spread","text":"<p>The <code>minimum_spread</code> parameter is optional, it has no effect on the calculated reservation price and the optimal spread. It serves as a hard limit below which orders won't be placed, if users  choose to ensure that buy and sell orders won't be placed too close to each other, which may be detrimental to the market maker's earned fees. The minimum spread is given by the <code>minimum_spread</code> parameter as a percentage of the mid price. By default its value is 0, therefore the strategy places orders at optimal bid and ask prices.</p>","title":"Minimum Spread"},{"location":"strategies/avellaneda-market-making/#references","text":"<ul> <li>High-frequency Trading in a Limit Order Book - Avellaneda, Stoikov</li> <li>Optimal High-Frequency Market Making - Fushimi, Rojas, Herman</li> </ul>","title":"References"},{"location":"strategies/avellaneda-market-making/#i-more-resources","text":"<p> High-frequency trading in a limit order book: The seminal 2008 paper on market making, published in Quantitative Finance, by Marco Avellaneda and Sasha Stoikov.</p> <p> A comprehensive guide to Avellaneda &amp; Stoikov\u2019s market-making strategy: A comprehensive walkthrough of the classic avellaneda market making strategy that is based on a famous classic academic paper.</p> <p> Avellaneda strategy: A technical deep dive: We explain how we modified the original Avellaneda-Stoikov model for the cryptocurrency industry, as well as how we simplified the calculation of key parameters (Greeks).</p> <p> New Avellaneda Market Making Strategy Demo + AMA | Hummingbot Live: Demo of the latest iteration of Avellaneda Market Making strategy</p> <p>Check out Hummingbot Academy for more resources related to this strategy and others!</p>","title":"\u2139\ufe0f More Resources"},{"location":"strategies/cross-exchange-market-making/","text":"","title":"<code>cross_exchange_market_making</code>"},{"location":"strategies/cross-exchange-market-making/#strategy-info","text":"<ul> <li>Folder: /hummingbot/strategy/cross_exchange_market_making</li> <li>Configs: cross_exchange_market_making_config_map_pydantic.py</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Strategy Info"},{"location":"strategies/cross-exchange-market-making/#strategy-tier","text":"<p></p> <p>Core strategies are maintained and continually improved by Hummingbot Foundation. Foundation staff focuses on testing these strategies and rewards users who answer questions related to these strategies on Discord.</p>","title":"\ud83c\udfc6 Strategy Tier"},{"location":"strategies/cross-exchange-market-making/#summary","text":"<p>Also referred to as liquidity mirroring or exchange remarketing, this strategy allows you to make a market (creates buy and sell orders) on the <code>maker</code> exchange, while hedging any filled trades on a second, <code>taker</code> exchange. The strategy attempts places maker orders at spreads that are wider than taker orders by a spread equal to <code>min_profitability</code>.</p>","title":"\ud83d\udcdd Summary"},{"location":"strategies/cross-exchange-market-making/#supported-exchange-types","text":"<ul> <li>SPOT CLOB CEX</li> <li>SPOT AMM DEX</li> </ul>","title":"\ud83c\udfe6 Supported Exchange Types"},{"location":"strategies/cross-exchange-market-making/#strategy-configs","text":"Parameter Type Default Prompt     <code>maker_market</code> string  Enter your maker spot connector (Exchange)   <code>taker_market</code> string  Enter your taker connector (Exchange/AMM)   <code>maker_market_trading_pair</code> string  Enter the token trading pair you would like to trade on <code>[maker_market]</code>   <code>taker_market_trading_pair</code> string  Enter the token trading pair you would like to trade on <code>[taker_market]</code>   <code>min_profitability</code> decimal  What is the minimum profitability for you to make a trade? (Enter 1 to indicate 1%)   <code>order_amount</code> decimal  What is the amount of <code>base_asset</code> per order?   <code>adjust_order_enabled</code> bool True Do you want to enable adjust order? (Yes/No)   <code>order_refresh_mode</code> string <code>active_order_refresh</code> Select the order refresh mode (<code>passive_order_refresh</code> / <code>active_order_refresh</code>)?   passive_order_refresh:      <code>cancel_order_threshold</code> decimal 5 Do you want to enable active order canceling?   <code>limit_order_min_expiration</code> decimal 130 How often do you want limit orders to expire (in seconds)?         <code>top_depth_tolerance</code> decimal 0 What is your top depth tolerance? (in <code>base_asset</code>)   <code>anti_hysteresis_duration</code> decimal 60 What is the minimum time interval you want limit orders to be adjusted? (in seconds)   <code>order_size_taker_volume_factor</code> decimal 25 What percentage of hedge-able volume would you like to be traded on the taker market? (Enter 1 to indicate 1%)   <code>order_size_taker_balance_factor</code> decimal 99.5 What percentage of asset balance would you like to use for hedging trades on the taker market? (Enter 1 to indicate 1%)   <code>order_size_portfolio_ratio_limit</code> decimal 16.67 What ratio of your total portfolio value would you like to trade on the maker and taker markets? Enter 50 for 50%   <code>conversion_rate_mode</code> string <code>rate_oracle_conversion_rate</code> True   fixed_conversion_rate:      <code>taker_to_maker_base_conversion_rate</code> decimal 1 What percentage of asset balance would you like to use for hedging trades on the taker market?   <code>taker_to_maker_quote_conversion_rate</code> decimal 1 What percentage of asset balance would you like to use for hedging trades on the maker market?         <code>slippage_buffer</code> decimal 5 How much buffer do you want to add to the price to account for slippage for taker orders?   <code>debug_price_shim</code> bool False Do you want to enable the debug price shim for integration tests? If you don't know what this does you should keep it disabled.   <code>gateway_transaction_cancel_interval</code> decimal 600 After what time should blockchain transactions be cancelled if they are not included in a block? (this only affects decentralized exchanges) (Enter time in seconds)","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/cross-exchange-market-making/#description","text":"<p>Trading logic</p>  <p>Approximation only</p> <p>The description below is a general approximation of this strategy. Please inspect the strategy code in Trading Logic above to understand exactly how it works.</p>","title":"\ud83d\udcd3 Description"},{"location":"strategies/cross-exchange-market-making/#architecture","text":"<p>The cross exchange market making strategy performs market making trades between two markets: it emits limit orders to a less liquid, larger spread market; and emits market orders on a more liquid, smaller spread market whenever the limit orders were hit. This, in effect, sends the liquidity from the more liquid market to the less liquid market.</p> <p>In Hummingbot code and documentation, we usually refer to the less liquid market as the \"maker side\" - since the cross exchange market making strategy is providing liquidity there. We then refer to the more liquid market as the \"taker side\" - since the strategy is taking liquidity there.</p> <p>The startegy currently supports centralized exchanges on the maker side and centralized and decentralized exchanges on the taker side. Decentralized exchanges are accessed through the hummingbot gateway.</p> <p>The cross exchange market making strategy's code is divided into two major parts:</p> <ol> <li> <p>Order creation and adjustment</p> <p>Periodically creates and adjusts limit orders on the maker side.</p> </li> <li> <p>Hedging order fills</p> <p>Performs the opposite, hedging trade on the taker side, whenever a maker order has been filled.</p> </li> </ol>","title":"Architecture"},{"location":"strategies/cross-exchange-market-making/#live-configuration","text":"<p>The strategy now supports live configuration. That means any changes in configuration by the user are immediately taken into account by the strategy without a need for it to be restarted.</p>","title":"Live Configuration"},{"location":"strategies/cross-exchange-market-making/#order-creation-and-adjustment","text":"<p>Here's a high-level view of the logical flow of the order creation and adjustment part. The overall logic of order creation and adjustment is pretty involved, but it can be roughly divided to the Cancel Order Flow and the Create Order Flow.</p> <p>The cross exchange market making strategy regularly refreshes the limit orders it has on the maker side market by regularly cancelling old orders (or waiting for existing order to expire), and creating new limit orders. This process ensures the limit orders it has on the maker side are always of the correct and profitable prices.</p> <p></p> <p>The entry point of this logic flow is the <code>c_process_market_pair()</code> function in <code>cross_exchange_market_making.pyx</code>.</p>","title":"Order Creation and Adjustment"},{"location":"strategies/cross-exchange-market-making/#cancel-order-flow","text":"<p>The cancel order flow regularly monitors all active limit orders on the maker side, to ensure they are all valid and profitable over time. If any active limit order becomes invalid (e.g. because the asset balance changed) or becomes unprofitable (due to market price changes), then it should cancel such orders.</p> <p></p>","title":"Cancel Order Flow"},{"location":"strategies/cross-exchange-market-making/#active-order-cancellation-setting","text":"<p>The <code>active_order_canceling</code> setting changes how the cancel order flow operates. <code>active_order_canceling</code> should be enabled when the maker side is a centralized exchange (e.g. Binance, Coinbase Pro), and it should be disabled when the maker side is a decentralized exchange.</p> <p>When <code>active_order_canceling</code> is enabled, the cross exchange market making strategy would refresh orders by actively cancelling them regularly. This is optimal for centralized exchanges because it allows the strategy to respond quickly when, for example, market prices have significantly changed. This should not be chosen for decentralized exchanges that charge gas for cancelling orders (such as Radar Relay).</p> <p>When <code>active_order_canceling</code> is disabled, the cross exchange market making strategy would emit limit orders that automatically expire after a predefined time period. This means the strategy can just wait for them to expire to refresh the maker orders, rather than having to cancel them actively. This is useful for decentralized exchanges because it avoids the potentially very long cancellation delays there, and it also does not cost any gas to wait for order expiration.</p> <p>It is still possible for the strategy to actively cancel orders with <code>active_order_canceling</code> disabled, via the <code>cancel_order_threshold</code> setting. For example, you can set it to -0.05 such that the strategy would still cancel a limit order on a DEX when it's profitability dropped below -5%. This can be used as a safety switch to guard against sudden and large price changes on decentralized exchanges.</p>","title":"Active order cancellation setting"},{"location":"strategies/cross-exchange-market-making/#is-hedging-profitable","text":"<p>Assuming active order canceling is enabled, the first check the strategy does with each active maker order is whether it is still profitable or not. The current profitability of an order is calculated assuming the order is filled and hedged on the taker market immediately.</p> <p>If the profit ratio calculated for the maker order is less than the <code>min_profitability</code> setting, then the order is canceled.</p> <p>The logic of this check can be found in the function <code>c_check_if_still_profitable()</code> in <code>cross_exchange_market_making.pyx</code>.</p> <p>Otherwise, the strategy will go onto the next check.</p>","title":"Is hedging profitable?"},{"location":"strategies/cross-exchange-market-making/#is-there-sufficient-account-balance","text":"<p>The next check afterwards checks whether there's enough asset balance left to satisfy the maker order. If there is not enough balance left on the exchange, the order would be cancelled.</p> <p>The logic of this check can be found in the function <code>c_check_if_sufficient_balance()</code> in <code>cross_exchange_market_making.pyx</code>.</p> <p>Otherwise, the strategy will go onto the next check.</p>","title":"Is there sufficient account balance?"},{"location":"strategies/cross-exchange-market-making/#is-the-price-correct","text":"<p>Asset prices on both the maker side and taker side are always changing, and thus the optimal prices for the limit orders on the maker side would change over time as well.</p> <p>The cross exchange market making strategy calculates the optimal pricing from the following factors:</p> <ol> <li>Current market order prices on the taker side.</li> <li>Current order book depth on the maker side.</li> <li><code>top_depth_tolerance</code> setting, which is applied to the order book depths on maker side.</li> <li><code>min_profitability</code> setting, which is applied to the market order prices on the taker side.</li> </ol> <p>If the price of the active order is different from the optimal price calculated, then the order would be cancelled. Otherwise, the strategy would allow the order to stay.</p> <p>The logic of this check can be found in the function <code>c_check_if_price_correct()</code> in <code>cross_exchange_market_making.pyx</code>.</p> <p>After all the active orders on make side have been checked, the strategy will proceed to the create order flow.</p>","title":"Is the price correct?"},{"location":"strategies/cross-exchange-market-making/#create-order-flow","text":"<p>After going through the cancel order flow, the cross exchange market making strategy would check and re-create any missing limit orders on the maker side.</p> <p></p> <p>The logic inside the create order flow is relatively straightforward. It checks whether there are existing bid and ask orders on the maker side. If any of the orders are missing, it will check whether it is profitable to create one at the moment. If it's profitable to create the missing orders, it will calculate the optimal pricing and size and create those orders.</p> <p>The logic of the create order flow can be found in the function <code>c_check_and_create_new_orders()</code> in <code>cross_exchange_market_making.pyx</code>.</p>","title":"Create Order Flow"},{"location":"strategies/cross-exchange-market-making/#hedging-order-fills","text":"<p>The cross exchange market making strategy would always immediately hedge any order fills from the maker side, regardless of how profitable the hedge is at the moment. The rationale is, it is more useful to minimize unnecessary exposure to further market risks for the users, than to wait speculatively for a profitable moment to hedge the maker order fill - which may never come.</p> <p></p> <p>The logic of the hedging order fill flow can be found in the function <code>c_did_fill_order()</code> and <code>c_check_and_hedge_orders()</code> in <code>cross_exchange_market_making.py</code>.</p>","title":"Hedging Order Fills"},{"location":"strategies/cross-exchange-market-making/#decentralized-exchanges-gateway","text":"<p>Decentralized exchanges have several peculiarities compared to centralized exchanges, which must be accounted for if selected on the taker side. For starters, in general interaction with them is less reliable. Unlike in case of centralized exchanges, for example obtaining an asset price from a DEX may occasionally fail. For this reason many operations on a DEX may have to be repeated until they're executed successfully.</p> <p>Another difference is dependence of transaction fees on currrent gas fees. Therefore taker transaction fees may vary and therefore also position profitability checks performed in the method <code>check_if_still_profitable()</code> may return different results at different times for the same maker positions.</p>","title":"Decentralized Exchanges (Gateway)"},{"location":"strategies/cross-exchange-market-making/#i-more-resources","text":"<p> What is cross exchange market making?</p> <p> Cross Exchange Market Making with Jelle</p> <p> Use cross-exchange market making (XEMM) strategy to lower risk: The XMM strategy effectively reduces inventory risk. This article talks about how to proceed with XEMM in place.</p> <p> Cross Exchange Market Making Strategy | Hummingbot Live: In this video, Paulo shows how to optimize a Cross Exchange Market-Making strategy using the Hummingbot app.</p> <p>Check out Hummingbot Academy for more resources related to this strategy and others!</p>","title":"\u2139\ufe0f More Resources"},{"location":"strategies/cross-exchange-mining/","text":"","title":"<code>cross-exchange-mining</code>"},{"location":"strategies/cross-exchange-mining/#strategy-info","text":"<ul> <li>Folder: /hummingbot/strategy/cross_exchange_mining</li> <li>Configs: cross_exchange_mining_config_map_pydantic.py</li> <li>Maintainer: bsmeaton</li> </ul>","title":"\ud83d\udcc1 Strategy Info"},{"location":"strategies/cross-exchange-mining/#strategy-tier","text":"<p></p> <p>Community strategies have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Strategy Tier"},{"location":"strategies/cross-exchange-mining/#summary","text":"<p>The Cross Exchange Mining strategy creates buy or sell limit orders on a maker exchange at a spread wider than that of the taker exchange. Filling of the order on the maker exchange triggers a balancing of the portfolio on the taker exchange at an advantageous spread (The difference between the two spreads being equal to the <code>min_profitability</code>) thereby creating profit.</p> <p>The strategy tracks the amount of base asset across the taker and maker exchanges for <code>order_amount</code> and continually seeks to rebalance and maintain assets, thereby reducing any exposure risk whereby the user has too much quote or base asset in falling or rising markets.</p>","title":"\ud83d\udcdd Summary"},{"location":"strategies/cross-exchange-mining/#exchanges-supported","text":"<ul> <li>SPOT CLOB CEX</li> </ul>","title":"\ud83c\udfe6 Exchanges supported"},{"location":"strategies/cross-exchange-mining/#strategy-configs","text":"Parameter Type Default Prompt New? Prompt     <code>maker_market</code> string  True Enter your maker spot connector (Exchange)   <code>taker_market</code> string  True Enter your taker connector (Exchange/AMM)   <code>maker_market_trading_pair</code> string  True Enter the token trading pair you would like to trade on <code>[maker_market]</code>   <code>taker_market_trading_pair</code> string  True Enter the token trading pair you would like to trade on <code>[taker_market]</code>   <code>min_profitability</code> decimal  True What is the minimum profitability for you to make a trade? (Enter 1 to indicate 1%)   <code>order_amount</code> decimal  True What is the amount of <code>base_asset</code> per order?   <code>slippage_buffer</code> decimal 5 True How much buffer do you want to add to the price to account for slippage for taker orders?   <code>balance_adjustment_duration</code> decimal 5 True Time interval between subsequent portfolio rebalances?   <code>min_prof_tol_low</code> decimal 0.05 True What percentage below the min profitability do you want to cancel the set order?   <code>min_prof_tol_high</code> decimal 0.05 True What percentage above the min profitability do you want to cancel the set order?   <code>volatility_buffer_size</code> decimal 120 True The period in seconds to calulate volatility over?   <code>min_prof_adj_timer</code> decimal 3600 True Time interval to adjust min profitability over by using results of previous trades in last 24 hrs?   <code>min_order_amount</code> decimal 0 True What is the minimum order amount required for bid or ask orders?   <code>rate_curve</code> decimal 1 True Multiplier for rate curve for the adjustment of min profitability based on previous trades over last 24 hrs?   <code>trade_fee</code> decimal 0.25 True Complete trade fee covering both taker and maker trades?","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/cross-exchange-mining/#description","text":"<p>Trading logic</p> <p>The strategy operates by maintaining the 'order amount' base balance across the taker and maker exchanges. The strategy sets buy or sell limit orders on the maker exchanges, these orders are set when sufficient quote or base balance exists on the taker exchange in order to be able to complete or balance the trade on the taker exchange when a limit order on the maker exchange is filled.</p> <p>The strategy can balance trades immediately when an imbalance in base asset is detected and although the taker trade will be acted upon immediately after an imbalance is detected subsequent balances will be spaced by at least the <code>balance_adjustment_duration</code> variable, just to ensure the balances are updated and recorded before the balance is retried erroneously. In this way the strategy will exactly maintain the 'order amount' in terms of base currency across the exchanges selling base currency when a surplus exists or buying base currency if short.</p> <p>The strategy seeks to make profit in a similar way that cross exchange market making operates. by placing a wide spread on the maker exchange that when filled will allow the user to buy back base currency at a lower price on the taker exchange (In case of a sell order fill on the maker exchange) or sell base currency at a higher price on the taker exchange in case of buy order filled on the maker exchange. The difference in price between these two transactions should be the <code>min_profitability</code> variable. Setting this variable to a higher value will result in less trade fills due to a larger spread on the maker exchange but also a greater profitability per transaction and vise versa.</p> <p>When an order is set with a spread that meets the <code>min_profitability</code> variable at that time it is then monitored each tick. The theoretical profitability of the trade will vary over time as orders on the taker orderbook changes meaning the cost of balancing the filled trade will constantly change. The order is cancelled and reset back at the <code>min_profitability</code> amount when the profitability either drops below the <code>`min_profitability</code> minus min_prof_tol_low point or rises above the <code>min_profitability</code> plus <code>min_prof_tol_high</code> point.</p> <p>In addition to this basic logic a leading and lagging adjustment to the <code>min profitability</code> figure is made during the strategy run.</p> <p>Short term, Leading adjustment:</p> <p>The strategy looks at the current volatility in the maker market to adjust the <code>min profitability</code> figure described above. The function looks at the standard deviation of the currency pair prices across a time window equal to <code>volatility_buffer_size</code>. The standard deviation figure is then converted by taking the three sigma percentage away from the mid price over that range and adding it to the <code>min profitability</code>. In this way a higher volatility or standard deviation figure would increase the min profitbaility creating a larger spread and reducing risk during periods of volatility. The adjustment is set for a time period equal to the <code>volatility_buffer_size</code> unless a higher volatility adjustment is calculated in which case its set at the higher adjustment rate and timer reset.</p> <p>Long term, Lagging adjustment:</p> <p>The strategy looks at the previous trades completed and balancing trades in order to understand the success of the strategy at producing profit. The strategy will again adjust the 'min_profitability' figure by widening the spread if the user is losing money and tightening the spread if the trades are too profitable. This is due to the strategy aiming to essentially provide a break even portfolio to maximise mining rewards, hence the name <code>cross_exchange_mining</code>.</p> <p>The previous trades in the users <code>hummingbot/data</code> file are read by the strategy at intervals equal to the <code>min_prof_adj_timer</code> when this function is called it looks at trades recorded within the last 24 hours in the file and based on timestamp seeks to match the filled maker and taker orders that make up a full balanced trade.</p> <p>The strategy uses the <code>trade_fee</code> variable in this calculation to take into account the amount of money paid to the both exchanges during these trades, the calculation returns the average profitability of the trades and balance pairs completed in the previous 24 hours. This figure is then converted into an adjustment. a 0% profitability (Based on order amount) would lead to 0 adjustment.</p> <p>Positive or negative percentages made are converted into an adjutsment using the relationship <code>(Percentage * rate_curve)**3 + min_profitability</code>. The cubed figure exponentially penalises large profit or loss percentages gained thereby greatly reducing the min_profitability (In case of large gains) or greatly increasing the min_profitability figure (In case of large losses). The <code>rate_curve</code> variable acts to provide a multiplier for this adjustment it is reccomended to keep this in the 0.5-1.5 range with the higher it is set the more the min_profitability adjustment is affected by previous trades.</p> <p>From a personal perspective I have used the XEMM strategy for a number of years and my motivation for this strategy comes not from improving how effective the strategy is at making money but it is to increase the reliability of the strategy in maintaining a hedged position of base assets even during wild market swings. The code is entirely rewritten from the XEMM strategy aimed at making a more logical progression and removing elements that I find add complexity, reducing reliability without benefitting the user.</p> <p>The strategy is intended for use with the same pairs on both taker and maker centralised exchanges. The strategy utilises market trades to fill on taker side.</p>","title":"\ud83d\udcd3 Description"},{"location":"strategies/hedge/","text":"","title":"<code>hedge</code>"},{"location":"strategies/hedge/#strategy-info","text":"<ul> <li>Folder: /hummingbot/strategy/hedge</li> <li>Configs: hedge_config_map_pydantic.py</li> <li>Maintainer: leastchaos</li> </ul>","title":"\ud83d\udcc1 Strategy Info"},{"location":"strategies/hedge/#strategy-tier","text":"<p></p> <p>Community strategies have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Strategy Tier"},{"location":"strategies/hedge/#summary","text":"<p>This strategy allows you to hedge a market making strategy by automatically opening an opposite positions on another <code>perp</code> exchange or <code>spot</code> exchange. Configs like <code>hedge_ratio</code> allow you to customize how much to hedge. Users are expected to run this strategy alongside another market making strategy.</p> <p>This strategy was the winning submission in the dYdX hackathon.</p>","title":"\ud83d\udcdd Summary"},{"location":"strategies/hedge/#exchanges-supported","text":"<ul> <li>SPOT CLOB CEX</li> <li>PERP CLOB CEX</li> </ul>","title":"\ud83c\udfe6 Exchanges supported"},{"location":"strategies/hedge/#strategy-configs","text":"Parameter Type Default Prompt New? Prompt     <code>value_mode</code> bool True True Do you want to hedge by asset value [y] or asset amount[n] (y/n)?   <code>hedge_ratio</code> decimal 1 True Enter ratio of asset to hedge, e.g 0.5 means 50 percent of the total asset value will be hedged.   <code>hedge_interval</code> decimal 60 True Enter the interval in seconds to check for hedge   <code>min_trade_size</code> decimal 0 True Enter the minimum trade size in quote asset   <code>slippage</code> decimal 0.02 True Enter max slippage in decimal, e.g 0.1 -&gt; 10%   <code>hedge_connector</code> Union[None, ExchangeEnum] None True The name of the exchange connector.   <code>hedge_markets</code> List[str] None True The name of the trading pairs. (For Value Mode, only one market can be entered)   <code>hedge_offsets</code> List[Decimal] [0.0] True Enter the offsets to use to hedge the markets comma seperated   <code>hedge_leverage</code> decimal 1 True Enter the leverage to use for the hedge market   <code>hedge_position_mode</code> Literal[\"ONEWAY\", \"HEDGE\"] ONEWAY True Enter the position mode to use for the hedge market. (Ensure that the perp connector position mode matches the position mode here)   <code>connector_0</code> MarketConfigMap  True Do you want to monitor connector 0?   <code>connector_1</code> MarketConfigMap  True Do you want to monitor connector 1?   <code>connector_2</code> MarketConfigMap  True Do you want to monitor connector 2?   <code>connector_3</code> MarketConfigMap  True Do you want to monitor connector 3?   <code>connector_4</code> MarketConfigMap  True Do you want to monitor connector 4?   <code>MarketConfigMap</code>:    for connector_0 to connector_4?   <code>connector</code> Union[None, ExchangeEnum] None True The name of the exchange connector.   <code>markets</code> List[str] None True The name of the trading pairs.   <code>offsets</code> List[Decimal] [0.0] True Enter the offsets to use to hedge the markets comma seperated","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/hedge/#description","text":"<p>Trading logic</p>  <p>Approximation only</p> <p>The description below is a general approximation of this strategy. Please inspect the strategy code in Trading Logic above to understand exactly how it works.</p>  <p>By leastchaos - see original pull request</p> <p>Summary</p> <p>This strategy contains 2 mode of hedging.</p> <ol> <li>Hedge by amount</li> </ol> <p>The strategy will hedge by amount by calculating the amount to hedge by each asset. The amount of asset to hedge is calculated by the following formula: for each asset in the hedge market pair,     amount_to_hedge = sum of asset amount with the same base asset * hedge_ratio + hedge asset amount The amount of asset to hedge must be greater than the minimum trade size to be traded.</p> <ol> <li>Hedge by value</li> </ol> <p>The strategy will hedge by value by calculating the amount of asset to hedge. The amount of asset to hedge is calculated by the following formula: amount_to_hedge = sum of asset value of all market pairs * hedge_ratio + hedge asset value The amount of asset to hedge must be greater than the minimum trade size to be traded.</p> <p>Code Logic:</p> <p>On every hedge_interval seconds,</p> <ol> <li>Checks that all markets are ready.</li> <li>Check and cancel any previous active orders that were not executed</li> <li>Calculates the direction and amount to hedge according to the mode selected (by amount or by value)</li> <li>Places order if the amount meets the min_trade_size</li> </ol> <p>Sample Use Case Examples</p> <ul> <li>Perform proxy hedging for unshort-able assets with hedge by value mode by hedging the value of multiple different markets using a short-able market which may be correlated.</li> </ul> <p>For E.g, there might be some correlation for some basket of tokens (FEAR, ODDZ, DAFI (random examples only)) with ETH prices. So you can choose to hedge the value of this basket token you hold with a short position on ETH to reduce the inventory risk on the basket of tokens. So when you are market making with this position, it will help you to automatically short a defined ratio on the perpetual market so that if the overall market goes down, part of the loss can be mitigated by the short position in ETH.</p> <ul> <li>Fixed amount of offset/ hedging of asset</li> </ul> <p>You can set a fixed offset value/amount and the bot will maintain the amount of asset/position you hold at the offset level at every interval.</p>","title":"\ud83d\udcd3 Description"},{"location":"strategies/hedge/#i-more-resources","text":"<p>Note</p> <p>The videos below may be obsolete since they are based on the v0.45.0 version of the strategy</p>  <p> Hedge in Market Making | Trader Strategies | Part 01</p> <p> Hedge &amp; Risk Management | Trader Strategies | Part 02</p> <p> Hedge in Market Making using dYdX Perpetuals | Trader Strategies | Part 03</p>","title":"\u2139\ufe0f More Resources"},{"location":"strategies/liquidity-mining/","text":"","title":"<code>liquidity_mining</code>"},{"location":"strategies/liquidity-mining/#strategy-info","text":"<ul> <li>Folder: /hummingbot/strategy/liquidity_mining</li> <li>Configs: liquidity_mining_config_map.py</li> <li>Maintainer: CoinAlpha</li> </ul>","title":"\ud83d\udcc1 Strategy Info"},{"location":"strategies/liquidity-mining/#strategy-tier","text":"<p></p> <p>Community strategies have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Strategy Tier"},{"location":"strategies/liquidity-mining/#summary","text":"<p>This strategy allows market making across multiple pairs on an exchange on a single Hummingbot instance. This is achieved by enabling users to configure the markets they would like to participate in and other market-making configurations. Volatility-Spread adjustment is another key feature of this strategy, where the spreads are dynamically adjusted based on the volatility of the markets.</p>","title":"\ud83d\udcdd Summary"},{"location":"strategies/liquidity-mining/#exchanges-supported","text":"<ul> <li>SPOT CLOB CEX</li> </ul>","title":"\ud83c\udfe6 Exchanges supported"},{"location":"strategies/liquidity-mining/#strategy-configs","text":"Parameter Type Default Prompt New? Prompt     <code>exchange</code> string  True Enter the spot connector to use for liquidity mining)   <code>markets</code> string  True Enter a list of markets   <code>token</code> string  True What asset (base or quote) do you want to use to provide liquidity?   <code>order_amount</code> decimal  True What is the size of each order (in [token] amount)?   <code>spread</code> decimal  True How far away from the mid price do you want to place bid and ask orders?   <code>inventory_skew_enabled</code> bool True False Would you like to enable inventory skew? (Yes/No)   <code>target_base_pct</code> decimal  True For each pair, what is your target base asset percentage?   <code>order_refresh_time</code> float 10 False How often do you want to cancel and replace bids and asks   <code>order_refresh_tolerance_pct</code> deciimal 0.2 False Enter the percent change in price needed to refresh orders at each cycle   <code>inventory_range_multiplier</code> decimal 1 False What is your tolerable range of inventory around the target, expressed in multiples of your total order size?   <code>volatility_interval</code> int 300 False What is an interval, in second, in which to pick historical mid price data from to calculate market volatility?   <code>avg_volatility_period</code> int 10 False How many interval does it take to calculate average market volatility?   <code>volatility_to_spread_multiplier</code> decimal 1 False Enter a multiplier used to convert average volatility to spread   <code>max_spread</code> decimal -1 False What is the maximum spread?   <code>max_order_age</code> float 3600 False What is the maximum life time of your orders (in seconds)?","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/liquidity-mining/#description","text":"<p>Trading logic</p>","title":"\ud83d\udcd3 Description"},{"location":"strategies/liquidity-mining/#i-more-resources","text":"<p> Hummingbot Miner Help Center: Check out our latest announcements, campaigns, documentations, handy articles and much more.</p> <p> Demystifying liquidity mining rewards</p> <p> Liquidity Mining Explained | For New Users: Learn about Liquidity Mining and how to set up a market-making bot to earn rewards in an exchange.</p> <p>Check out Hummingbot Academy for more resources related to this strategy and others!</p>","title":"\u2139\ufe0f More Resources"},{"location":"strategies/perpetual-market-making/","text":"","title":"<code>perpetual_market_making</code>"},{"location":"strategies/perpetual-market-making/#strategy-info","text":"<ul> <li>Folder: /hummingbot/strategy/perpetual_market_making</li> <li>Configs: perpetual_market_making_config_map.py</li> <li>Maintainer: CoinAlpha</li> </ul>","title":"\ud83d\udcc1 Strategy Info"},{"location":"strategies/perpetual-market-making/#strategy-tier","text":"<p></p> <p>Community strategies have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Strategy Tier"},{"location":"strategies/perpetual-market-making/#summary","text":"<p>This strategy allows Hummingbot users to run a market making strategy on a single trading pair on a perpetuals swap (<code>perp</code>) order book exchange.</p> <p>Similar to the <code>pure_market_making_strategy</code>, the <code>perpetual_market_making</code> strategy keeps placing limit buy and sell orders on the order book and waits for other participants (takers) to fill its orders. But unlike market making on spot markets, where assets are being exchanged, market making on perpetual markets creates and closes positions. Since outstanding perpetual swap positions are created after fills, the strategy has a number of parameters to determine when positions are closed to take profits and prevent losses.</p>","title":"\ud83d\udcdd Summary"},{"location":"strategies/perpetual-market-making/#exchanges-supported","text":"<ul> <li>PERP CLOB CEX</li> </ul>","title":"\ud83c\udfe6 Exchanges supported"},{"location":"strategies/perpetual-market-making/#strategy-configs","text":"Parameter Type Default Prompt New? Prompt     <code>derivative</code> string  True Enter your maker derivative connector   <code>market</code> string  True Enter the trading pair you would like to provide liquidity on [exchange]   <code>leverage</code> int  True How much leverage do you want to use?   <code>position_mode</code> string One-way True Which position mode do you want to use? (One-way/Hedge)   <code>bid_spread</code> decimal  True How far away from the mid price do you want to place the first bid order?   <code>ask_spread</code> decimal  True How far away from the mid price do you want to place the first ask order?   <code>minimum_spread</code> decimal -100 False At what minimum spread should the bot automatically cancel orders?   <code>order_refresh_time</code> float  True How often do you want to cancel and replace bids and asks (in seconds)?   <code>order_refresh_tolerance_pct</code> decimal 0 False Enter the percent change in price needed to refresh orders at each cycle   <code>order_amount</code> decimal  True What is the amount of [base_asset] per order?   <code>long_profit_taking_spread</code> decimal 0 True At what spread from the entry price do you want to place a short order to reduce position?   <code>short_profit_taking_spread</code> string 0 True At what spread from the position entry price do you want to place a long order to reduce position?   <code>stop_loss_spread</code> string 0 True At what spread from position entry price do you want to place stop_loss order?   <code>time_between_stop_loss_orders</code> decimal 60 True How much time should pass before refreshing a stop loss order that has not been executed? (in seconds)   <code>stop_loss_slippage_buffer</code> decimal 0.5 True How much buffer should be added in stop loss orders' price to account for slippage (Enter 1 for 1%)?   <code>price_ceiling</code> decimal -1 False Enter the price point above which only sell orders will be placed   <code>price_floor</code> decimal -1 False Enter the price below which only buy orders will be placed   <code>order_levels</code> int 1 False How many orders do you want to place on both sides?   <code>order_level_amount</code> decimal 0 False How much do you want to increase or decrease the order size for each additional order? (decrease &lt; 0 &gt; increase)   <code>order_level_spread</code> decimal 1 False Enter the price increments (as percentage) for subsequent orders? (Enter 1 to indicate 1%)   <code>filled_order_delay</code> float 60 False How long do you want to wait before placing the next order if your order gets filled (in seconds)?   <code>order_optimization_enabled</code> bool False False Do you want to enable best bid ask jumping? (Yes/No)   <code>ask_order_optimization_depth</code> decimal 0 False How deep do you want to go into the order book for calculating the top ask, ignoring dust orders on the top (expressed in base asset amount)?   <code>bid_order_optimization_depth</code> decimal 0 False How deep do you want to go into the order book for calculating the top bid, ignoring dust orders on the top (expressed in base asset amount)?   <code>price_source</code> string current_market False Which price source to use? (current_market/external_market/custom_api)   <code>price_type</code> string mid_price False Which price type to use? (mid_price/last_price/last_own_trade_price/best_bid/best_ask)   <code>price_source_derivative</code> string  False Enter external price source connector name or derivative name   <code>price_source_market</code> string  False Enter the token trading pair on [external_market]   <code>price_source_custom_api</code> string  False Enter pricing API URL   <code>custom_api_update_interval</code> float 5 False Enter custom API update interval in second (default: 5.0, min: 0.5)   <code>order_override</code> json  False","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/perpetual-market-making/#description","text":"<p>Trading logic</p>  <p>Approximation only</p> <p>The description below is a general approximation of this strategy. Please inspect the strategy code in Trading Logic above to understand exactly how it works.</p>","title":"\ud83d\udcd3 Description"},{"location":"strategies/perpetual-market-making/#architecture","text":"<p>The <code>perpetual_market_making</code> strategy works in a similar fashion as the <code>pure_market_making_strategy</code>, except adapted to trading perpetual swaps. Trading perpetual swaps creates positions, and doesn't just exchage assets like trading on spot markets.</p> <p>On every tick the strategy creates new opening orders and existing orders are being cancelled. If an outstanding order is filled, the strategy then has to manage the position.</p> <p></p>","title":"Architecture"},{"location":"strategies/perpetual-market-making/#order-placement","text":"<p>The strategy places long and short orders to open perpetual swap positions at predefined distances from a mid price. These distances are given by the parameters <code>bid_spread</code> and <code>ask_spread</code>.</p> <p>On every tick, outstanding open orders are being evaluated. If they're too far from the proposal orders, as defined by the <code>order_refresh_tolerance_pct</code> parameter, they will be cancelled and replaced by new orders. If an active order finds itself below a <code>min_spread</code> threshold from the mid price, it will also be cancelled.</p> <p>It's also possible to place multiple orders on each side in price layers as defined by the parameters <code>order_levels</code>, <code>order_level_amount</code> and <code>order_level_spread</code>. The closest to the mid price will be always orders at distances <code>bid_spread</code> and <code>ask_spread</code>.</p> <p>The strategy can be restricted to trade only within a specific price band, defined by the <code>price_ceiling</code> and <code>price_floor</code> parameters. If the mid price is outside of this interval, no orders will be created, only cancelled.</p> <p></p>","title":"Order Placement"},{"location":"strategies/perpetual-market-making/#position-management","text":"<p>New opening orders are not being placed if one or more of existing opening orders were filled and the strategy holds a position. In that case, the position(s) is being evaluated on every tick whether to close it or not, and whether to either take a profit or a loss. These decisions are controlled by parameters <code>long_profit_taking_spread</code>, <code>short_profit_taking_spread</code> and <code>stop_loss_spread</code>.</p> <p></p>","title":"Position Management"},{"location":"strategies/perpetual-market-making/#i-more-resources","text":"<p> Perpetual Market Making Demo | Hummingbot Live: Demo of the Perpetual Market Making strategy</p> <p>Check out Hummingbot Academy for more resources related to this strategy and others!</p>","title":"\u2139\ufe0f More Resources"},{"location":"strategies/pure-market-making/","text":"","title":"<code>pure_market_making</code>"},{"location":"strategies/pure-market-making/#strategy-info","text":"<ul> <li>Folder: /hummingbot/strategy/pure_market_making</li> <li>Configs: pure_market_making_config_map.py</li> <li>Maintainer: Hummingbot Foundation</li> </ul>","title":"\ud83d\udcc1 Strategy Info"},{"location":"strategies/pure-market-making/#strategy-tier","text":"<p></p> <p>Core strategies are maintained and continually improved by Hummingbot Foundation. Foundation staff focuses on testing these strategies and rewards users who answer questions related to these strategies on Discord.</p>","title":"\ud83c\udfc6 Strategy Tier"},{"location":"strategies/pure-market-making/#summary","text":"<p>This strategy allows Hummingbot users to run a market making strategy on a single trading pair on a <code>spot</code> exchanges.</p> <p>It places limit buy (bid) and limit sell (ask) orders on the order book at prices relative to the mid-price with spreads equal to <code>bid_spread</code> and <code>ask_spread</code>. Every <code>order_refresh_time</code> seconds, the strategy replaces existing orders with new orders with refreshed spreads and order amounts.</p> <p>In addition, the strategy contains a number of parameters to enable traders to control how orders are placed relative to their inventory position, use prices from a different order book, etc.</p>","title":"\ud83d\udcdd Summary"},{"location":"strategies/pure-market-making/#supported-exchange-types","text":"<ul> <li>SPOT CLOB CEX</li> </ul>","title":"\ud83c\udfe6 Supported Exchange Types"},{"location":"strategies/pure-market-making/#strategy-configs","text":"Parameter Type Default Prompt     <code>exchange</code> string  Enter your maker spot connector   <code>market</code> string  Enter the token trading pair you would like to trade on [exchange]   <code>bid_spread</code> decimal  How far away from the mid price do you want to place the first bid order?   <code>ask_spread</code> decimal  How far away from the mid price do you want to place the first ask order?   <code>minimum_spread</code> decimal -100 At what minimum spread should the bot automatically cancel orders?   <code>order_refresh_time</code> float  How often do you want to cancel and replace bids and asks (in seconds)?   <code>max_order_age</code> float 1800 How often do you want to cancel and replace bids and asks with the same price (in seconds)?   <code>order_refresh_tolerance_pct</code> decimal 0 Enter the percent change in price needed to refresh orders at each cycle   <code>order_amount</code> decimal  What is the amount of [base_asset] per order?   <code>price_ceiling</code> decimal -1 Enter the price point above which only sell orders will be placed   <code>price_floor</code> decimal -1 Enter the price below which only buy orders will be placed   <code>moving_price_band_enabled</code> bool False Would you like to enable moving price floor and ceiling? (Yes/No)   <code>price_ceiling_pct</code> decimal 1 Enter a percentage to the current price that sets the price ceiling. Above this price, only sell orders will be placed   <code>price_band_refresh_time</code> float 86400 After this amount of time (in seconds), the price bands are reset based on the current price   <code>ping_pong_enabled</code> bool False Would you like to use the ping pong feature and alternate between buy and sell orders after fills?   <code>order_levels</code> int 1 How many orders do you want to place on both sides?   <code>order_level_amount</code> decimal 0 How much do you want to increase or decrease the order size for each additional order?   <code>order_level_spread</code> decimal 0 Enter the price increments (as percentage) for subsequent orders?   <code>inventory_skew_enabled</code> bool False Would you like to enable inventory skew?   <code>inventory_target_base_pct</code> decimal 50 What is your target base asset percentage?   <code>inventory_range_multiplier</code> decimal 50 What is your tolerable range of inventory around the target, expressed in multiples of your total order size?   <code>inventory_price</code> decimal 1 What is the price of your base asset inventory?   <code>filled_order_delay</code> decimal 60 How long do you want to wait before placing the next order if your order gets filled (in seconds)?   <code>hanging_orders_enabled</code> bool False Do you want to enable hanging orders?   <code>hanging_orders_cancel_pct</code> decimal 10 At what spread percentage (from mid price) will hanging orders be canceled?   <code>order_optimization_enabled</code> bool False Do you want to enable best bid ask jumping?   <code>ask_order_optimization_depth</code> decimal 0 How deep do you want to go into the order book for calculating the top ask, ignoring dust orders on the top (expressed in base asset amount)?   <code>bid_order_optimization_depth</code> decimal 0 How deep do you want to go into the order book for calculating the top bid, ignoring dust orders on the top (expressed in base asset amount)?   <code>price_source</code> string current_market Which price source to use? (current_market/external_market/custom_api)   <code>price_type</code> string mid_price Which price type to use? (mid_price/last_price/last_own_trade_price/best_bid/best_ask/inventory_cost)   <code>price_source_exchange</code> string  Enter external price source exchange name   <code>price_source_market</code> string  Enter the token trading pair on [price_source_exchange]   <code>price_source_custom_api</code> string  Enter pricing API URL   <code>custom_api_update_interval</code> float 5 Enter custom API update interval in second (default: 5.0, min: 0.5)   <code>add_transaction_costs</code> bool False Do you want to add transaction costs automatically to order prices?   <code>take_if_crossed</code> bool False Do you want to take the best order if orders cross the orderbook?   <code>order_override</code> bool     <code>should_wait_order_cancel_confirmation</code> bool  Should the strategy wait to receive a confirmation for orders cancelation before creating a new set of orders? (Not waiting requires enough available balance) (Yes/No)   <code>bid_order_level_spreads</code> decimal  Enter the spreads (as percentage) for all bid spreads e.g 1,2,,3,4 to represent 1%,2%,3%,4%. The number of levels set will be equal to minimum lengths of bid_order_level_spreads and bid_order_level_amounts   <code>ask_order_level_spreads</code> decimal  Enter the spreads (as percentage) for all bid spreads e.g 1,2,,3,4 to represent 1%,2%,3%,4%. The number of levels set will be equal to minimum lengths of bid_order_level_spreads and bid_order_level_amounts   <code>bid_order_level_amounts</code> decimal  Enter the amount for all bid amounts. The number of levels set will be equal to the minimum length of bid_order_level_spreads and bid_order_level_amounts   <code>ask_order_level_amounts</code> decimal  Enter the amount for all bid amounts. The number of levels set will be equal to the minimum length of bid_order_level_spreads and bid_order_level_amounts","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/pure-market-making/#description","text":"<p>Trading logic</p>  <p>Approximation only</p> <p>The description below is a general approximation of this strategy. Please inspect the strategy code in Trading Logic above to understand exactly how it works.</p>","title":"\ud83d\udcd3 Description"},{"location":"strategies/pure-market-making/#architecture","text":"<p>The built-in pure market making strategy in Hummingbot periodically requests limit order proposals from configurable order pricing and sizing plugins, and also periodically refreshes the orders by cancelling existing limit orders.</p> <p>Here's a high level view of the logic flow inside the built-in pure market making strategy.</p> <p></p> <p>The pure market making strategy operates in a tick-by-tick manner. Each tick is typically 1 second, although it can be programmatically modified to longer or shorter durations.</p> <p>At each tick, the pure market making strategy would first query the order filter plugin whether to proceed or not. Assuming the answer is yes, then it'll query the order pricing and sizing plugins and calculate whether and what market making orders it should emit. At the same time, it'll also look at any existing limit orders it previously placed on the market and decide whether it should cancel those.</p> <p>The process repeats over and over at each tick, causing limit orders to be periodically placed and cancelled according to the proposals made by the order pricing and sizing plugins.</p>","title":"Architecture"},{"location":"strategies/pure-market-making/#refreshing-orders","text":"<p>For each limit order that was emitted by the pure market making strategy, an expiry timestamp would be generated for that order and the order will be tracked by the strategy. The time until expiry for new orders is configured via the <code>order_refresh_time</code> parameter.</p> <p>After an order's expiration time is reached, the pure market making strategy will create a cancel order proposal for that order.</p>","title":"Refreshing Orders"},{"location":"strategies/pure-market-making/#executing-order-proposals","text":"<p>After collecting all the order pricing, sizing and cancel order proposals from plugins and the internal refresh order logic - the pure market making strategy logic will merge all of the proposals and execute them.</p>","title":"Executing Order Proposals"},{"location":"strategies/pure-market-making/#example-order-flow","text":"<p>Below is a hypothetical example of how the pure market making strategy works for a few clock ticks.</p> <ul> <li>At clock tick <code>t</code>, there may be existing limit orders on both the bid and ask sides, and both have not yet expired. The proposed sizes for new orders will be 0, and there will be no cancel order proposals. So the strategy will do nothing for this clock tick.</li> <li>At clock tick <code>t+1</code>, the limit bid order has expired. The strategy will then generate a cancel order proposal for the expired bid order. The cancellation will then be send to the exchange and executed.</li> <li>At clock tick <code>t+2</code>, the strategy loops through its trading logic and notices there's no longer an order at the bid side. So it'll propose a non-zero order size for a new bid order. Let's assume the existing ask order hasn't expired yet, so no cancellation proposals will be generated at this clock tick. At the execution phase, the strategy will simply create a bid order calculated from the current market mid-price. Thus the bid order is refreshed.</li> </ul> <p>This cycle of order creation and order cancellation will repeat again and again for as long as the strategy is running. If a limit order is completely filled by a market order, the strategy will simply refresh it at the next clock tick.</p>","title":"Example Order Flow"},{"location":"strategies/pure-market-making/#i-more-resources","text":"<p> What is market making?: A blog post that explains the basics of market making.</p> <p> How to set up a simple pure market making bot on Binance: Learn how to create pure market making bot on Binance exchange.</p> <p> Trader Sharing: Pure Market Making with cgambit: Eagle Club member and top Hummingbot Miner earner <code>cgambit</code> shares his tips and insights on pure market making.</p> <p> Pure Market Making (PMM) Strategy: Use Pure Market Making Strategy but set dynamic bid/ask orders based on TradingView indicators which trigger alerts to Telegram and change the bid/ask orders using inventory skew or spreads-adjusted.</p> <p>Check out Hummingbot Academy for more resources related to this strategy and others!</p>","title":"\u2139\ufe0f More Resources"},{"location":"strategies/spot-perpetual-arbitrage/","text":"","title":"<code>spot_perpetual_arbitrage</code>"},{"location":"strategies/spot-perpetual-arbitrage/#strategy-info","text":"<ul> <li>Folder: /hummingbot/strategy/spot_perpetual_arbitrage</li> <li>Configs: spot_perpetual_arbitrage_config_map.py</li> <li>Maintainer: None</li> </ul>","title":"\ud83d\udcc1 Strategy Info"},{"location":"strategies/spot-perpetual-arbitrage/#strategy-tier","text":"<p></p> <p>Community strategies have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Strategy Tier"},{"location":"strategies/spot-perpetual-arbitrage/#summary","text":"<p>This strategy looks at the price on the spot connector and the price on the derivative connector. Then it calculates the spread between the two connectors. The key features for this strategy are <code>min_divergence</code> and <code>min_convergence</code>.</p> <p>When the spread between spot and derivative markets reaches a value above <code>min_divergence</code>, the first part of the operation will be executed, creating a buy/sell order on the spot connector, while opening an opposing long/short position on the derivative connector.</p> <p>With the position open, the bot will scan the prices on both connectors, and once the price spread between them reaches a value below <code>min_convergence</code>, the bot will close both positions.</p>","title":"\ud83d\udcdd Summary"},{"location":"strategies/spot-perpetual-arbitrage/#exchanges-supported","text":"<ul> <li>SPOT CLOB CEX</li> <li>PERP CLOB CEX</li> </ul>","title":"\ud83c\udfe6 Exchanges supported"},{"location":"strategies/spot-perpetual-arbitrage/#strategy-configs","text":"Parameter Type Default Prompt New? Prompt     <code>spot_connector</code> string  True Enter a spot connector (Exchange/AMM)   <code>spot_market</code> string  True Enter the token trading pair you would like to trade on [spot_connector]   <code>perpetual_connector</code> string  True Enter a derivative name (Exchange/AMM)   <code>perpetual_market</code> string  True Enter the token trading pair you would like to trade on [derivative_connector]   <code>order_amount</code> decimal  True What is the amount of [base_asset] per order?   <code>perpetual_leverage</code> int 1 True How much leverage would you like to use on the derivative exchange?   <code>min_opening_arbitrage_pct</code> decimal 1 True What is the minimum spread between the spot and derivative market price before starting an arbitrage?   <code>min_closing_arbitrage_pct</code> decimal 0.1 True What is the minimum spread between the spot and derivative market price before closing an existing arbitrage?   <code>spot_market_slippage_buffer</code> decimal 0.05 True How much buffer do you want to add to the price to account for slippage for orders on the spot market   <code>perpetual_market_slippage_buffer</code> decimal 0.05 True How much buffer do you want to add to the price to account for slippage for orders on the derivative market   <code>next_arbitrage_cycle_delay</code> float 120 False How long do you want the strategy to wait to cool off from an arbitrage cycle (in seconds)","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/spot-perpetual-arbitrage/#description","text":"<p>Trading logic</p>","title":"\ud83d\udcd3 Description"},{"location":"strategies/spot-perpetual-arbitrage/#i-more-resources","text":"<p> How to Use the New Spot-perpetual Arbitrage Strategy: Learn how the spot-perpetual arbitrage strategy works and how you can make use of it.</p> <p> Spot-Perpetual Arbitrage Strategy Demo | Hummingbot Live: A live demo on how you can set parameters to run the spot-perpetual arbitrage strategy</p> <p>Check out Hummingbot Academy for more resources related to this strategy and others!</p>","title":"\u2139\ufe0f More Resources"},{"location":"strategies/strategy-template/","text":"","title":"Strategy template"},{"location":"strategies/strategy-template/#strategy-template","text":"","title":"Strategy Template"},{"location":"strategies/strategy-template/#strategy-folder","text":"","title":"\ud83d\udcc1 Strategy folder"},{"location":"strategies/strategy-template/#summary","text":"","title":"\ud83d\udcdd Summary"},{"location":"strategies/strategy-template/#how-it-works","text":"","title":"How it works"},{"location":"strategies/strategy-template/#exchanges-supported","text":"","title":"\ud83c\udfe6 Exchanges supported"},{"location":"strategies/strategy-template/#maintenance","text":"<ul> <li>Release added: </li> <li>Maintainer: </li> </ul>","title":"\ud83d\udc77 Maintenance"},{"location":"strategies/strategy-template/#strategy-configs","text":"<p>Config map </p>     Parameter Type Default Prompt New? Prompt","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/strategy-template/#description","text":"<p>Trading logic</p>   <p>Approximation only</p> <p>The description below is a general approximation of this strategy. Please inspect the strategy code in Trading Logic above to understand exactly how it works.</p>","title":"\ud83d\udcd3 Description"},{"location":"strategies/strategy-template/#architecture","text":"","title":"Architecture"},{"location":"strategies/strategy-template/#i-more-resources","text":"","title":"\u2139\ufe0f More Resources"},{"location":"strategies/twap/","text":"","title":"<code>twap</code>"},{"location":"strategies/twap/#strategy-info","text":"<ul> <li>Folder: /hummingbot/strategy/twap</li> <li>Configs: twap_config_map.py</li> <li>Maintainer: None</li> </ul>","title":"\ud83d\udcc1 Strategy Info"},{"location":"strategies/twap/#strategy-tier","text":"<p></p> <p>Community strategies have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Strategy Tier"},{"location":"strategies/twap/#summary","text":"<p>This strategy is a simple bot that places a series of limit orders on an exchange, while allowing users to control order size, price, and duration.</p> <p>We recommend this strategy as a starting point for developers looking to build their own strategies, and it is used as reference for articles in Developer Reference: Strategies.</p>","title":"\ud83d\udcdd Summary"},{"location":"strategies/twap/#exchanges-supported","text":"<ul> <li>SPOT CLOB CEX</li> </ul>","title":"\ud83c\udfe6 Exchanges supported"},{"location":"strategies/twap/#strategy-configs","text":"Parameter Type Default Prompt New? Prompt     <code>connector</code> string  True Enter the name of spot connector   <code>trading_pair</code> string  True Enter the token trading pair you would like to trade on <code>[connector]</code>   <code>trade_side</code> string buy True What operation will be executed? (buy/sell)   <code>target_asset_amount</code> decimal 1 True What is the total amount of [base_token] to be traded?   <code>order_step_size</code> decimal 1 True What is the amount of each individual order (denominated in the base asset, default is 1)   <code>order_price</code> decimal  True What is the price for the limit orders?   <code>order_delay_time</code> decimal 10 True How many seconds do you want to wait between each individual order?   <code>cancel_order_wait_time</code> decimal 60 True How long do you want to wait before cancelling your limit order (in seconds).   <code>is_time_span_execution</code> bool False False Do you want to specify a start time and an end time for the execution?   <code>start_datetime</code> decimal  False Please enter the start date and time   <code>end_datetime</code> decimal  False Please enter the end date and time","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/twap/#description","text":"<p>Trading logic</p>  <p>Approximation only</p> <p>The description below is a general approximation of this strategy. Please inspect the strategy code in Trading Logic above to understand exactly how it works.</p>  <p>The TWAP strategy is a common algorithmic execution strategy used for splitting up large orders over time. Specifically, the TWAP strategy helps traders minimize slippage when buying or selling large orders. These features make the strategy more useful to traders and will help when creating future, more complex strategies:</p> <ul> <li>Incrementing / maintaining states over clock ticks</li> <li>Quantizing (rounding down to nearest tradable value) order size</li> <li>Dividing an order into segments</li> <li>Incorporating time delays between segmented orders</li> </ul>","title":"\ud83d\udcd3 Description"},{"location":"strategies/twap/#overview","text":"<p>The TWAP strategy divides a large user order into chunks according to the following user configurations:</p> <ul> <li>Total order size</li> <li>number of individual orders</li> <li>time delay between orders</li> </ul> <p></p> <p>The orders are then split into tradable (quantized) amounts and executed sequentially with the indicated time delay in between orders. There is no time delay before the first order. Because only one order is placed in a clock tick, a state machine is needed to emit multiple orders over different clock ticks. To see the executed orders, type history into the command prompt.</p>","title":"Overview"},{"location":"strategies/twap/#config","text":"<p>Here are the additional user configurable parameters for the TWAP strategy (fields are added to <code>config_map</code> file):</p> <ul> <li><code>time_delay</code> : Change the question to ask for the number of seconds to delay each individual order. (e.g. How many seconds do you want to wait between each individual order?)</li> <li><code>num_individual_orders</code> : a new field added to the config map. It should ask for the number of individual orders that an order should be split up into. (e.g.Into how many individual orders do you want to split this order?)</li> </ul>","title":"Config"},{"location":"strategies/twap/#strategy","text":"<p>The TWAP strategy logic is trying to split a large order into smaller ones over time, and it does that by maintaining important information about the state when processing orders by adding state variables.</p> <p>Custom state variables can be added to the strategy by setting variables in the <code>__init__</code> function.</p> <ul> <li><code>self._quantity_remaining</code> : Indicates the quantity of order left to be placed as individual orders. This state variable is updated after each order is placed and persisted throughout until the order is done processing.</li> <li><code>self._first_order</code> : Indicates whether the current individual order is the first order.</li> </ul> <p></p> <p>TWAP processes orders when there is a remaining order quantity &amp; the specified time_delay has passed. Specifically, some of the key elements in utilizing the remaining order quantity and time_delay are detailed below:</p> <ul> <li>If self._quantity_remaining is greater than 0 place an order</li> <li>If <code>self._first_order</code> is true, we want to place order as soon as <code>self._current_timestamp &gt; self._previous_timestamp</code> we don't have a time delay before the first order</li> <li>If it isn't the first order, check that <code>self._current_timestamp &gt; self._previous_timestamp + self._time_delay</code></li> <li>Once order is placed, update self._quantity_remaining by subtracting the amount of the order just placed <code>curr_order_amount</code> : Either (total order amount)/(number of orders) or <code>self._quantity_remaining</code> depending on which is smaller</li> </ul>","title":"Strategy"},{"location":"strategies/twap/#demo","text":"<p>Warning</p> <p>This demo is for instructional and educational purposes only. Any parameters used are purely for demo purposes only. We are not giving any legal, tax, financial, or investment advice. Every user is responsible for their use and configuration of Hummingbot.</p>","title":"\ud83d\udcfa Demo"},{"location":"strategies/twap/#i-more-resources","text":"<p> Strategy coding for dummies: This article is a blog post submission from our of our users. It is not directly related to TWAP strategy, but it demos how you can write a custom script for cross exchange market making strategy</p> <p>Check out Hummingbot Academy for more resources related to this strategy and others!</p>","title":"\u2139\ufe0f More Resources"},{"location":"strategies/uniswap-v3-lp/","text":"","title":"<code>uniswap_v3_lp</code>"},{"location":"strategies/uniswap-v3-lp/#strategy-info","text":"<ul> <li>Folder: /hummingbot/strategy/uniswap_v3_lp</li> <li>Configs: uniswap_v3_lp_config_map.py</li> <li>Maintainer: None</li> </ul>","title":"\ud83d\udcc1 Strategy Info"},{"location":"strategies/uniswap-v3-lp/#strategy-tier","text":"<p></p> <p>Community strategies have passed the Minimum Voting Power Threshold in the latest Poll and are included in each monthly release. They are not maintained by Hummingbot Foundation but may be maintained by a community member.</p>","title":"\ud83c\udfc6 Strategy Tier"},{"location":"strategies/uniswap-v3-lp/#summary","text":"<p>This strategy creates and maintains Uniswap positions as the market price changes in order to continue providing liquidity. Currently, it does not remove or update positions.</p>  <p>Note</p> <p>This is a proof-of-concept strategy that demonstrates how to dynamically maintain Uniswap-V3 positions as market prices changes. More features will be added over time based on community feedback.</p>","title":"\ud83d\udcdd Summary"},{"location":"strategies/uniswap-v3-lp/#exchanges-supported","text":"<ul> <li>UNISWAP</li> </ul>","title":"\ud83c\udfe6 Exchanges supported"},{"location":"strategies/uniswap-v3-lp/#strategy-configs","text":"Parameter Type Default Prompt New? Prompt     <code>market</code> string  True Enter the trading pair you would like to provide liquidity on [connector]   <code>fee_tier</code> string  True On which fee tier do you want to provide liquidity on? (LOW/MEDIUM/HIGH)   <code>buy_spread</code> decimal 1.00 True How far away from the mid price do you want to place the buy position? (Enter 1 to indicate 1%)   <code>sell_spread</code> decimal 1.00 True How far away from the mid price do you want to place the sell position? (Enter 1 to indicate 1%)   <code>base_token_amount</code> decimal  True How much of your base token do you want to use for the buy position?   <code>quote_token_amount</code> decimal  True How much of your quote token do you want to use for the sell position?   <code>min_profitability</code> decimal  True What is the minimum profitability for each position is be adjusted? (Enter 1 to indicate 1%)   <code>use_volatility</code> bool False False Do you want to use price volatility to adjust spreads? (Yes/No)   <code>volatility_period</code> int 1 False Enter how long (in hours) do you want to use for price volatility calculation   <code>volatility_factor</code> decimal 1.00 False Enter the multiplier applied to price volatility","title":"\ud83d\udee0\ufe0f Strategy configs"},{"location":"strategies/uniswap-v3-lp/#description","text":"<p>Trading logic</p>  <p>Approximation only</p> <p>The description below is a general approximation of this strategy. Please inspect the strategy code in Trading Logic above to understand exactly how it works.</p>","title":"\ud83d\udcd3 Description"},{"location":"strategies/uniswap-v3-lp/#starting","text":"<ol> <li>The bot will look for information about the pool, and if it is a valid pool. If the pool doesn't exist, warn the user and stop the strategy</li> <li>Fetch the current mid price of the pool (<code>last_price</code>)</li> <li>If <code>use_volatility</code> is True, the bot will calculate the price volatility used to widen spreads</li> <li>If the pool is valid, the bot will create two starting positions:<ul> <li>The SELL position with:<ul> <li>Amount of tokens added to the position = <code>base_token_amount</code></li> <li><code>upper_price</code> = <code>(1 + sell_spread) * last_price</code></li> <li><code>lower_price</code> = <code>last_price</code></li> </ul> </li> <li>The BUY position with:<ul> <li>Amount of tokens added to the position = <code>quote_token_amount</code></li> <li><code>upper_price</code> = <code>last_price</code></li> <li><code>lower_price</code> = <code>(1 - buy_spread) * last_price</code></li> </ul> </li> </ul> </li> </ol> <p></p> <p>The bot maintains a variable <code>total_position_range</code> that defines the total price range, comprised of <code>upper_price</code> and <code>lower_price</code>, where the bot is providing liquidity.</p>","title":"Starting"},{"location":"strategies/uniswap-v3-lp/#running","text":"<p>Each tick, the bot monitors the pool mid price (<code>last_price</code>) and compare it to the bounds of <code>total_position_range</code>. It will adjust the position under the following scenarios:</p> <p><code>last_price</code> is higher than <code>upper_price</code> of <code>total_position_range</code></p> <ol> <li>Create a new SELL liquidity position, using the following values:<ul> <li>Amount of tokens of the new position = <code>base_token_amount</code></li> <li>Top price bound = <code>(1 + sell_spread) * last_price</code></li> <li>Lower price bound = <code>last_price</code></li> </ul> </li> <li>Update <code>total_position_range</code>: <code>upper_price = (1 + sell_spread) * last_price</code></li> </ol> <p></p> <p><code>last_price</code> is lower than <code>lower_price</code> of <code>total_position_range</code></p> <ol> <li>Create a new BUY liquidity position, using the following values:<ul> <li>Amount of tokens of the new position = <code>quote_token_amount</code></li> <li>New position upper price = <code>last_price</code></li> <li>New position lower price = <code>(1 - buy_spread) * last_price</code></li> </ul> </li> <li>Update <code>total_position_range</code>: <code>lower_price = (1 - buy_spread) * last_price</code></li> </ol> <p></p>","title":"Running"},{"location":"strategies/uniswap-v3-lp/#important-notes","text":"<ul> <li>Currently, the strategy does not remove existing positions. The user should do it manually through the Uniswap interace (https://app.uniswap.org/#/pool).</li> <li>The <code>status</code> command shows the current profitability of each position, using the <code>quote</code> asset as reference</li> </ul>","title":"Important Notes"},{"location":"strategies/uniswap-v3-lp/#i-more-resources","text":"<p> Uniswap V3 strategy preview | Hummingbot Live: Demo of the latest iteration of Uniswap V3 strategy</p> <p>Check out Hummingbot Academy for more resources related to this strategy and others!</p>","title":"\u2139\ufe0f More Resources"},{"location":"strategy-configs/","text":"<p>Below are configurable variables that are available in the Pure Market Making strategy. They give you more control over how your market making bot behaves.</p>","title":"PMM Configs"},{"location":"strategy-configs/#how-to-configure","text":"<p>There are two ways to configure these parameters:</p> <ol> <li>Run <code>config</code> to see the current strategy settings. Run command <code>config [parameter_name]</code> to reconfigure the parameter.</li> <li>Outside of the Hummingbot client, you can edit the strategy configuration file directly using a text editor and then import it later.</li> </ol>","title":"How to configure"},{"location":"strategy-configs/#list-of-configs","text":"Feature Parameter Prompt Definition     Order Levels <code>order_levels</code> <code>How many orders do you want to place on both sides?</code> The number of order levels to place for each side of the order book.   Order Levels <code>order_level_amount</code> <code>How much do you want to increase or decrease the order size for each additional order?</code> The size can either increase(if set to a value greater than zero) or decrease(if set to a value less than zero) for subsequent order levels after the first level.   Order Levels <code>order_level_spread</code> <code>Enter the price increments (as percentage) for subsequent orders?</code> The incremental spread increases for subsequent order levels after the first level.   Inventory Skew <code>inventory_skew_enabled</code> <code>Would you like to enable inventory skew? (Yes/No)</code> Allows the user to set and maintain a target inventory split between base and quote assets.   Inventory Skew <code>inventory_target_base_pct</code> <code>On [exchange], you have [base_asset_balance] and [quote_asset_balance]. By market value, your current inventory split is [base_%_ratio] and [quote_%_ratio]. Would you like to keep this ratio?</code> Target amount held of the base asset, expressed as a percentage of the total base and quote asset value.   Inventory Skew <code>inventory_range_multiplier</code> <code>What is your tolerable range of inventory around the target, expressed in multiples of your total order size?</code> This expands the range of tolerable inventory level around your target base percent, as a multiple of your total order size. Larger values expand this range.   Filled Order Delay <code>filled_order_delay</code> <code>How long do you want to wait before placing the next order if your order gets filled (in seconds)?</code> How long to wait before placing the next set of orders in case at least one of your orders gets filled.   Hanging Orders <code>hanging_orders_enabled</code> <code>Do you want to enable hanging orders? (Yes/No)</code> When enabled, the orders on the side opposite to the filled orders remains active.   Hanging Orders <code>hanging_orders_cancel_pct</code> <code>At what spread percentage (from mid price) will hanging orders be canceled?</code> Cancels the hanging orders when their spread goes above this value.   Minimum Spread <code>minimum_spread</code> <code>At what minimum spread should the bot automatically cancel orders</code> If the spread of any active order fall below this param value, it will be automatically cancelled.   Order Refresh Tolerance <code>order_refresh_tolerance_pct</code> <code>Enter the percent change in price needed to refresh orders at each cycle</code> The spread (from mid price) to defer order refresh process to the next cycle.   Price Band <code>price_ceiling</code> <code>Enter the price point above which only sell orders will be placed</code> Place only sell orders when mid price goes above this price.   Price Band <code>price_floor</code> <code>Enter the price below which only buy orders will be placed</code> Place only buy orders when mid price falls below this price.   Ping Pong <code>ping_pong_enabled</code> <code>Would you like to use the ping pong feature and alternate between buy and sell orders after fills?</code> Whether to alternate between buys and sells.   Order Optimization <code>order_optimization_enabled</code> <code>Do you want to enable best bid ask jumping? (Yes/No)</code> Allows your bid and ask order prices to be adjusted based on the current top bid and ask prices in the market.   Order Optimization <code>ask_order_optimization_depth</code> <code>How deep do you want to go into the order book for calculating the top ask, ignoring dust orders on the top (expressed in base asset amount)?</code> The depth in base asset amount to be used for finding top bid ask.   Order Optimization <code>bid_order_optimization_depth</code> <code>How deep do you want to go into the order book for calculating the top bid, ignoring dust orders on the top (expressed in base asset amount)?</code> The depth in base asset amount to be used for finding top bid.   Add Transaction Costs <code>add_transaction_costs</code> <code>Do you want to add transaction costs automatically to order prices? (Yes/No)</code> Whether to enable adding transaction costs to order price calculation.   External Price Source <code>price_source_enabled</code> <code>Would you like to use an external pricing source for mid-market price? (Yes/No)</code> When enabled, allows users to use an external pricing source for the mid price.   External Price Source <code>price_source_type</code> <code>Which type of external price source to use? (exchange/custom_api)</code> The type of external pricing source.   External Price Source <code>price_source_exchange</code> <code>Enter external price source exchange name</code> Name of exchange to be used for external pricing source.   External Price Source <code>price_source_market</code> <code>Enter the token pair on [price_source_exchange]</code> The trading pair for the price source exchange.   External Price Source <code>price_source_custom</code> <code>Enter pricing API URL</code> An external API that returns price.   External Price Source <code>take_if_crossed</code> <code>Do you want to let your maker orders match and fill if they cross the order book?</code> Take order if they cross orderbook when external price source is enabled.","title":"List of configs"},{"location":"strategy-configs/add-transaction-costs/","text":"<p>Updated as of <code>v0.28.0</code></p> <p>This feature lets you take into account the transaction cost incurred on the exchange from bid and ask orders. For a bid order, it reduces the bid order price by the fee. For the ask order, it reduces the price by the fee. This allows you to consider the transaction cost to profit (or not incur a loss).</p>  <p>Note</p> <p>This puts your order prices further away from the mid-price.</p>","title":"Adding Transaction Costs"},{"location":"strategy-configs/add-transaction-costs/#add_transaction_costs","text":"<p>Whether to enable adding transaction costs to order price calculation.</p> <p> Prompt: </p> <pre><code>Do you want to add transaction costs automatically to order prices? (Yes/No)\n&gt;&gt;&gt; Yes\n</code></pre>","title":"<code>add_transaction_costs</code>"},{"location":"strategy-configs/add-transaction-costs/#how-it-works","text":"<p>When the <code>add_transaction_costs</code> parameter is set to True, the client adds the transaction costs to the prices and adjusts the price proposal.</p> <p>Type <code>config add_transaction_costs</code> to set the value for the parameter. If you respond <code>Yes</code>, the parameter is set to <code>True</code>, and if you type <code>No</code>, the parameter is set to <code>False</code>. This parameter is set to <code>False</code> by default.</p> <p>Note that we currently display warnings if the adjusted price post adding the transaction costs is 10% away from the original price. If the buy price with the transaction cost is zero or negative, it is not profitable to place orders, and orders will not be placed.</p>","title":"How it works"},{"location":"strategy-configs/add-transaction-costs/#order-price-calculation-with-transaction-cost","text":"<p>Below, <code>fee_pct</code> refers to the percentage maker fees per order (generally common in Centralized exchanges), while <code>fixed_fees</code> refers to the flat fees (generally common in Decentralized exchanges).</p>","title":"Order price calculation with transaction cost"},{"location":"strategy-configs/add-transaction-costs/#calculating-the-bid-order-price","text":"<p></p>","title":"Calculating the bid order price"},{"location":"strategy-configs/add-transaction-costs/#calculating-the-ask-order-price","text":"<p></p>","title":"Calculating the ask order price"},{"location":"strategy-configs/add-transaction-costs/#example-when-transaction-cost-is-important","text":"<p>You are market making for the <code>ETH-USD</code> pair. The <code>order_amount</code> parameter is set to 1, and the <code>bid_spread</code> and <code>ask_spread</code> as set to 1 (representing 1%). Suppose the mid-market price of ethereum and USD is $200. When the <code>add_transaction_costs</code> is set to <code>False</code>, the bid order price is 1% below the mid-market price, and the ask order price is 1% above the mid-market price, $198 and $202, respectively. Suppose the fee percentage (<code>fee_pct</code>) is 1% and the fixed fee (<code>fixed_fees</code>) is $0.50 for each transaction. The spread above does not take into account these transaction costs and could hurt your profit. Your potential profit without taking into account the fees is $4. The fees incurred could be 1 dollar plus 1% times the value traded 1% x (199 + 200), which equals $3.99. Instead of profiting $4, you are losing $4 - ( $3.99 + $1) = - $0.99. When the <code>add_transaction_costs</code> is set to <code>True</code>, (using the formula above), the ask order price is $203, and the bid order price is $197. The profit before the transaction fees is $6. The transaction fees amount to $1 + .01 ( $197 + $203) = $5.</p> <p>Thus, your profit is $1. Here, adding the transaction costs to the calculations was the difference between a loss and a profit.</p>","title":"Example - when transaction cost is important"},{"location":"strategy-configs/external-price-source/","text":"<p>Updated as of <code>v0.36.0</code></p> <p>By default, Hummingbot uses the order book you're trading in to generate the mid price (between the top bid and the top ask) as a starting price to calculate maker order prices.</p> <p>With this feature, users have the option to choose a different price reference for your orders such as last trade price, last own trade price, best bid price, best ask price and inventory cost. Users can also use a different order book such as an external exchange supported by Hummingbot or a custom API.</p>","title":"External Pricing Source Configuration"},{"location":"strategy-configs/external-price-source/#how-it-works","text":"<p>In a situation where the calculation of maker order prices from external sources would result in the order matching any existing orders on the order book, such order will be ignored unless <code>take_if_crossed</code> parameter is enabled.</p>","title":"How it works"},{"location":"strategy-configs/external-price-source/#price-source-current-market","text":"<p>By default, <code>price_source</code> is set to <code>current_market</code>.</p> <pre><code>               exchange: binance\n                 market: BTC-USDC\n             bid_spread: 1\n             ask_spread: 1\n</code></pre> <pre><code>           price_source: current_market\n             price_type: mid_price\n  price_source_exchange: None\n    price_source_market: None\n        take_if_crossed: None\nprice_source_custom_api: None\n</code></pre>","title":"Price source: current market"},{"location":"strategy-configs/external-price-source/#price-source-external-market","text":"<p>Users can also use an external market from another exchange supported by Hummingbot as the price reference when creating orders.</p> <p>In the example below, we're trading on BTC-USDC pair in Binance while using the mid price of BTC-USDT market from Crypto.com exchange.</p> <pre><code>               exchange: binance\n                 market: BTC-USDC\n             bid_spread: 1\n             ask_spread: 1\n</code></pre> <pre><code>           price_source: external_market\n             price_type: mid_price\n  price_source_exchange: crypto_com\n    price_source_market: BTC-USDT\n        take_if_crossed: True\nprice_source_custom_api: None\n</code></pre> <p>Run <code>config price_type</code> command to change the price reference to <code>last_price</code>, <code>last_own_trade_price</code>, <code>best_bid</code>, and <code>best_ask</code>. The parameter <code>take_if_crossed</code> is optional as this only allows users to take existing orders from the order book if there is an existing match.</p>  <p>Note</p> <p>Currently, the external price source cannot be the same as the maker exchange (i.e. if the bot is trading on Binance, the <code>price_source_exchange</code> cannot be Binance)</p>","title":"Price source: external market"},{"location":"strategy-configs/external-price-source/#price-source-custom-api","text":"<p>Custom API is mostly used by advanced users or developers for using a different price reference. Take note that <code>price_source</code> should be set to <code>custom_api</code> with the API URL indicated in <code>price_source_custom_api</code>.</p> <pre><code>           price_source: custom_api\n             price_type: mid_price\n  price_source_exchange: None\n    price_source_market: None\n        take_if_crossed: None\nprice_source_custom_api: https://www.your-custom-api-url.com/\n</code></pre> <p>Custom API Output Required Parameters</p> <p>The API GET request should return a decimal number corresponding to a market price for the asset pair you are trading on.</p> <p>Sample API Output:</p> <pre><code>207.8\n</code></pre>","title":"Price source: custom API"},{"location":"strategy-configs/external-price-source/#when-to-use-an-external-price-source","text":"<p>External price source is valuable when your bot is market making for a relatively illiquid trading pair, but a more liquid pair with the same underlying exposure is available on a different exchange.</p> <p>Suppose we are market making for the <code>ETH-USDT</code> trading pair. The exchange we are trading on, denoted as Exchange A, has the top bid order at $198 and the top ask order at $202, so the mid price is $200.</p> <p>Let's suppose there is Exchange B with an <code>ETH-USD</code> trading pair. That pair has a top bid order at $200 while the top ask order is $202, so the mid price is $201. These discrepancies often happens between different exchanges as market conditions change. Some exchanges may react more slowly or quickly to market changes due to differences in the trading pair, liquidity, geography.</p> <p>If you believe that <code>ETH-USD</code> on Exchange B is more liquid and responds more quickly to market information than <code>ETH-USDT</code> on Exchange A, you may want to market make on Exchange A but use <code>ETH-USD</code> on Exchange B as the price source. This helps you position your orders based on where the market might go in the future.</p>","title":"When to use an external price source"},{"location":"strategy-configs/external-price-source/#taking-crossed-orders","text":"<p>When using an external price source, an order may result in a crossed market. This means the order on the current exchange is placed with a price that matches an existing order in the book. Enabling <code>take_if_crossed</code> parameter allows the strategy to fill the matching maker order.</p> <p>In certain cases, this behavior may be desirable even if the fee is higher because of the likely future price mitigation. This feature is only available when an external price source is used. When enabled, Hummingbot uses <code>LIMIT</code> order instead of <code>LIMIT_MAKER</code> order type.</p>","title":"Taking crossed orders"},{"location":"strategy-configs/external-price-source/#relevant-parameters","text":"","title":"Relevant parameters"},{"location":"strategy-configs/external-price-source/#price_source","text":"<p>Determines which market to be used as price reference when creating orders.</p> <p> Prompt: </p> <pre><code>Which price source to use? (current_market/external_market/custom_api)\n&gt;&gt;&gt; current_market\n</code></pre>","title":"<code>price_source</code>"},{"location":"strategy-configs/external-price-source/#price_type","text":"<p>Price type to be used as price reference when creating orders.</p> <p> Prompt: </p> <pre><code>Which price type to use? (mid_price/last_price/last_own_trade_price/best_bid/best_ask/inventory_cost)\n&gt;&gt;&gt; mid_price\n</code></pre> <p><code>mid_price</code></p> <p>Hummingbot uses the mid price of the market's order book in the current exchange as reference e.g. if your bid/ask spread is set to 1, your orders will be created 1% away from the mid price. Mid price - is calculated (market best ask + market best bid) / 2.</p> <pre><code>           price_source: current_market\n             price_type: mid_price\n</code></pre> <p><code>last_price</code></p> <p>Last price is the most recent price that the asset has been traded.</p> <pre><code>           price_source: current_market\n             price_type: last_price\n</code></pre> <p><code>last_own_trade_price</code></p> <p>The bot uses the last own trade price as a price reference when creating orders.</p> <pre><code>           price_source: current_market\n             price_type: last_own_trade_price\n</code></pre> <p><code>best_bid</code></p> <p>When <code>price_type</code> is set to <code>best_bid</code>, the price will be based on the best bid in the order book.</p> <pre><code>           price_source: current_market\n             price_type: best_bid\n</code></pre> <p><code>best_ask</code></p> <p>When <code>price_type</code> is set to <code>best_ask</code>, the price will be based on the best ask in the order book.</p> <pre><code>           price_source: current_market\n             price_type: best_ask\n</code></pre> <p><code>inventory_cost</code></p> <p>The bot will calculate the average cost of your inventory every time a buy order is filled, and all sell orders will be created at <code>inventory_cost</code> + <code>ask_spread</code>. When using inventory_cost, you would need to set inventory price before you start your Hummingbot using this command <code>config inventory_price</code></p> <pre><code>           price_source: current_market\n             price_type: inventory_cost\n</code></pre>","title":"<code>price_type</code>"},{"location":"strategy-configs/external-price-source/#price_source_exchange","text":"<p>Name of exchange to be used for external pricing source.</p> <p> Prompt: </p> <pre><code>Enter external price source exchange name\n&gt;&gt;&gt;\n</code></pre>","title":"<code>price_source_exchange</code>"},{"location":"strategy-configs/external-price-source/#price_source_market","text":"<p>The trading pair for the price source exchange.</p> <p> Prompt: </p> <pre><code>Enter the token pair on [price_source_exchange]\n&gt;&gt;&gt;\n</code></pre>","title":"<code>price_source_market</code>"},{"location":"strategy-configs/external-price-source/#take_if_crossed","text":"<p>Take order if they cross orderbook when external price source is enabled.</p> <p> Prompt: </p> <pre><code>Do you want to take the best order if orders cross the orderbook? (Yes/No)\n&gt;&gt;&gt; Yes\n</code></pre>","title":"<code>take_if_crossed</code>"},{"location":"strategy-configs/external-price-source/#price_source_custom_api","text":"<p>An external API that returns price.</p> <p> Prompt: </p> <pre><code>Enter pricing API URL\n&gt;&gt;&gt;\n</code></pre>","title":"<code>price_source_custom_api</code>"},{"location":"strategy-configs/filled-order-delay/","text":"<p>By default, Hummingbot places orders as soon as there are no active orders; i.e., Hummingbot immediately places a new order to replace a filled order. If there is a sustained movement in the market in any one direction for some time, there is a risk of continued trading in that direction: For example, continuing to buy and accumulate base tokens in the case of a prolonged downward move or continuing to sell in the case of a prolonged upward move.</p> <p>The <code>filled_order_delay</code> parameter allows for a delay when placing a new order in the event of an order being filled, which will help mitigate the above scenarios.</p>","title":"Filled Order Delay"},{"location":"strategy-configs/filled-order-delay/#filled_order_delay","text":"<p>How long to wait before placing the next set of orders in case at least one of your orders gets filled.</p> <p>For example, with a filled_order_delay = 300 when an order created by the bot is filled, the next pair of orders will only be created 300 seconds later.</p> <p> Prompt: </p> <pre><code>How long do you want to wait before placing the next order if your order gets filled (in seconds)?\n&gt;&gt;&gt; 300\n</code></pre>","title":"<code>filled_order_delay</code>"},{"location":"strategy-configs/filled-order-delay/#how-it-works","text":"<p>This helps to manage periods when prices are trending. For example, in the diagram below, in a case when prices are trending down, bid orders keep getting filled once orders are refreshed.</p> <p></p> <p>If this is repeated and continues to go on, the market maker could quickly end up accumulating large amounts of the asset within a matter of just a few order refresh cycles. In the example above, the trader has bought assets 5 times.</p> <p>By introducing a delay between filled orders and placing new orders, this spaces out orders and dampens the potential accumulation of assets, allowing for some time for price trends to stabilize.</p> <p></p> <p>You can see above, since the bid order in period 1 was filled, the bot didn\u2019t place orders in periods 2, 3, and 4. So in this downward price trend, the bot only bought twice (periods 1 and 5) whereas when filled order delay was not enabled, the bot would have bought in all five periods.</p> <p>As an example, our buy and sell orders are created at exactly <code>00:00:00</code>.</p> <pre><code>00:00:00 - (BTCUSDT) Creating 1 bid order at ['0.005 BTC, 9026.63 USDT']\n00:00:00 - (BTCUSDT) Creating 1 ask order at ['0.005 BTC, 9072.081 USDT']\n</code></pre> <pre><code>Markets:\n  Exchange   Market  Best Bid Price  Best Ask Price  Mid Price\n   binance  BTCUSDT         9071.79         9072.13    9071.9\n\nAssets:\n                            BTC     USDT\n   Total Balance           0.05      500\n   Available Balance      0.045 454.8668\n   Current Value (USDT) 453.598      500\n   Current %              47.6%    52.4%\n\nOrders:\n   Level  Type    Price Spread Amount (Orig)  Amount (Adj)       Age\n       1  sell 9072.081  0.01%         0.005         0.005  00:00:01\n       1   buy  9026.63  0.50%         0.005         0.005  00:00:01\n</code></pre> <p>When one order gets filled, it will wait for <code>filled_order_delay</code> before creating new sets of orders. The remaining order will be cancelled based on order refresh time. See examples in the next sections.</p>","title":"How it works"},{"location":"strategy-configs/filled-order-delay/#filled-order-delay-with-shorter-order-refresh-time","text":"<pre><code>- order_refresh_time: 30.0\n- filled_order_delay: 60.0\n</code></pre> <p>Let's say our sell order was filled at <code>00:00:10</code>.</p> <pre><code>00:00:10 - (BTCUSDT) Maker sell order of 0.0050000 BTC filled.\n00:00:10 - (BTCUSDT) Maker sell order (0.0050000 BTC @ 9072.0810000000 USDT)\n                     has been completely filled.\n</code></pre> <p>The unfilled order will be cancelled after 30 seconds from the time it was created. Which means from <code>00:00:30</code> until <code>00:01:09</code> you won't see any active orders.</p> <pre><code>00:00:30 - (BTCUSDT) Cancelling the buy limit order\n</code></pre> <pre><code>Markets:\n  Exchange   Market  Best Bid Price  Best Ask Price  Mid Price\n   binance  BTCUSDT         9073.91         9074.37    9074.14\n\nAssets:\n                             BTC     USDT\n   Total Balance           0.045 545.3783\n   Available Balance       0.045 545.3783\n   Current Value (USDT) 408.3363 545.3783\n   Current %               42.8%    57.2%\n\nNo active maker orders.\n</code></pre> <pre><code>00:01:10 - (BTCUSDT) Creating 1 bid order at ['0.005 BTC, 9047.709 USDT']\n00:01:10 - (BTCUSDT) Creating 1 ask order at ['0.005 BTC, 9093.266 USDT']\n</code></pre>","title":"Filled order delay with shorter order refresh time"},{"location":"strategy-configs/filled-order-delay/#filled-order-delay-with-longer-order-refresh-time","text":"<pre><code>- order_refresh_time: 120.0\n- filled_order_delay: 60.0\n</code></pre> <p>Using the same scenario, our sell order was filled at <code>00:00:10</code> and leaves the buy order active.</p> <pre><code>00:00:10 - (BTCUSDT) Maker sell order of 0.0050000 BTC filled.\n00:00:10 - (BTCUSDT) Maker sell order (0.0050000 BTC @ 9072.0810000000 USDT)\n                     has been completely filled.\n</code></pre> <pre><code>Markets:\n  Exchange   Market  Best Bid Price  Best Ask Price  Mid Price\n   binance  BTCUSDT          9071.8         9072.83   9072.315\n\nAssets:\n                             BTC     USDT\n   Total Balance           0.045 545.3604\n   Available Balance       0.045 500.2273\n   Current Value (USDT) 408.2542 545.3604\n   Current %               42.8%    57.2%\n\nOrders:\n   Level Type   Price Spread Amount (Orig)  Amount (Adj)       Age\n       1  buy 9026.63  0.50%         0.005         0.005  00:00:11\n</code></pre> <p>Notice the timestamps. Since the refresh time is longer than the filled order delay, the unfilled order will remain active until it's time to create new sets of orders.</p> <pre><code>00:01:09 - (BTCUSDT) Cancelling the buy limit order\n</code></pre> <pre><code>00:01:10 - (BTCUSDT) Creating 1 bid order at ['0.005 BTC, 9047.709 USDT']\n00:01:10 - (BTCUSDT) Creating 1 ask order at ['0.005 BTC, 9093.266 USDT']\n</code></pre>","title":"Filled order delay with longer order refresh time"},{"location":"strategy-configs/hanging-orders/","text":"<p>Updated as of <code>v0.28.0</code></p> <p>This feature keeps orders \"hanging\" (or not cancelled and remaining on the order book) if a matching order has been filled on the other side of the order book (bid vs. ask order books).</p>","title":"Hanging Orders"},{"location":"strategy-configs/hanging-orders/#hanging_orders_enabled","text":"<p>When enabled, the orders on the side opposite to the filled orders remains active.</p> <p> Prompt: </p> <pre><code>Do you want to enable hanging orders? (Yes/No)\n&gt;&gt;&gt; Yes\n</code></pre>","title":"<code>hanging_orders_enabled</code>"},{"location":"strategy-configs/hanging-orders/#hanging_orders_cancel_pct","text":"<p>Cancels the hanging orders when their spread goes above this value. Note that no other parameter can cancel hanging orders other than <code>hanging_orders_cancel_pct</code>.</p> <p> Prompt: </p> <pre><code>At what spread percentage (from mid price) will hanging orders be canceled?\n&gt;&gt;&gt;\n</code></pre>","title":"<code>hanging_orders_cancel_pct</code>"},{"location":"strategy-configs/hanging-orders/#how-it-works","text":"<p>Hanging orders is a function that instructs Hummingbot to treat buys and sells of the same order as a pair. If one side gets filled, the bot keeps the other side of the pairing, creating the possibility of that side to eventually get filled:</p> <p></p> <p>In the example above, the buy order for the first pair was filled. But since hanging orders mode was enabled, the original sell order from the first pair is not cancelled during the refresh cycle (period 2) and remains outstanding. Meanwhile, the bot continues to create new orders (see periods 2 through 5). In the example, prices changed direction and eventually at some point, the hanging sell order was filled around period 5.</p> <p>The benefit of this strategy is that it creates the possibility of the pairings to be \u201ccompleted\u201d and balanced.</p> <p>Typically, orders are placed as pairs in single order mode (1 buy and 1 sell order), and when a buy or sell order is filled, the other order is cancelled. The parameter <code>hanging_orders_enabled</code> allows Hummingbot to leave the order on the other side hanging (not cancelled) whenever one side is filled.</p> <p>The hanging order will be cancelled in the following conditions:</p> <ol> <li>The spread goes above the specified <code>hanging_orders_cancel_pct</code> value</li> <li>Sending <code>stop</code> or <code>exit</code> command</li> </ol> <p>Type <code>config hanging_orders_enabled</code> and <code>config hanging_orders_cancel_pct</code> to set values for these parameters.</p>","title":"How it works"},{"location":"strategy-configs/hanging-orders/#illustrative-examples-when-hanging-orders-are-important","text":"","title":"Illustrative examples - when hanging orders are important"},{"location":"strategy-configs/hanging-orders/#example-1-basic","text":"<p>Suppose you are market making for the <code>ETH-USDT</code> pair with a mid-market price of 200 USD (\\(t_0\\)). You set your bid spread and ask spread to 1%. Thus, the bid price is 198 USD and the ask price is 202 USD.</p> <p>Now suppose that a market taker (someone taking a position in the market) thinks the price of Ethereum will rise, so they fill your ask order 202 (\\(t_1\\)).</p> <p>At the next order refresh cycle, normally Hummingbot would cancel the 198 USD bid order and create 2 new bid and ask orders. However, if <code>hanging_orders_enabled</code> is set to True, the bid order is not cancelled and stays on the order book until it is filled. Note that if an open hanging order spread exceeds the <code>hanging_orders_cancel_pct</code> parameter, the hanging order will be canceled.</p>","title":"Example 1 (basic)"},{"location":"strategy-configs/hanging-orders/#example-2-advanced","text":"<p>Suppose that you are again market making for <code>ETH-USDT</code> pair. The bid and ask spread is set to 1%. Consider the two strategies below, the former the default and the latter with hanging orders. The white line in the center is the mid market price in USDT; The dashed lines above the mid-market price are the active ask-orders; And the dotted lines below the mid-market price are the active bid-orders.</p>","title":"Example 2 (advanced)"},{"location":"strategy-configs/hanging-orders/#market-without-hanging-orders","text":"<p></p> <p>In this strategy, the <code>hanging_orders_enabled</code> parameter is False. At each interval \\(t_i\\), the order is either cancelled or filled, then refreshed with a new set of bid and ask orders (each with a 1% spread from the mid-market price). There are only two orders at a time, an ask order and a bid order. This is a great strategy as a default, however, price takers need to be willing to fill orders relatively close to your chosen spread. It may require you to tighten your spread to get more price takers to fill your orders.</p>","title":"Market Without Hanging Orders"},{"location":"strategy-configs/hanging-orders/#market-with-hanging-orders","text":"<p></p> <p>In this strategy, the <code>hanging_orders_enabled</code> parameter is True. We set the <code>hanging_orders_cancel_pct</code> parameter to 2% and make the assumption that an order is filled by a market-taker if the spread is within 0.55%. When a bid order is filled or canceled, unlike the default, the ask order is left open. Similarly, when a ask order is filled or cancelled, the bid order is left open. As you can see above, from \\(t_0\\) to \\(t_{10}\\) generally the bid orders are \"hanging\" until their spreads are greater than 2% from the mid-market price line (or are filled). From \\(t_0\\) to \\(t_{10}\\), the ask orders are being filled as they fall within 0.55% of spread to the mid-market price line. The opposite is true from \\(t_{10}\\) to \\(t_{20}\\), where bid orders are being filled as they fall within 0.55% of the spread to the mid-market price line and the ask orders are \"hanging\" until they are cancelled when their spreads are greater than 2%.</p> <p>This strategy allows for a range of spreads between the cancel percentage parameter and when a price taker fills your order (presumably when the order price is closer to the mid-market price). It is ultimately a more flexible strategy and can capture profitable trades that are lost without hanging orders. For example, in the Sample Markets above, the purple bid order starting at \\(t_8\\) is lost without allowing it to be a hanging order, whereas in the second chart, the bid order is filled at \\(t_{13}\\).</p>","title":"Market With Hanging Orders"},{"location":"strategy-configs/hanging-orders/#sample-configurations","text":"<p>Let's see how this configuration works in the scenario below:</p> <pre><code>- filled_order_delay: 60.0\n- hanging_orders_enabled: True\n- hanging_orders_cancel_pct: 2\n</code></pre> <p></p> <p>When the buy order was completely filled, it will not cancel the sell order. After 60 seconds, Hummingbot will create a new set of buy and sell orders. The <code>status</code> output will show all active orders while indicating which orders are hanging.</p> <p></p> <p>The hanging order will stay outstanding and will be cancelled if its spread goes above 2% as specified in our <code>hanging_orders_cancel_pct</code>.</p> <p></p>","title":"Sample configurations"},{"location":"strategy-configs/hanging-orders/#hanging-orders-with-multiple-order-levels","text":"<p>When an order is filled on one side either buy or sell, all active orders on the opposite side are left hanging.</p> <pre><code>- hanging_orders_enabled: True\n- order_levels: 3\n</code></pre> <p>With the sample configuration above, the bot places 3 buy and 3 sell orders.</p> <pre><code>Orders:\n   Level  Type  Price Spread Amount (Orig)  Amount (Adj)       Age\n       3  sell 239.75  2.49%          0.05          0.05  00:00:01\n       2  sell 237.41  1.49%          0.05          0.05  00:00:01\n       1  sell 235.07  0.49%          0.05          0.05  00:00:01\n       1   buy  233.9  0.01%          0.05          0.05  00:00:01\n       2   buy 231.56  1.01%          0.05          0.05  00:00:01\n       3   buy 229.22  2.01%          0.05          0.05  00:00:01\n</code></pre> <p>Buy order 1 gets filled.</p> <pre><code>Maker BUY order 0.05000000 ETH @ 233.90000000 USDT is filled.\n</code></pre> <p>This leaves the 3 sell orders hanging on top of the new orders on the next refresh.</p> <pre><code>Orders:\n  Level  Type  Price Spread Amount (Orig)  Amount (Adj)       Age\n   hang  sell 239.75  2.50%                        0.05  00:01:08\n      3  sell 239.73  2.49%          0.05          0.05  00:00:01\n   hang  sell 237.41  1.50%                        0.05  00:01:08\n      2  sell 237.39  1.49%          0.05          0.05  00:00:01\n   hang  sell 235.07  0.50%                        0.05  00:01:08\n      1  sell 235.05  0.49%          0.05          0.05  00:00:01\n      1   buy 233.88  0.01%          0.05          0.05  00:00:01\n      2   buy 231.54  1.01%          0.05          0.05  00:00:01\n      3   buy  229.2  2.01%          0.05          0.05  00:00:01\n</code></pre>","title":"Hanging Orders with Multiple Order Levels"},{"location":"strategy-configs/inventory-skew/","text":"<p>Updated as of <code>v0.29.0</code></p> <p>This feature lets you set and maintain a target inventory split between the base and quote assets. It prevents your overall inventory level from changing too much and may result in more stable performance in volatile markets.</p>","title":"Inventory Skew"},{"location":"strategy-configs/inventory-skew/#inventory_skew_enabled","text":"<p>Allows the user to set and maintain a target inventory split between base and quote assets.</p> <p> Prompt: </p> <pre><code>Would you like to enable inventory skew? (Yes/No)\n&gt;&gt;&gt; Yes\n</code></pre>","title":"<code>inventory_skew_enabled</code>"},{"location":"strategy-configs/inventory-skew/#inventory_target_base_pct","text":"<p>Target amount held of the base asset, expressed as a percentage of the total base and quote asset value.</p> <p> Prompt: </p> <pre><code>On [exchange], you have [base_asset_balance] and [quote_asset_balance]. By market value, your current inventory split is [base_%_ratio] and [quote_%_ratio]. Would you like to keep this ratio?\n&gt;&gt;&gt; Yes\n</code></pre>","title":"<code>inventory_target_base_pct</code>"},{"location":"strategy-configs/inventory-skew/#inventory_range_multiplier","text":"<p>This expands the range of tolerable inventory level around your target base percent, as a multiple of your total order size. Larger values expand this range.</p> <p> Prompt: </p> <pre><code>What is your tolerable range of inventory around the target, expressed in multiples of your total order size?\n&gt;&gt;&gt;\n</code></pre>","title":"<code>inventory_range_multiplier</code>"},{"location":"strategy-configs/inventory-skew/#how-it-works","text":"<p>This function adjusts the bid and ask order amounts to limit the user's trading exposure within a defined range. This prevents the user from being over-exposed from the risks of a single side of the trade when the market keeps hitting limit orders on one side only.</p>  <p>Note</p> <p>Example: You are market making for the <code>BTC-USDT</code> pair and have 0.667 BTC and 6000 USDT. At $6000 BTC price, your total portfolio value is $10,000 and the base asset (BTC) accounts for 40% of total value. If your target base percent is 50%, your buy orders will be increased and your sell orders will be decreased until you reach the target percent.</p>  <p>The user specifies a target base asset percentage. Since the user's outstanding orders may change this split if they are filled, the total order size is used to define an allowable range around this target percentage. The user may expand or contract this range via a multiplier parameter.</p>  <p>Note</p> <p>Example: You are market making for the <code>BTC-USDT</code> pair and the total value of your BTC/USDT inventory is 10 BTC. Your target base percent is 50% and each set of orders you place is 1 BTC (10% of your total portfolio). With <code>inventory_range_multiplier</code> of 1.00, your target range is 40% to 60%. With <code>inventory_range_multiplier</code> of 2.00, your target range is 30% to 70%.</p>  <p>If the user's base asset value goes above the upper limit, then no bid orders would be emitted. Conversely, if the user's base asset value goes below the lower limit, then no ask orders would be emitted.</p>","title":"How it works"},{"location":"strategy-configs/inventory-skew/#sample-configurations","text":"<p>The three bots below all share this base configuration:</p> <pre><code>- market: BTC-USDT\n- bid_spread: 1\n- ask_spread: 1\n- order_amount: 0.002\n- order_levels: 3\n- order_level_amount: 0.002\n- order_level_spread: 1\n</code></pre>","title":"Sample configurations"},{"location":"strategy-configs/inventory-skew/#no-inventory-skew","text":"<pre><code>- inventory_skew_enabled: False\n</code></pre> <p></p> <p>Without inventory skew, order amounts are always symmetrical between buy (outlined in green) and sell orders (outlined in red).</p>","title":"No inventory skew"},{"location":"strategy-configs/inventory-skew/#inventory-skew-multiplier-1","text":"<pre><code>- inventory_skew_enabled: True\n- inventory_target_base_pct: 50\n- inventory_range_multiplier: 1.0\n</code></pre> <p></p> <p>Since the current inventory range of each asset is within the target range (8.7% - 91.3%), both buy and sell orders are placed. However, more buy orders will be created with larger order amounts than the sell order amounts.</p>","title":"Inventory skew, multiplier = 1"},{"location":"strategy-configs/inventory-skew/#inventory-skew-multiplier-05","text":"<pre><code>- inventory_skew_enabled: True\n- inventory_target_base_pct: 50\n- inventory_range_multiplier: 0.5\n</code></pre> <p></p> <p>By decreasing the range multiplier to 0.5, the target range tightens (29.4% to 70.6%). Since the current inventory percentage (25.0% and 75%) falls off the range, only buy orders are placed until the inventory split is within range.</p>","title":"Inventory skew, multiplier = 0.5"},{"location":"strategy-configs/inventory-skew/#inventory-skew-with-balance-limit","text":"<p>Starting with version 0.30.0, a limit can be applied to the total balance to allocate how much the bot can access in an exchange or wallet. With inventory skew, Hummingbot will maintain a target balance with respect to the allowable asset.</p> <pre><code>- inventory_skew_enabled: True\n- inventory_target_base_pct: 50\n- inventory_range_multiplier: 1.0\n</code></pre> <p>Without balance limit</p> <p>The image below shows our total balance is around $200. To maintain a 50-50 ratio based on <code>inventory_target_base_pct</code>, the target shows a value of around $100 for the base and quote asset.</p> <p></p> <p>With balance limit</p> <pre><code>binance:\n      Asset       Amount        Limit\n       USDC     105.6335      50.0000\n       USDT     105.7188      50.0000\n</code></pre> <p>Let\u2019s say we put a $50 limit on both USDC and USDT which makes our total usable assets to $100. Notice that the target amount is now at $50 for both sides which means, inventory skew works with respect to the total balance limit.</p>","title":"Inventory skew with balance limit"},{"location":"strategy-configs/inventory-skew/#order-size-calculation-math","text":"<p>The input <code>order_amount</code> in single-order mode, or its equivalent in multiple-order mode, is adjusted linearly by comparing the percentage of the base asset in the overall trading portfolio vs. the target base asset ratio.</p> <p>The mathematics operations is as follows.</p> <p></p>","title":"Order size calculation math"},{"location":"strategy-configs/max-order-age/","text":"<p>Released on version 0.34.0</p>","title":"Max Order Age"},{"location":"strategy-configs/max-order-age/#how-it-works","text":"<p>By default, the parameter is set to 1800 seconds.</p> <p>To reconfigure, run the command <code>config max_order_age</code> and set the desired value in seconds.</p> <p>The <code>max_order_age</code> parameter allows you to set a specific duration when resetting your order's age. It refreshes your orders and automatically creates an order based on the spread and movement of the market. Also, hanging orders remain as hanging orders.</p> <p></p>","title":"How it works"},{"location":"strategy-configs/max-order-age/#sample-configuration","text":"<p>We can set the maximum age of an order before it refreshes back to the set spread and amount. The example below shows that it refreshed the order's age before <code>order_refresh_time</code> was triggered because <code>max_order_age</code> was set to 20 seconds.</p> <pre><code>bid_spread : 0.50\nask_spread : 0.50\nmax_order_age : 20.0\norder_refresh_time : 60.0\n</code></pre> <p></p>","title":"Sample configuration"},{"location":"strategy-configs/max-order-age/#max-order-age-with-order-refresh-tolerance","text":"<p>Setting our <code>max_order_age</code> at a lower time than <code>order_refresh_time</code> refreshes our orders based on the last spread and value.</p> <p>Now try out a configuration without max order age, and let's enable order refresh tolerance.</p> <pre><code>bid_spread : 0.50\nask_spread : 0.50\norder_refresh_tolerance_pct: 0.1\norder_refresh_time : 60.0\n</code></pre> <p></p> <p>The orders are not canceling because it is within the 0.1% order refresh tolerance percentage even though the order refresh time is 30 seconds.</p> <p>Now add max order age to the config.</p> <pre><code>bid_spread : 0.50\nask_spread : 0.50\norder_refresh_tolerance_pct: 0.02\nmax_order_age: 15.0\norder_refresh_time : 30.0\n</code></pre> <p></p> <p>The <code>max_order_age</code> parameter tried to refresh the order but <code>order_refresh_tolerance_pct</code> kicked in. That's why the order was canceled, and the bot created a new order because it reached the threshold of 0.02%.</p> <p></p>","title":"Max order age with order refresh tolerance"},{"location":"strategy-configs/max-order-age/#max-order-age-with-hanging-orders","text":"<p>Max order age respects hanging orders and refreshes the orders but does not cancel active hanging orders. See the example below.</p> <pre><code>ask_spread: 0.3\nbid_spread: 0.3\norder_refresh_time: 60\nmax_order_age: 30\nhanging_order_enabled: True\n</code></pre> <p></p> <p>The hanging orders were not canceled and were only refreshed when <code>max_order_age</code> was triggered.</p>","title":"Max order age with hanging orders"},{"location":"strategy-configs/max-order-age/#why-max-order-age-is-important-in-liquidity-mining","text":"<p>Suppose you are participating in the <code>HARD-USDT</code> campaign with an order refresh time of 30 minutes. Max order age refreshes depending on what you set it on as long as it is lower than the order refresh time. When participating in liquidity mining, outstanding orders that reach the 30-minute mark are not subject to rewards. Therefore, it is best to use the parameter to refresh the orders' age to be eligible for rewards.</p>","title":"Why max order age is important in liquidity mining?"},{"location":"strategy-configs/minimum-spread/","text":"<p>Released on version 0.28.0</p> <p>This parameter allows Hummingbot to cancel the active order right away when its spread dips below the specified value.</p>","title":"Minimum Spread"},{"location":"strategy-configs/minimum-spread/#minimum_spread","text":"<p>If the spread of any active order falls below this param value, it will be automatically canceled.</p> <p> Prompt: </p> <pre><code>At what minimum spread should the bot automatically cancel orders?\n&gt;&gt;&gt;\n</code></pre>","title":"<code>minimum_spread</code>"},{"location":"strategy-configs/minimum-spread/#how-it-works","text":"<p>The strategy checks the active order's spread on every tick (1 second).</p> <p>By default, this is set to <code>-100</code>. Setting this parameter to a negative value disables this feature. To enable, run the <code>config minimum_spread</code> command in the Hummingbot client and specify your minimum spread value.</p> <p>This only applies to active orders and does not affect hanging orders.</p>","title":"How it works"},{"location":"strategy-configs/minimum-spread/#sample-configuration","text":"<pre><code>- bid_spread : 0.50\n- ask_spread : 0.50\n- minimum_spread : 0.49\n- order_refresh_time : 60.0\n</code></pre> <p>With the above configuration, the bot creates buy and sell orders at 0.5% spread from mid-price.</p> <pre><code>00:28:31 - Creating 1 bid orders at (Size, Price): ['0.05 ETH, 227.41USDC']\n00:28:31 - Creating 1 ask orders at (Size, Price): ['0.05 ETH, 229.69USDC']\n00:28:31 - Created LIMIT_MAKER BUY order x-XEKWYICX-BEHUC1593217711001924 for 0.05000000 ETHUSDC.\n00:28:31 - Created LIMIT_MAKER SELL order x-XEKWYICX-SEHUC1593217711002203 for 0.05000000 ETHUSDC.\n</code></pre> <pre><code>Orders:\n   Level  Type  Price Spread Amount (Orig)  Amount (Adj)       Age\n       1  sell 229.69  0.49%          0.05          0.05  00:00:00\n       1   buy 227.41  0.50%          0.05          0.05  00:00:00\n</code></pre> <p>Even before the 60 seconds refresh time was up, the sell order was canceled when its spread went below the minimum.</p> <pre><code>00:28:40 - Order is below minimum spread (0.0049). Cancelling Order: (Sell) ID - x-XEKWYICX-SEHUC1593217711002203\n00:28:40 - Cancelling the limit order x-XEKWYICX-SEHUC1593217711002203.\n</code></pre> <pre><code>Orders:\n   Level Type  Price Spread Amount (Orig)  Amount (Adj)       Age\n       1  buy 227.41  0.52%          0.05          0.05  00:00:12\n</code></pre> <p>In the next order refresh, new buy and sell orders with 0.5% spreads will be created.</p>","title":"Sample configuration"},{"location":"strategy-configs/order-levels/","text":"<p>These parameters allow you to set multiple levels of orders on each side and gives you more fine-grained control over the spreads and sizes of each set of orders.</p>","title":"Order Levels"},{"location":"strategy-configs/order-levels/#order_levels","text":"<p>The number of order levels to place for each side of the order book.</p> <p> Prompt: </p> <pre><code>How many orders do you want to place on both sides?\n&gt;&gt;&gt;\n</code></pre>","title":"<code>order_levels</code>"},{"location":"strategy-configs/order-levels/#order_level_amount","text":"<p>The size can either increase (if set to a value greater than zero) or decrease (if set to a value less than zero) for subsequent order levels after the first level.</p> <p> Prompt: </p> <pre><code>How much do you want to increase or decrease the order size for each additional order?\n&gt;&gt;&gt;\n</code></pre>","title":"<code>order_level_amount</code>"},{"location":"strategy-configs/order-levels/#order_level_spread","text":"<p>The incremental spread increases for subsequent order levels after the first level.</p> <p> Prompt: </p> <pre><code>Enter the price increments (as percentage) for subsequent orders?\n&gt;&gt;&gt;\n</code></pre>  <p>Warning</p> <p>Setting <code>order_level_spread</code> to a very low number may cause multiple orders to be placed on the same price level. For example, for an asset like SNM/BTC, if you set an order interval percent of 0.4 (~0.4%) because of low asset value, the price of the next order will be rounded to the nearest price supported by the exchange, which in this case might lead to multiple orders being placed at the same price level.</p>","title":"<code>order_level_spread</code>"},{"location":"strategy-configs/order-levels/#how-it-works","text":"<p>Enter the value for <code>order_levels</code> to specify how many orders you want to place on each side (buy and sell).</p>  <p>Note</p> <p>Example: Entering <code>3</code> places three bid and three ask orders on each side of the book, for a total of 6 orders.</p>  <p>Users can also increase or decrease the size of subsequent orders starting from the first order in increments or decrements specified in order_level_amount. This can be set to 0 if you don't want your multiple order sizes to increase Greater than 0(i.e., 0.4) to allow order sizes to increase by 0.4 after the first level Less than 0(i.e., -2) to enable order sizes to decrease by 2 after the first level.</p>  <p>Note</p> <p>Example: If the order start size is <code>7000</code> and the order step size is <code>1000</code>, the second-order size is <code>8000</code>, and the third-order is <code>9000</code>.</p>  <p>The <code>order_level_spread</code> logic works the same as the order step size, but instead, it increases the spreads of your subsequent orders starting from the first order.</p>  <p>Note</p> <p>Example: The spread of your first buy and sell order is <code>1</code> (1%), and your order interval amount is <code>2</code> (2%). The spread of your second order is <code>3</code> (3%), and the third-order is <code>5</code> (5%).</p>  <p>Let us focus on one side of the order for now: the \"sell\" side of the order book. Given the sample scenarios above, your active orders will show as:</p> <p></p>","title":"How it works"},{"location":"strategy-configs/order-levels/#sample-configuration","text":"<pre><code>- market: BTC-USDT\n- bid_spread: 1\n- ask_spread: 1\n- order_amount: 0.002\n- order_levels: 3\n- order_level_amount: 0.002\n- order_level_spread: 0.5\n</code></pre> <p>Running a bot with the parameters above, the <code>status</code> command shows 3 levels of orders in the BTC-USDT trading pair: </p> <p>You might notice that our output's actual spread is not exactly similar to the parameters we have configured for the percentage. This is because of two things:</p> <ul> <li>quantization: Hummingbot adjusts order prices to match exchange tick rules and</li> <li>changes in market price after an order is placed.</li> </ul>","title":"Sample configuration"},{"location":"strategy-configs/order-optimization/","text":"<p>Updated as of <code>v0.35.0</code></p> <p>Users now have the option to automatically adjust the prices to the right, just above the top bid and just below the top ask.</p>  <p>Note</p> <p><code>order_optimization_enabled</code> was previously called <code>jump_orders_enabled</code></p>","title":"Order Optimization"},{"location":"strategy-configs/order-optimization/#order_optimization_enabled","text":"<p>Allows your bid and ask order prices to be adjusted based on the current top bid and ask prices in the market.</p> <p> Prompt: </p> <pre><code>Do you want to enable best bid ask jumping? (Yes/No)\n&gt;&gt;&gt; Yes\n</code></pre>","title":"<code>order_optimization_enabled</code>"},{"location":"strategy-configs/order-optimization/#ask_order_optimization_depth","text":"<p>The depth in base asset amount to be used for finding top ask.</p> <p> Prompt: </p> <pre><code>How deep do you want to go into the order book for calculating the top ask, ignoring dust orders on the top (expressed in base asset amount)?\n&gt;&gt;&gt;\n</code></pre>","title":"<code>ask_order_optimization_depth</code>"},{"location":"strategy-configs/order-optimization/#bid_order_optimization_depth","text":"<p>The depth in base asset amount to be used for finding the top bid.</p> <p> Prompt: </p> <pre><code>How deep do you want to go into the order book for calculating the top bid, ignoring dust orders on the top (expressed in base asset amount)?\n&gt;&gt;&gt;\n</code></pre>","title":"<code>bid_order_optimization_depth</code>"},{"location":"strategy-configs/order-optimization/#how-it-works","text":"<p>This feature works best in single order mode. Take note that this does not automatically jump your orders from the bottom to the top. Instead, if your orders are already the best in the order book (at the top) this will adjust your prices right next to the next best orders.</p> <p>It is recommended to disable <code>add_transaction_costs</code> (set to <code>False</code>) for this feature to work effectively. This is because adding transaction costs would affect the prices at which the orders are placed and might not be the best bid/ask.</p>","title":"How it works"},{"location":"strategy-configs/order-optimization/#sample-configuration","text":"<pre><code>- bid_spread: 0.1%\n- ask_spread: 0.1%\n- order_optimization_enabled: false\n- ask_order_optimization_depth: 0\n- bid_order_optimization_depth: 0\n</code></pre> <p>Setting our bid and ask threshold to a very small value (0.1%) puts our orders at the top of the order book. For example, the image below shows the buy order is placed at <code>0.003159</code> and the sell order at <code>0.003165</code> with the order optimization disabled.</p> <p></p> <p>Now let's enable <code>order_optimization_enabled</code>. You'll see in the next image that the buy order is placed at <code>0.003150</code> and the sell order at <code>0.003174</code>, right just above the next best order.</p> <pre><code>- bid_spread: 0.1%\n- ask_spread: 0.1%\n- order_optimization_enabled: True\n- ask_order_optimization_depth: 0\n- bid_order_optimization_depth: 0\n</code></pre> <p></p> <p>If the next best order's price changes (not your own), your existing orders will not adjust immediately. It will wait for <code>order_refresh_time</code> to cancel your existing orders and the new orders will try to jump to just above best bid or just below best ask.</p>","title":"Sample configuration"},{"location":"strategy-configs/order-optimization/#order-optimization-depth","text":"<p>This allows users to ignore dust orders specified in the base currency amount. As shown in the example above, this is the expected behavior when enabling order optimization.</p> <pre><code>- bid_spread: 0.1%\n- ask_spread: 0.1%\n- order_optimization_enabled: True\n- ask_order_optimization_depth: 0\n- bid_order_optimization_depth: 0\n</code></pre> <p></p> <p>Here we configure and set <code>ask_order_optimization_depth</code> and <code>bid_order_optimization_depth</code> both to 5,000.</p> <pre><code>- bid_spread: 0.1%\n- ask_spread: 0.1%\n- order_optimization_enabled: True\n- ask_order_optimization_depth: 5000\n- bid_order_optimization_depth: 5000\n</code></pre> <p>Doing this ignores the first 5,000 units of orders on each side in the order book and places our orders right next to them.</p> <p></p>","title":"Order optimization depth"},{"location":"strategy-configs/order-optimization/#order-optimization-with-multiple-order-levels","text":"<p>Users can now use order optimization with multiple <code>order_levels</code> see the example below. Order optimization is triggered, and it placed the 2nd order, which has a spread of 0.2% because of <code>order_level_spread</code>.</p> <pre><code>- bid_spread: 0.1%\n- ask_spread: 0.2%\n- order_levels: 2\n- order_level_spread: 0.1%\n- order_optimization_enabled: True\n- ask_order_optimization_depth: 0\n- bid_order_optimization_depth: 0\n</code></pre> <p></p>","title":"Order optimization with multiple order levels"},{"location":"strategy-configs/order-override/","text":"<p>This feature allows users to customize and specify how Hummingbot creates orders in terms of order levels, spread, and size.</p>","title":"Order Override"},{"location":"strategy-configs/order-override/#order_override","text":"<p>The user provides orders to override the orders placed by the <code>order_amount</code> and <code>order_level</code> parameters directly.</p>","title":"<code>order_override</code>"},{"location":"strategy-configs/order-override/#how-it-works","text":"<p>Since this is a feature designed for advanced users, it is not configurable from the Hummingbot client. Instead, follow the steps below to set up the <code>order_override</code> parameter:</p> <ol> <li>Edit the strategy config file located in the Hummingbot <code>conf</code> folder using a text editor. See Where are my config and log files? in the FAQ page for more information.</li> <li>The input should be in a dictionary format, and the key is user-defined.Make sure there is a space between the colon ( : ) and open bracket ( [ ) as shown in the Sample Configuration then save your changes.</li> <li>For the changes to take effect, perform any of the following:</li> <li>Run <code>stop</code> command, <code>import</code> the config file again, and then <code>start</code></li> <li>Run <code>exit</code> command and restart Hummingbot</li> </ol> <p>While <code>order_override</code> is in effect, it supersedes existing values of <code>bid_spread</code>, <code>ask_spread</code>, <code>order_amount</code> and <code>order_levels</code>.</p>","title":"How it works"},{"location":"strategy-configs/order-override/#sample-configuration","text":"<pre><code>order_override:\n    order_1: [sell, 2.5, 5]\n    order_2: [sell, 1.5, 10]\n    order_3: [buy, 0.5, 1]\n    order_4: [buy, 0.8, 3]\n</code></pre> <p>Using the sample input above for <code>order_override</code>, Hummingbot creates the following orders:</p> <pre><code>Orders:\n   Level  Type  Price Spread Amount (Orig)  Amount (Adj)       Age\n       2  sell 384.59  2.50%          0.1              5  00:00:01\n       1  sell 380.83  1.50%          0.1             10  00:00:01\n       1   buy 373.33  0.50%          0.1              1  00:00:01\n       2   buy 371.45  0.80%          0.1              3  00:00:01\n</code></pre>","title":"Sample configuration"},{"location":"strategy-configs/order-refresh-tolerance/","text":"<p>Updated as of <code>v0.28.0</code></p> <p>This feature allows you to specify a range of spreads that is \"tolerable\" - not canceled and left on the order books - every refresh cycle. It allows you to specify the allowed minimum percentage change in spread to adjust an order. Suppose there is movement in the mid-market price. In that case, you can create flexibility with your trading strategy to control when orders are canceled/replaced (refreshed) with a tolerance percent change to capture an additional profit (see How Is This Parameter Helpful below).</p>","title":"Order Refresh Tolerance"},{"location":"strategy-configs/order-refresh-tolerance/#order_refresh_tolerance_pct","text":"<p>The spread (from mid-price) to defer the order refresh process to the next cycle.</p> <p> Prompt: </p> <pre><code>Enter the percent change in price needed to refresh orders at each cycle\n&gt;&gt;&gt; 1\n</code></pre>","title":"<code>order_refresh_tolerance_pct</code>"},{"location":"strategy-configs/order-refresh-tolerance/#how-it-works","text":"<p>Type <code>config order_refresh_tolerance_pct</code> to set this parameter. By default, this parameter is set to <code>0</code>.</p> <p>This means that Hummingbot will cancel active orders (excluding hanging orders) every <code>order_refresh_time</code> seconds. However, if the price has not changed since the last cycle, Hummingbot will leave the orders there. Setting it to <code>-1</code> will disable the feature, which means Hummingbot will always cancel and create orders every <code>order_refresh_time</code> seconds.</p> <p>For example, setting <code>order_refresh_tolerance_pct</code> to <code>0.1</code> and an active order's spread changes from 1.0% to 0.9%-1.1% when it's time to refresh depending on <code>order_refresh_time</code>, this order is kept on the order books (not canceled). However, if the spread exceeds 1.1% or goes below 0.9%, then the order is canceled.</p> <p>Note that one can set <code>order_refresh_tolerance_pct</code> to be greater than the bid and ask spreads. If so, the spread can be negative and put you in a position of loss.</p>","title":"How it works"},{"location":"strategy-configs/order-refresh-tolerance/#example","text":"<p>Imagine you are trading the <code>ETH-USDT</code> asset pair on an exchange with a starting mid-market price of 200 USDT (\\(t_0\\)).</p>","title":"Example"},{"location":"strategy-configs/order-refresh-tolerance/#sample-market","text":"<p></p>","title":"Sample market"},{"location":"strategy-configs/order-refresh-tolerance/#configuration","text":"<pre><code>- bid_spread: 2\n- ask_spread: 2\n- order_refresh_time: 30.0\n- order_refresh_tolerance_pct: 1\n</code></pre>","title":"Configuration"},{"location":"strategy-configs/order-refresh-tolerance/#sample-status-outputlog","text":"<p>The ask and bid spread is 2%, so your bot will place orders at the ask price of 204 and your bid price to 196 (\\(t_1\\)). This configuration creates your orders as follows.</p> <pre><code>Orders:\n     Level  Type    Price Spread Amount (Orig)  Amount (Adj)       Age\n         1  sell      204  2.00%         0.001         0.001  00:00:01\n         1   buy      196  2.00%         0.001         0.001  00:00:01\n</code></pre> <p>Every 30 seconds, the bot will only cancel and replace the orders if the spreads exceed the range of 1% - 3%.</p> <p>After 30 seconds (\\(t_2\\)), the mid-market price increases to 201; the sell spread is 1.49%, and the buy spread is 2.49%. The status of the orders as follows:</p> <pre><code>Orders:\n     Level  Type    Price Spread Amount (Orig)  Amount (Adj)       Age\n         1  sell      204  1.49%         0.001         0.001  00:00:29\n         1   buy      196  2.49%         0.001         0.001  00:00:29\n</code></pre> <p>The spread of buy/sell orders did not change by more than 1% of what it initially was. A message will show in the logs pane.</p> <pre><code>current order prices is within 1.00% order_refresh_tolerance_pct\n</code></pre> <p>Let's say a market taker, someone taking a position in the market likes the smaller sell spread of right before $3 before the ask spread reaches 0.99% (let's say around 1%) and decides to fill your sell order because they think the market price will go up. At $t_3$, the bot cancels the buy order and creates two new orders with an ask and buy spread of 2%.</p> <pre><code>Orders:\n     Level  Type    Price Spread Amount (Orig)  Amount (Adj)       Age\n         1  sell   205.02  2.00%         0.001         0.001  00:00:01\n         1   buy   196.98  2.00%         0.001         0.001  00:00:01\n</code></pre> <p>Consider now that at $4 the price drops to 199. The bid spread is 1.01%, and the ask spread is 3.02%. This is outside of the order refresh tolerance because the spread has changed by more than 1%.</p> <p>The bot cancels both orders and replaces them with a spread of 2%, let's say at \\(t_5\\).</p> <pre><code>Orders:\n     Level  Type    Price Spread Amount (Orig)  Amount (Adj)       Age\n         1  sell   202.98  2.00%         0.001         0.001  00:00:01\n         1   buy   195.02  2.00%         0.001         0.001  00:00:01\n</code></pre> <p>Now, at \\(t_6\\), the spread is now 1.5% and 2.5% for bid and ask spreads, respectively.</p> <pre><code>Orders:\n     Level  Type    Price Spread Amount (Orig)  Amount (Adj)       Age\n         1  sell   202.98  2.52%         0.001         0.001  00:00:29\n         1   buy   195.02  1.51%         0.001         0.001  00:00:29\n</code></pre> <p>The bot will leave these orders because they are within the order refresh tolerance and display the following message again:</p> <pre><code>current order prices is within 1.00% order_refresh_tolerance_pct\n</code></pre>  <p>Note</p> <p><code>Not enough balance for buy (sell) order .... order_amount is adjusted to</code> &gt; <code>Not canceling active orders since the difference between new order prices and current order prices is within</code> is no longer shown in logs.</p>  <p>Let's say that a market taker thinks the market price will decrease substantially and likes your bid spread. They then can fill your buy order at 195.02.</p>","title":"Sample status output/log"},{"location":"strategy-configs/order-refresh-tolerance/#how-is-this-parameter-helpful","text":"<p>The default for this parameter is a tolerance of 0%. Thus, at each refresh cycle, if the spread changes at all, the bot will cancel the orders and place new orders at the configuration spread. Because the spread resets at every refresh cycle, this increases the likelihood that the bid and ask spread are closer to the original bid and ask spread. This reduces the risk that the spread substantially strays away from the original spread, perhaps preventing a loss. However, as we have seen above, the strategy can capitalize on the flexibility (tolerance) of the bid and ask spreads because price takers could be looking for some range of spreads that are unknown to you.</p>","title":"How is this parameter helpful"},{"location":"strategy-configs/ping-pong/","text":"<p>Updated as of <code>v0.28.0</code></p> <p>This feature enables the ping pong strategy, in which Hummingbot alternates buy and sell orders.</p>","title":"Ping Pong"},{"location":"strategy-configs/ping-pong/#ping_pong_enabled","text":"<p>Whether to alternate between buys and sells.</p> <p> Prompt: </p> <pre><code>Would you like to use the ping pong feature and alternate between buy and sell orders after fills?\n&gt;&gt;&gt;\n</code></pre>","title":"<code>ping_pong_enabled</code>"},{"location":"strategy-configs/ping-pong/#how-it-works","text":"<p>The ping pong strategy tries to keep buys and sells balanced by only creating orders on the opposite side of an order that is filled. It will keep on creating orders on the opposite side of the filled order as long as <code>ping_pong</code> is set to enabled. For example:</p> <p></p> <p>Because the buy order from period 1 was filled, the bot stops placing buy orders, and only places sell orders (periods 2-4). Only when a sell order is eventually filled (period 4) that's the time that it will resume creating both buy and sell orders (period 5).</p> <p>By default, this parameter is set to <code>False</code>. When enabled, after a filled order event on either side (buy/sell) it will only create orders on the opposite side on the next refresh.</p> <p>For example, if your buy order is filled and the sell order was canceled the bot will keep creating sell orders only until it gets filled.</p> <p>Stopping the strategy using the <code>stop</code> command breaks the current ping pong logic. Upon restarting, the bot will initially create both buy and sell orders, assuming you have enough balance to place orders on each side.</p>","title":"How it works"},{"location":"strategy-configs/ping-pong/#ping-pong-with-single-order-level","text":"<p>The scenario below shows how ping pong balances trades when one side is filled.</p> <ol> <li>Buy order b1 and sell order s1 are created</li> <li>b1 gets filled, and s1 is canceled when not filled</li> <li>Sell order s2 is created</li> <li>s2 gets filled</li> <li>Buy order b3 and sell order s3 are created</li> </ol> <p>Notice that the buy order b2 was not created in an attempt to offset the previous trade.</p>","title":"Ping pong with single order level"},{"location":"strategy-configs/ping-pong/#ping-pong-with-multiple-order-levels","text":"<p>Let's say initially we have 2 orders on each side, buy orders b1, b2, and sell orders s1, s2.</p> <ol> <li>b1 gets filled, and b2, s1, s2 are canceled when not filled</li> <li>Buy order b3 and sell orders s3, s4 are created</li> <li>s3 gets filled, and b3, s4 are canceled when not filled</li> <li>Buy order b4 and sell order s5 are created</li> <li>s5 gets filled, and b4 is canceled when not filled</li> <li>Buy order b5 is created</li> <li>b5 gets filled</li> <li>Buy orders b6, b7, and sell orders s6, s7 are created</li> </ol>","title":"Ping pong with multiple order levels"},{"location":"strategy-configs/price-band/","text":"<p>Updated as of <code>v0.27.0</code></p> <p>This feature allows you to set a price band within which your bot places both buy and sell orders normally.</p>","title":"Price Band"},{"location":"strategy-configs/price-band/#price_ceiling","text":"<p>Place only sell orders when mid price goes above this price.</p> <p> Prompt: </p> <pre><code>Enter the price point above which only sell orders will be placed\n&gt;&gt;&gt;\n</code></pre>","title":"<code>price_ceiling</code>"},{"location":"strategy-configs/price-band/#price_floor","text":"<p>Place only buy orders when mid price falls below this price.</p> <p> Prompt: </p> <pre><code>Enter the price below which only buy orders will be placed\n&gt;&gt;&gt;\n</code></pre>","title":"<code>price_floor</code>"},{"location":"strategy-configs/price-band/#how-it-works","text":"<p><code>price_ceiling</code> and <code>price_floor</code> are two optional parameters that you can set. By default, these parameters have a value of -1, which means that they are not used.</p> <p>Type <code>config price_ceiling</code> and <code>config price_floor</code> to set values for these parameters. If the mid price exceeds <code>price_ceiling</code>, your bot only places sell orders. If the price falls below <code>price_floor</code>, your bot only places buy orders.</p> <p>Note that the <code>price_floor</code> cannot be greater than the <code>price_ceiling</code>.</p>","title":"How it works"},{"location":"strategy-configs/price-band/#sample-configurations","text":"<pre><code>- order_refresh_time: 30\n- order_refresh_tolerance_pct: 1%\n- price_ceiling: 9750\n- price_floor: 9730\n</code></pre> <p>With this configuration, Hummingbot will create both buy and sell orders if the mid price is between 9750 and 9730.</p> <pre><code>Markets:\n  Exchange   Market  Best Bid Price  Best Ask Price  Mid Price\n   binance  BTCUSDT         9745.02         9746.77   9745.895\n\nAssets:\n                            BTC    USDT\n   Total Balance         0.0076 74.7486\n   Available Balance     0.0046 46.1164\n   Current Value (USDT) 73.8615 74.7486\n   Current %              49.7%   50.3%\n\nOrders:\n   Level  Type   Price Spread Amount (Orig)  Amount (Adj)       Age\n       1  sell 9933.62  1.93%         0.003         0.003  00:00:00\n       1   buy 9544.06  2.07%         0.003         0.003  00:00:00\n</code></pre> <p>Since the mid price went above <code>price_ceiling</code> of 9750, the bot only created a sell order.</p> <pre><code>Markets:\n  Exchange   Market  Best Bid Price  Best Ask Price  Mid Price\n   binance  BTCUSDT         9754.86         9754.87   9754.865\n\nAssets:\n                            BTC    USDT\n   Total Balance         0.0076 74.7486\n   Available Balance     0.0046 46.0582\n   Current Value (USDT) 73.9295 74.7486\n   Current %              49.7%   50.3%\n\nOrders:\n   Level  Type   Price Spread Amount (Orig)  Amount (Adj)       Age\n       1  sell  9953.8  2.04%         0.003         0.003  00:00:25\n</code></pre> <p>And when the mid price went down below the <code>price_floor</code> of 9730, Hummingbot created a buy order only.</p> <pre><code>Markets:\n  Exchange   Market  Best Bid Price  Best Ask Price  Mid Price\n   binance  BTCUSDT         9727.17         9727.26   9727.215\n\nAssets:\n                            BTC    USDT\n   Total Balance         0.0076 74.7486\n   Available Balance     0.0076 46.1469\n   Current Value (USDT) 73.7199 74.7486\n   Current %              49.7%   50.3%\n\nOrders:\n   Level Type   Price Spread Amount (Orig)  Amount (Adj)       Age\n       1  buy 9533.89  1.99%         0.003         0.003  00:00:01\n</code></pre>","title":"Sample configurations"},{"location":"strategy-configs/price-band/#price-band-with-order-refresh-tolerance","text":"<p>When it's time to refresh orders, the price band will take priority over the tolerable change in spreads.</p>","title":"Price band with order refresh tolerance"},{"location":"strategy-configs/price-band/#price-band-with-external-pricing-source","text":"<p>If <code>price_source</code> is enabled then the mid price reference point will be the external mid price.</p>","title":"Price band with external pricing source"},{"location":"strategy-configs/rate-oracle/","text":"<p>This new feature provides real time, most up-to-date exchange rate on any given token or currency from a reliable and trustworthy data source.</p>  <p>Note</p> <p>Use rate oracle with the cross exchange market making and arbitrage strategies.</p>","title":"Rate Oracle"},{"location":"strategy-configs/rate-oracle/#parameters","text":"","title":"Parameters"},{"location":"strategy-configs/rate-oracle/#rate_oracle_source","text":"<p>The source where you want to pull data from, it can either be Binance, Coingecko, Kucoin or Ascendex. Please take note that using Coingecko will have a 30-second delay due to their API rate limit.</p> <pre><code>What source do you want rate oracle to pull data from? (binance, coingecko, kucoin, ascend_ex)\"\n&gt;&gt;&gt;\n</code></pre>","title":"<code>rate_oracle_source</code>"},{"location":"strategy-configs/rate-oracle/#global_tokenglobal_token_name","text":"<p>This is a token which you can display other tokens' value in. Set the <code>global_token.global_token_name</code> according to your preferred token value.</p> <pre><code>What is your default display token? (e.g. USDT,USD,EUR)\n&gt;&gt;&gt;\n</code></pre>","title":"<code>global_token.global_token_name</code>"},{"location":"strategy-configs/rate-oracle/#global_tokenglobal_tokenglobal_token_symbol","text":"<p>The symbol for the global token.</p> <pre><code>What is your default display token symbol? (e.g. $, \u20ac)\n&gt;&gt;&gt;\n</code></pre>  <p>Tip</p> <p>If you happen to <code>start</code> the bot and produce the error <code>Oracle rate is not available</code>, or ff the <code>rate_oracle_source</code> fails to show any price reference on your pair, you may change the <code>oracle_source</code> by running <code>config rate_oracle_source</code> and switch between Binance, Coingecko, Kucoin or Ascendex.</p>  <p></p>","title":"<code>global_token.global_token.global_token_symbol</code>"},{"location":"strategy-configs/rate-oracle/#how-it-works","text":"<p>If you need to view the rate oracle conversion after the <code>balance</code>, <code>pnl</code>, <code>open_orders</code>, <code>trades</code>, and <code>status</code> command, set it manually in the <code>conf_client.yml</code>.</p>  <p>Note</p> <p>In past versions of Hummingbot (1.5.0 and below), the <code>conf_client.yml</code> file is named <code>conf_global.yml</code></p>  <p>To set the parameters for <code>rate_oracle_source</code>, <code>global_token.global_token_name</code> and <code>global_token.global_token_symbol</code>, run the <code>config</code> command.</p> <p>Refer to the example below:</p> <p>Change the default setting in <code>conf_client.yml</code> to GBP (Great Britain Pound). The conversion will show up when you run <code>balance</code> command.</p> <p></p> <p></p> <p>The conversion also shows up during the <code>status</code> command for the <code>liquidity_mining</code> strategy. Under the <code>Miner</code> section.</p> <p></p> <p>The conversion shows up when using the <code>pnl</code> command.</p> <p></p> <p>The conversion also shows up when running the <code>trades</code> command.</p> <p></p> <p>The conversion also works with the <code>open_orders</code> command.</p> <p></p>","title":"How it works"},{"location":"v2/faq/","text":"","title":"FAQ / Troubleshooting"},{"location":"v2/references/","text":"","title":"References"},{"location":"v2/config/","text":"<p>Hummingbot's config module helps onboard users who are new to running a trading bot. It is helpful in</p> <ul> <li>Compiling a list of absolutely essential config variables.</li> <li>Skip or provide default variables that are more advanced / have the potential to confuse new users.</li> <li>Collecting and validating user inputs as config values.</li> <li>Check if all configs are present before running any strategy.</li> </ul>","title":"Configuration Module"},{"location":"v2/config/#architecture","text":"<p>Currently, we split all the configuration variables into three different types.</p>    Config type In-memory location Saved to local yml Description     <code>global</code> <code>hummingbot/client/config/global_config_map.py</code> Yes Strategy-agnostic configs such as exchange API keys, wallet selection, etc.   <code>strategy</code> <code>hummingbot/strategy/{STRATEGY_NAME}/{STRATEGY_NAME}_strategy_config_map.py</code> Yes Strategy-specific configs.","title":"Architecture"},{"location":"v2/config/#default-configuration-flow","text":"<ol> <li>When the bot starts, it automatically reads all the global configurations from a file named <code>conf_global.yml</code>. If    such a file does not exist, it will copy the empty template from <code>hummingbot/templates/conf_global_TEMPLATE.yml</code>.    The bot populates <code>global_config_map</code> object in <code>hummingbot/client/config/global_config_map.py</code> with any values    previously saved in the yml file.</li> <li>When the user enters <code>config</code> command, the bot prompts the user all the items in <code>in_memory_config_map</code>.</li> <li>Once a user inputs her desired strategy, she can choose to <code>import</code> or <code>create</code> a configuration file.<ul> <li>if <code>import</code> is chosen, the user will be prompted to select a strategy config file. The bot will load all variables values and save them in-memory.</li> <li>if <code>create</code> is chosen, the bot will copy a strategy config template from <code>hummingbot/templates/conf_{STRATEGY_NAME}_strategy_{COUNT}.yml</code>.   The user will then fill out each of the configs required by that specific strategy.</li> </ul> </li> <li>With each user input, the bot will validate the input with a custom checker (more details on that in the ConfigVar class). If an input is invalid,     the user is prompted the same question again.</li> <li>After all the strategy configs are filled out, the bot uses the newly acquired info to figure out which variables     are require in global config settings (Which exchange API keys to prompt, etc).</li> <li>Since altering certain variables will trigger requirement for other variables, this prompt-and-config process loops until all variables are complete.</li> <li>When the loop finishes. The bot writes all of the config variables saved in memory to local <code>yml</code> files so that they can be reused for another session.</li> <li>The user can then start running her selected strategy with the set of configs currently stored in memory.</li> </ol>","title":"Default Configuration Flow"},{"location":"v2/config/#configvar-class","text":"<p>The ConfigVar Class is located in <code>hummingbot/client/config/config_var.py</code>. It standardizes each config setting with a set of attributes.</p>    Attribute Attribute Type Use     <code>key</code> str Unique key that identifies a config variable.   <code>prompt</code> str or callable Question displayed in the client when the bot collects user input for this config setting. You can modify the string in run time by passing a function rather than a static string.   <code>is_secure</code> bool Whether the user input needs to be masked with \"***\".   <code>default</code> any Default value for this variable if user input is None.   <code>type_str</code> str One of {\"str\", \"list\", \"dict\", \"float\", \"int\", \"bool\"}. Defaults to \"str\". This is used by <code>parse_cvar_value</code> to parse user input into correct data type.   <code>required_if</code> callable A condition check for whether this config setting needs to be prompted during the configuration flow.   <code>validator</code> callable A condition check for whether an input is a valid value for this config setting.   <code>on_validated</code> callable A function hook that gets activated if an input passes the validation check (e.g. set wallet requirement to True when a valid DEX name is entered.)    <p>Check <code>hummingbot/client/config/config_var.py</code> for more details.</p>","title":"ConfigVar Class"},{"location":"v2/config/#config-definition-conventions","text":"<ol> <li>Always place configs that will alters requirement state first.    Example: <code>telegram_token</code> should only be required if <code>telegram_enabled</code> is set to True. Therefore <code>telegram_enabled</code> should be listed before <code>telegram_token</code>.</li> <li>For exchange-specific configurations, use <code>using_exchange(\"exchange_name\")</code> as the <code>required_if</code> condition.</li> <li>When writing prompt questions, be sure to add examples for a better user experience.</li> <li>When prompting for a boolean value, add <code>(Yes/No)</code> as options so that the user knows what to enter.</li> <li>When prompting a question with a few choices as answers e.g. <code>[\"import\", \"create\", etc]</code>, make sure to include all options in the format of <code>(OPTION_1/OPTION_2/OPTION_3)</code>.    This pattern is recognized by our autocomplete system, and the user can hit <code>Tab</code> to have the option autofilled.</li> <li>When prompting for an exchange name, make sure to include 'exchange name', 'name of exchange' or 'name of the exchange' in the prompt text (case insensitive, e.g. Exchange Name is valid), our autocomplete system will list and autofill with exchange names supported by our system.</li> </ol>","title":"Config definition conventions"},{"location":"v2/config/bot-orchestration/","text":"<p>Hummingbot's config module helps onboard users who are new to running a trading bot. It is helpful in</p> <ul> <li>Compiling a list of absolutely essential config variables.</li> <li>Skip or provide default variables that are more advanced / have the potential to confuse new users.</li> <li>Collecting and validating user inputs as config values.</li> <li>Check if all configs are present before running any strategy.</li> </ul>","title":"Configuration Module"},{"location":"v2/config/bot-orchestration/#architecture","text":"<p>Currently, we split all the configuration variables into three different types.</p>    Config type In-memory location Saved to local yml Description     <code>global</code> <code>hummingbot/client/config/global_config_map.py</code> Yes Strategy-agnostic configs such as exchange API keys, wallet selection, etc.   <code>strategy</code> <code>hummingbot/strategy/{STRATEGY_NAME}/{STRATEGY_NAME}_strategy_config_map.py</code> Yes Strategy-specific configs.","title":"Architecture"},{"location":"v2/config/bot-orchestration/#default-configuration-flow","text":"<ol> <li>When the bot starts, it automatically reads all the global configurations from a file named <code>conf_global.yml</code>. If    such a file does not exist, it will copy the empty template from <code>hummingbot/templates/conf_global_TEMPLATE.yml</code>.    The bot populates <code>global_config_map</code> object in <code>hummingbot/client/config/global_config_map.py</code> with any values    previously saved in the yml file.</li> <li>When the user enters <code>config</code> command, the bot prompts the user all the items in <code>in_memory_config_map</code>.</li> <li>Once a user inputs her desired strategy, she can choose to <code>import</code> or <code>create</code> a configuration file.<ul> <li>if <code>import</code> is chosen, the user will be prompted to select a strategy config file. The bot will load all variables values and save them in-memory.</li> <li>if <code>create</code> is chosen, the bot will copy a strategy config template from <code>hummingbot/templates/conf_{STRATEGY_NAME}_strategy_{COUNT}.yml</code>.   The user will then fill out each of the configs required by that specific strategy.</li> </ul> </li> <li>With each user input, the bot will validate the input with a custom checker (more details on that in the ConfigVar class). If an input is invalid,     the user is prompted the same question again.</li> <li>After all the strategy configs are filled out, the bot uses the newly acquired info to figure out which variables     are require in global config settings (Which exchange API keys to prompt, etc).</li> <li>Since altering certain variables will trigger requirement for other variables, this prompt-and-config process loops until all variables are complete.</li> <li>When the loop finishes. The bot writes all of the config variables saved in memory to local <code>yml</code> files so that they can be reused for another session.</li> <li>The user can then start running her selected strategy with the set of configs currently stored in memory.</li> </ol>","title":"Default Configuration Flow"},{"location":"v2/config/bot-orchestration/#configvar-class","text":"<p>The ConfigVar Class is located in <code>hummingbot/client/config/config_var.py</code>. It standardizes each config setting with a set of attributes.</p>    Attribute Attribute Type Use     <code>key</code> str Unique key that identifies a config variable.   <code>prompt</code> str or callable Question displayed in the client when the bot collects user input for this config setting. You can modify the string in run time by passing a function rather than a static string.   <code>is_secure</code> bool Whether the user input needs to be masked with \"***\".   <code>default</code> any Default value for this variable if user input is None.   <code>type_str</code> str One of {\"str\", \"list\", \"dict\", \"float\", \"int\", \"bool\"}. Defaults to \"str\". This is used by <code>parse_cvar_value</code> to parse user input into correct data type.   <code>required_if</code> callable A condition check for whether this config setting needs to be prompted during the configuration flow.   <code>validator</code> callable A condition check for whether an input is a valid value for this config setting.   <code>on_validated</code> callable A function hook that gets activated if an input passes the validation check (e.g. set wallet requirement to True when a valid DEX name is entered.)    <p>Check <code>hummingbot/client/config/config_var.py</code> for more details.</p>","title":"ConfigVar Class"},{"location":"v2/config/bot-orchestration/#config-definition-conventions","text":"<ol> <li>Always place configs that will alters requirement state first.    Example: <code>telegram_token</code> should only be required if <code>telegram_enabled</code> is set to True. Therefore <code>telegram_enabled</code> should be listed before <code>telegram_token</code>.</li> <li>For exchange-specific configurations, use <code>using_exchange(\"exchange_name\")</code> as the <code>required_if</code> condition.</li> <li>When writing prompt questions, be sure to add examples for a better user experience.</li> <li>When prompting for a boolean value, add <code>(Yes/No)</code> as options so that the user knows what to enter.</li> <li>When prompting a question with a few choices as answers e.g. <code>[\"import\", \"create\", etc]</code>, make sure to include all options in the format of <code>(OPTION_1/OPTION_2/OPTION_3)</code>.    This pattern is recognized by our autocomplete system, and the user can hit <code>Tab</code> to have the option autofilled.</li> <li>When prompting for an exchange name, make sure to include 'exchange name', 'name of exchange' or 'name of the exchange' in the prompt text (case insensitive, e.g. Exchange Name is valid), our autocomplete system will list and autofill with exchange names supported by our system.</li> </ol>","title":"Config definition conventions"},{"location":"v2/config/docker-compose/","text":"<p>Hummingbot's config module helps onboard users who are new to running a trading bot. It is helpful in</p> <ul> <li>Compiling a list of absolutely essential config variables.</li> <li>Skip or provide default variables that are more advanced / have the potential to confuse new users.</li> <li>Collecting and validating user inputs as config values.</li> <li>Check if all configs are present before running any strategy.</li> </ul>","title":"Configuration Module"},{"location":"v2/config/docker-compose/#architecture","text":"<p>Currently, we split all the configuration variables into three different types.</p>    Config type In-memory location Saved to local yml Description     <code>global</code> <code>hummingbot/client/config/global_config_map.py</code> Yes Strategy-agnostic configs such as exchange API keys, wallet selection, etc.   <code>strategy</code> <code>hummingbot/strategy/{STRATEGY_NAME}/{STRATEGY_NAME}_strategy_config_map.py</code> Yes Strategy-specific configs.","title":"Architecture"},{"location":"v2/config/docker-compose/#default-configuration-flow","text":"<ol> <li>When the bot starts, it automatically reads all the global configurations from a file named <code>conf_global.yml</code>. If    such a file does not exist, it will copy the empty template from <code>hummingbot/templates/conf_global_TEMPLATE.yml</code>.    The bot populates <code>global_config_map</code> object in <code>hummingbot/client/config/global_config_map.py</code> with any values    previously saved in the yml file.</li> <li>When the user enters <code>config</code> command, the bot prompts the user all the items in <code>in_memory_config_map</code>.</li> <li>Once a user inputs her desired strategy, she can choose to <code>import</code> or <code>create</code> a configuration file.<ul> <li>if <code>import</code> is chosen, the user will be prompted to select a strategy config file. The bot will load all variables values and save them in-memory.</li> <li>if <code>create</code> is chosen, the bot will copy a strategy config template from <code>hummingbot/templates/conf_{STRATEGY_NAME}_strategy_{COUNT}.yml</code>.   The user will then fill out each of the configs required by that specific strategy.</li> </ul> </li> <li>With each user input, the bot will validate the input with a custom checker (more details on that in the ConfigVar class). If an input is invalid,     the user is prompted the same question again.</li> <li>After all the strategy configs are filled out, the bot uses the newly acquired info to figure out which variables     are require in global config settings (Which exchange API keys to prompt, etc).</li> <li>Since altering certain variables will trigger requirement for other variables, this prompt-and-config process loops until all variables are complete.</li> <li>When the loop finishes. The bot writes all of the config variables saved in memory to local <code>yml</code> files so that they can be reused for another session.</li> <li>The user can then start running her selected strategy with the set of configs currently stored in memory.</li> </ol>","title":"Default Configuration Flow"},{"location":"v2/config/docker-compose/#configvar-class","text":"<p>The ConfigVar Class is located in <code>hummingbot/client/config/config_var.py</code>. It standardizes each config setting with a set of attributes.</p>    Attribute Attribute Type Use     <code>key</code> str Unique key that identifies a config variable.   <code>prompt</code> str or callable Question displayed in the client when the bot collects user input for this config setting. You can modify the string in run time by passing a function rather than a static string.   <code>is_secure</code> bool Whether the user input needs to be masked with \"***\".   <code>default</code> any Default value for this variable if user input is None.   <code>type_str</code> str One of {\"str\", \"list\", \"dict\", \"float\", \"int\", \"bool\"}. Defaults to \"str\". This is used by <code>parse_cvar_value</code> to parse user input into correct data type.   <code>required_if</code> callable A condition check for whether this config setting needs to be prompted during the configuration flow.   <code>validator</code> callable A condition check for whether an input is a valid value for this config setting.   <code>on_validated</code> callable A function hook that gets activated if an input passes the validation check (e.g. set wallet requirement to True when a valid DEX name is entered.)    <p>Check <code>hummingbot/client/config/config_var.py</code> for more details.</p>","title":"ConfigVar Class"},{"location":"v2/config/docker-compose/#config-definition-conventions","text":"<ol> <li>Always place configs that will alters requirement state first.    Example: <code>telegram_token</code> should only be required if <code>telegram_enabled</code> is set to True. Therefore <code>telegram_enabled</code> should be listed before <code>telegram_token</code>.</li> <li>For exchange-specific configurations, use <code>using_exchange(\"exchange_name\")</code> as the <code>required_if</code> condition.</li> <li>When writing prompt questions, be sure to add examples for a better user experience.</li> <li>When prompting for a boolean value, add <code>(Yes/No)</code> as options so that the user knows what to enter.</li> <li>When prompting a question with a few choices as answers e.g. <code>[\"import\", \"create\", etc]</code>, make sure to include all options in the format of <code>(OPTION_1/OPTION_2/OPTION_3)</code>.    This pattern is recognized by our autocomplete system, and the user can hit <code>Tab</code> to have the option autofilled.</li> <li>When prompting for an exchange name, make sure to include 'exchange name', 'name of exchange' or 'name of the exchange' in the prompt text (case insensitive, e.g. Exchange Name is valid), our autocomplete system will list and autofill with exchange names supported by our system.</li> </ol>","title":"Config definition conventions"},{"location":"v2/config/multiple-bots/","text":"<p>Hummingbot's config module helps onboard users who are new to running a trading bot. It is helpful in</p> <ul> <li>Compiling a list of absolutely essential config variables.</li> <li>Skip or provide default variables that are more advanced / have the potential to confuse new users.</li> <li>Collecting and validating user inputs as config values.</li> <li>Check if all configs are present before running any strategy.</li> </ul>","title":"Configuration Module"},{"location":"v2/config/multiple-bots/#architecture","text":"<p>Currently, we split all the configuration variables into three different types.</p>    Config type In-memory location Saved to local yml Description     <code>global</code> <code>hummingbot/client/config/global_config_map.py</code> Yes Strategy-agnostic configs such as exchange API keys, wallet selection, etc.   <code>strategy</code> <code>hummingbot/strategy/{STRATEGY_NAME}/{STRATEGY_NAME}_strategy_config_map.py</code> Yes Strategy-specific configs.","title":"Architecture"},{"location":"v2/config/multiple-bots/#default-configuration-flow","text":"<ol> <li>When the bot starts, it automatically reads all the global configurations from a file named <code>conf_global.yml</code>. If    such a file does not exist, it will copy the empty template from <code>hummingbot/templates/conf_global_TEMPLATE.yml</code>.    The bot populates <code>global_config_map</code> object in <code>hummingbot/client/config/global_config_map.py</code> with any values    previously saved in the yml file.</li> <li>When the user enters <code>config</code> command, the bot prompts the user all the items in <code>in_memory_config_map</code>.</li> <li>Once a user inputs her desired strategy, she can choose to <code>import</code> or <code>create</code> a configuration file.<ul> <li>if <code>import</code> is chosen, the user will be prompted to select a strategy config file. The bot will load all variables values and save them in-memory.</li> <li>if <code>create</code> is chosen, the bot will copy a strategy config template from <code>hummingbot/templates/conf_{STRATEGY_NAME}_strategy_{COUNT}.yml</code>.   The user will then fill out each of the configs required by that specific strategy.</li> </ul> </li> <li>With each user input, the bot will validate the input with a custom checker (more details on that in the ConfigVar class). If an input is invalid,     the user is prompted the same question again.</li> <li>After all the strategy configs are filled out, the bot uses the newly acquired info to figure out which variables     are require in global config settings (Which exchange API keys to prompt, etc).</li> <li>Since altering certain variables will trigger requirement for other variables, this prompt-and-config process loops until all variables are complete.</li> <li>When the loop finishes. The bot writes all of the config variables saved in memory to local <code>yml</code> files so that they can be reused for another session.</li> <li>The user can then start running her selected strategy with the set of configs currently stored in memory.</li> </ol>","title":"Default Configuration Flow"},{"location":"v2/config/multiple-bots/#configvar-class","text":"<p>The ConfigVar Class is located in <code>hummingbot/client/config/config_var.py</code>. It standardizes each config setting with a set of attributes.</p>    Attribute Attribute Type Use     <code>key</code> str Unique key that identifies a config variable.   <code>prompt</code> str or callable Question displayed in the client when the bot collects user input for this config setting. You can modify the string in run time by passing a function rather than a static string.   <code>is_secure</code> bool Whether the user input needs to be masked with \"***\".   <code>default</code> any Default value for this variable if user input is None.   <code>type_str</code> str One of {\"str\", \"list\", \"dict\", \"float\", \"int\", \"bool\"}. Defaults to \"str\". This is used by <code>parse_cvar_value</code> to parse user input into correct data type.   <code>required_if</code> callable A condition check for whether this config setting needs to be prompted during the configuration flow.   <code>validator</code> callable A condition check for whether an input is a valid value for this config setting.   <code>on_validated</code> callable A function hook that gets activated if an input passes the validation check (e.g. set wallet requirement to True when a valid DEX name is entered.)    <p>Check <code>hummingbot/client/config/config_var.py</code> for more details.</p>","title":"ConfigVar Class"},{"location":"v2/config/multiple-bots/#config-definition-conventions","text":"<ol> <li>Always place configs that will alters requirement state first.    Example: <code>telegram_token</code> should only be required if <code>telegram_enabled</code> is set to True. Therefore <code>telegram_enabled</code> should be listed before <code>telegram_token</code>.</li> <li>For exchange-specific configurations, use <code>using_exchange(\"exchange_name\")</code> as the <code>required_if</code> condition.</li> <li>When writing prompt questions, be sure to add examples for a better user experience.</li> <li>When prompting for a boolean value, add <code>(Yes/No)</code> as options so that the user knows what to enter.</li> <li>When prompting a question with a few choices as answers e.g. <code>[\"import\", \"create\", etc]</code>, make sure to include all options in the format of <code>(OPTION_1/OPTION_2/OPTION_3)</code>.    This pattern is recognized by our autocomplete system, and the user can hit <code>Tab</code> to have the option autofilled.</li> <li>When prompting for an exchange name, make sure to include 'exchange name', 'name of exchange' or 'name of the exchange' in the prompt text (case insensitive, e.g. Exchange Name is valid), our autocomplete system will list and autofill with exchange names supported by our system.</li> </ol>","title":"Config definition conventions"},{"location":"v2/config/advanced/clock/","text":"<p>Starting with version 1.8.0, the <code>tick_size</code> is now added as a variable in the ClientConfigMap, this means that you will be able to change the value of the tick size in the <code>conf_client.yml</code> file or by running <code>config tick_size</code> from within Hummingbot</p>","title":"Clock tick size"},{"location":"v2/config/advanced/clock/#how-it-works","text":"<p>All the major components of Hummingbot are Time Iterators like the connectors and the strategies. The Clock notifies all the components involved in the strategy by calling the method <code>c_tick()</code> of the time iterators every <code>tick_size</code>. By default the <code>tick_size</code> (or how long it takes Hummingbot to loop through a strategy iteration) is currently set to 1 second.</p>","title":"How it works"},{"location":"v2/config/advanced/clock/#how-to-configure-tick-size","text":"<p>There are two ways to configure the tick size</p> <ul> <li>From within Hummingbot, run the command <code>config tick_size</code> and enter the desired tick size in decimal form.</li> </ul> <p></p> <ul> <li>Stop and exit Hummingbot then edit the <code>conf_client.yml</code> file located inside the <code>hummingbot_conf</code> folder using a text editor. Look for <code>tick_size: 1.0</code> and change <code>1.0</code> to whatever tick size you want. Save the changes to the yml file then run Hummingbot again for the changes to take effect.</li> </ul> <p></p>  <p>Note</p> <p>Due to connector limitations, the tick size cannot be set lower than <code>0.1</code> seconds</p>  <p>To check what the current <code>tick_size</code> is, you can run the <code>config</code> command and check the tick_size value under the Global Configurations section</p> <p></p>","title":"How to configure Tick Size"},{"location":"v2/config/advanced/clock/#more-resources","text":"<p>Here's a short video where Foundation developer Federico shows how the tick_size works: https://www.loom.com/share/138d49d3ceb34da9943f114d848dbe77</p>","title":"More Resources"},{"location":"v2/config/advanced/debug/","text":"<p>The debug console is a powerful tool for Hummingbot developers to inspect and modify the live states in Hummingbot while it's running. It gives access to a live Python console living in the same process as Hummingbot. It can be thought of as similar to the developer console found in most modern browsers.</p>","title":"Debug Console"},{"location":"v2/config/advanced/debug/#activating-the-debug-console","text":"<p>The debug console is disabled by default. You need to enable it by setting <code>debug_console: true</code> in the <code>hummingbot_conf/conf_client.yml</code> file.</p> <p></p>","title":"Activating the Debug Console"},{"location":"v2/config/advanced/debug/#entering-the-debug-console","text":"<p>When you start Hummingbot with debug console enabled, it will print out a \"Started debug console\" log message at start.</p> <p></p> <p>As specified in the message, you can use <code>ssh</code> to access the debug console and exit with <code>CTRL + D</code>. The server accepts any user name (i.e. <code>ssh random@localhost -p 8211</code> works just as well).</p> <p></p>","title":"Entering the Debug Console"},{"location":"v2/config/advanced/debug/#accessing-python-modules-and-exposed-objects","text":"<p>Once you've entered the debug console, you have access to a fully featured Python interpreter living in the Hummingbot process.</p> <p>You can access all the exposed properties under the <code>HummingbotApplication</code> class via the <code>hb</code> object.</p> <p>Here are some of the exposed properties you can access from the debug console:</p> <ul> <li><code>hb.strategy</code>: The currently active strategy object</li> <li><code>hb.markets</code>: A dictionary of active market connectors</li> <li><code>hb.acct</code>: The currently active Ethereum wallet object</li> <li><code>hb.clock</code>: The clock object that's driving all the Hummingbot components</li> </ul> <p></p>","title":"Accessing Python Modules and Exposed Objects"},{"location":"v2/config/advanced/debug/#sample-ways-to-use-the-console","text":"<p>Below is an example where a developer queries the currently active bids/asks under the strategy.</p> <p></p> <p>You should refer to the source code of the exposed objects to see what properties you can inspect and modify inside the debug console.</p>","title":"Sample Ways to Use the Console"},{"location":"v2/config/advanced/rate-limits/","text":"<p>Some exchanges impose rate limits per account. When running multiple bots using a single account, <code>rate_limits_share_pct</code> users to set a certain percentage of the total limit to each instance. When the bot is near the allocated limit, Hummingbot sends a notification as a warning so users can adjust their configuration before the account is banned.</p> <p>For example, the rate limit for AscendEX is 100 requests per second. Your account will be banned for a certain period of time if you keep hitting the rate limit in 10 minutes (status code <code>429</code> or <code>100014</code>).</p> <p>Setting 50% for <code>rate_limits_share_pct</code> means we want the bot to send a notification when it starts to send 50 requests per second for that specific instance.</p>","title":"Rate Limits Share Pct"},{"location":"v2/config/advanced/rate-limits/#how-to-use-the-parameter","text":"<ol> <li>Run <code>config rate_limits_share_pct</code> while the strategy is stopped</li> <li>Enter the percentage of API rate limit you want to allocate to the bot </li> <li>Start the strategy using <code>start</code> command</li> <li>A notification will be displayed in the output pane when the <code>rate_limits_share_pct</code> value is about to be reached </li> </ol>  <p>Note</p> <p>You can also configure this setting while the strategy is running. However, the strategy must be restarted for the changes to take effect.</p>","title":"How to use the parameter"},{"location":"v2/config/advanced/rate-oracle/","text":"<p>This new feature provides real time, most up-to-date exchange rate on any given token or currency from a reliable and trustworthy data source.</p>  <p>Note</p> <p>Use rate oracle with the cross exchange market making and arbitrage strategies.</p>","title":"Rate Oracle"},{"location":"v2/config/advanced/rate-oracle/#parameters","text":"","title":"Parameters"},{"location":"v2/config/advanced/rate-oracle/#rate_oracle_source","text":"<p>The source where you want to pull data from, it can either be Binance, Coingecko, Kucoin or Ascendex. Please take note that using Coingecko will have a 30-second delay due to their API rate limit.</p> <pre><code>What source do you want rate oracle to pull data from? (binance, coingecko, kucoin, ascend_ex)\"\n&gt;&gt;&gt;\n</code></pre>","title":"<code>rate_oracle_source</code>"},{"location":"v2/config/advanced/rate-oracle/#global_tokenglobal_token_name","text":"<p>This is a token which you can display other tokens' value in. Set the <code>global_token.global_token_name</code> according to your preferred token value.</p> <pre><code>What is your default display token? (e.g. USDT,USD,EUR)\n&gt;&gt;&gt;\n</code></pre>","title":"<code>global_token.global_token_name</code>"},{"location":"v2/config/advanced/rate-oracle/#global_tokenglobal_tokenglobal_token_symbol","text":"<p>The symbol for the global token.</p> <pre><code>What is your default display token symbol? (e.g. $, \u20ac)\n&gt;&gt;&gt;\n</code></pre>  <p>Tip</p> <p>If you happen to <code>start</code> the bot and produce the error <code>Oracle rate is not available</code>, or ff the <code>rate_oracle_source</code> fails to show any price reference on your pair, you may change the <code>oracle_source</code> by running <code>config rate_oracle_source</code> and switch between Binance, Coingecko, Kucoin or Ascendex.</p>  <p></p>","title":"<code>global_token.global_token.global_token_symbol</code>"},{"location":"v2/config/advanced/rate-oracle/#how-it-works","text":"<p>If you need to view the rate oracle conversion after the <code>balance</code>, <code>pnl</code>, <code>open_orders</code>, <code>trades</code>, and <code>status</code> command, set it manually in the <code>conf_client.yml</code>.</p>  <p>Note</p> <p>In past versions of Hummingbot (1.5.0 and below), the <code>conf_client.yml</code> file is named <code>conf_global.yml</code></p>  <p>To set the parameters for <code>rate_oracle_source</code>, <code>global_token.global_token_name</code> and <code>global_token.global_token_symbol</code>, run the <code>config</code> command.</p> <p>Refer to the example below:</p> <p>Change the default setting in <code>conf_client.yml</code> to GBP (Great Britain Pound). The conversion will show up when you run <code>balance</code> command.</p> <p></p> <p></p> <p>The conversion also shows up during the <code>status</code> command for the <code>liquidity_mining</code> strategy. Under the <code>Miner</code> section.</p> <p></p> <p>The conversion shows up when using the <code>pnl</code> command.</p> <p></p> <p>The conversion also shows up when running the <code>trades</code> command.</p> <p></p> <p>The conversion also works with the <code>open_orders</code> command.</p> <p></p>","title":"How it works"},{"location":"v2/config/advanced/telegram/","text":"<p>Integrating Hummingbot with Telegram Messenger allows you to get real-time updates and issue commands to your trading bot from any device where you have Telegram installed. Whether you are running Hummingbot in the cloud or on your local machine, you can use Telegram to monitor and control bots from wherever you are!</p>","title":"Telegram Integration"},{"location":"v2/config/advanced/telegram/#creating-a-telegram-bot","text":"<p>Click this link to launch the official BotFather bot, a Telegram bot that helps you create and manage Telegram bots: https://telegram.me/BotFather.</p> <ol> <li>In Telegram, go to the newly-created BotFather chat pane, and click Start or type <code>/start</code></li> <li>Enter <code>/newbot</code> to create a bot</li> <li>Enter a name for your bot, the title of the bot in Telegram e.g. <code>hummingbot</code></li> <li>Enter a unique ID that ends with the word <code>bot</code> (e.g. <code>my_awesome_hummingbot</code>)</li> <li>Make sure to copy or save the token. This is needed for enabling Telegram on Hummingbot.</li> <li>Click the link to your new bot in the message above launch it: <code>t.me/&lt;YOUR BOT NAME&gt;</code>.</li> <li>Click <code>Start</code> or type <code>/start</code> to start the bot</li> </ol> <p></p>","title":"Creating a Telegram Bot"},{"location":"v2/config/advanced/telegram/#getting-your-telegram-id","text":"<p>Click this following to launch userinfobot, a Telegram bot that helps you retrieve your Telegram ID: https://telegram.me/userinfobot.</p> <p></p> <p>In Telegram, go to the newly-created userinfobot chat pane, and click <code>Start</code> or type <code>/start</code>. Save the ID number.</p>","title":"Getting your Telegram ID"},{"location":"v2/config/advanced/telegram/#setting-up-in-hummingbot","text":"<p>You can now startup Hummingbot and confirm that the integration is properly configured. To enable Telegram in Hummingbot do the following:</p> <ol> <li>Run <code>config telegram_enabled</code> and set to True or answer Yes to enable the Telegram integration</li> <li>Run <code>config telegram_token</code> and enter the Telegram token ID from BotFather</li> <li>Run <code>config telegram_chat_id</code> and enter the chat ID from Getting your Telegram ID</li> </ol>","title":"Setting up in Hummingbot"},{"location":"v2/config/advanced/telegram/#using-the-telegram-bot","text":"<p>Before you start Hummingbot, make sure that the Telegram bot is live. If so, you should see a chat pane with your bot's name in Telegram. Start Hummingbot as you would normally. Telegram will be connected as soon as you run <code>start</code> in your hummingbot CLI window. Messages are synchronized in real-time between the Telegram bot and the actual Hummingbot instance running. For example, you can use commands such as <code>status</code> and <code>history</code> to monitor the bot's performance, <code>config</code> shows bot current configurations and you can use <code>start</code> and <code>stop</code> to control the bot.</p> <p></p>  <p>Tip</p> <p>If you are running multiple bots with Telegram enabled, you can use the same Telegram chat ID with different API tokens from each bot you created to control all of them. You can also use their chat folders feature to organize your bots.</p>","title":"Using the Telegram Bot"},{"location":"v2/config/basic/api-keys/","text":"<p>The <code>connect</code> command lets you add your user credentials in order to connect to an exchange or protocol. For centralized exchanges, this command asks you for your API key, while blockchain protocols asks you for your private key.</p> <p>Hummingbot stores both API keys and private keys on the local machine in encrypted form, with the Hummingbot client password as the key.</p>","title":"Adding API Keys"},{"location":"v2/config/basic/api-keys/#connecting-to-exchanges","text":"<ol> <li>Run <code>connect [exchange_name]</code> command e.g. <code>connect binance</code></li> <li>Enter API and secret keys when prompted</li> <li>Other exchanges may require additional details such as account ID, exchange address, etc.</li> </ol> <p>See Exchanges for more information about how to create API keys for each exchange.</p>  <p>Only enable Read and Trade access</p> <p>For security reasons, Hummingbot does not support deposit and withdrawal functionality. Therefore, we recommend using only read + trade enabled API keys. It is not necessary to enable withdraw, transfer, or anything equivalent to retrieving assets from your wallet.</p>","title":"Connecting to exchanges"},{"location":"v2/config/basic/api-keys/#checking-connection-status","text":"<p>Run the <code>connect</code> command to view the status of each connector. It also shows failed connections due to connectivity issues, invalid API key permissions, etc.</p> <p></p> <p>Keys Added column indicates if API keys are added to Hummingbot.</p> <p>Keys Confirmed column shows the status if Hummingbot has successfully connected to the exchange or protocol.</p> <p>Tier column shows the connector tier (Gold, Silver, Bronze). For more info on connector tiers see the exchanges documentation.</p>","title":"Checking connection status"},{"location":"v2/config/basic/balances/","text":"","title":"How to get Balances"},{"location":"v2/config/basic/balances/#exchange-and-wallet-balance","text":"<p>Run\u00a0the <code>balance</code>\u00a0command to check the balances of all connected wallets and exchanges.</p> <p></p> <p>The \"Allocated\"\u00a0column shows how much of your assets are being used when there are active orders.</p>","title":"Exchange and wallet balance"},{"location":"v2/config/basic/balances/#paper-trade-balance","text":"<p>Run\u00a0the <code>balance paper</code> command\u00a0to check your paper trade account balance.</p> <p></p> <p>By default, these are the paper trade balances pre-loaded in Hummingbot. You can also enter additional assets and credits to use in paper trade mode.</p>","title":"Paper Trade balance"},{"location":"v2/config/basic/balances/#adding-paper-trade-balance","text":"<p>By default, the paper trade account has the following tokens and balances which you can see when you run the\u00a0<code>balance paper</code>\u00a0command.</p> <pre><code>&gt;&gt;&gt;  balance paper\nPaper account balances:\n    Asset    Balance\n      DAI  1000.0000\n      ETH    10.0000\n      ONE  1000.0000\n     TUSD  1000.0000\n     USDC  1000.0000\n     USDQ  1000.0000\n     USDT  1000.0000\n     WETH    10.0000\n      ZRX  1000.0000\n</code></pre> <p>When adding balances, specify the asset and balance you want by running this command\u00a0<code>balance paper [asset] [amount]</code>.</p> <p>For example, we want to add 0.5 BTC and check our paper account balance to confirm.</p> <pre><code>&gt;&gt;&gt;  balance paper BTC 0.5\nPaper balance for BTC token set to 0.5\n\n&gt;&gt;&gt;  balance paper\nPaper account balances:\n    Asset    Balance\n      BTC     0.5000\n      DAI  1000.0000\n      ETH    10.0000\n      ONE  1000.0000\n     TUSD  1000.0000\n     USDC  1000.0000\n     USDQ  1000.0000\n     USDT  1000.0000\n     WETH    10.0000\n      ZRX  1000.0000\n</code></pre>","title":"Adding Paper Trade Balance"},{"location":"v2/config/basic/balances/#balance-limits","text":"<p>Sets the amount limit on how much assets Hummingbot can use in an exchange or wallet. This can be useful when running multiple bots on different trading pairs with same tokens e.g. running a BTC-USDT pair and another bot on ETH-USDT using the same account.</p>","title":"Balance limits"},{"location":"v2/config/basic/balances/#how-it-works","text":"<p>You can set how much of a particular token the bot can use by running the command\u00a0<code>balance limit [exchange] [asset] [amount]</code>. You can disable this feature by editing it in the global config file and set it to -1. While setting it to 0 will initially not place any order for a specific asset until a trade is executed to accumulate the said asset.</p> <p>For example:</p> <pre><code>&gt;&gt;&gt;  balance limit binance USDT 20\nLimit for USDT on bybit exchange set to 20.0\n</code></pre> <p>Run the <code>balance limit</code> command to confirm if the changes are applied</p> <p></p>","title":"How it works"},{"location":"v2/config/basic/balances/#example-scenario","text":"<p>Create a pure market making strategy, run\u00a0the <code>config</code> command\u00a0to view the whole configuration. The command <code>balance limit bybit USDT 20</code> is used as example</p> <p></p> <p>On this scenario we set a config with <code>order_levels 2</code> this way we can also see how the balance limit works. The strategy would only be able to create orders that will not be more than 20 USDT.  On the screenshot below, the client was trying to buy a XRP on a amount of 10.137 USDT and observed that the second buy order amount adjusted due to balance limit.</p> <p></p> <p>On the screenshot below, a buy order has been successfully filled and after order refresh time the client created orders again but observed that now it did not created another order level since it is beyond the set balance limit of 20 USDT.</p> <p></p>","title":"Example Scenario"},{"location":"v2/config/basic/commands/","text":"","title":"Commands and Shortcuts"},{"location":"v2/config/basic/commands/#hummingbot-commands","text":"<p>Below are the available commands in the current Hummingbot release.</p>    Command Function     <code>connect</code> List available exchanges and add API keys to them   <code>create</code> Create a new bot   <code>import</code> Import an existing bot by loading the configuration file   <code>help</code> List available commands   <code>balance</code> Display your asset balances across all connected exchanges   <code>config</code> Display the current bot's configuration   <code>start</code> Start the current bot   <code>stop</code> Stop the current bot   <code>status</code> Get the market status of the current bot   <code>history</code> See the past performance of the current bot   <code>gateway</code> Helper commands for Gateway server   <code>exit</code> Exit and cancel all outstanding orders   <code>export</code> Export your bot's trades or private keys   <code>ticker</code> Show market ticker of current order book   <code>pmm_script</code> Send command to running PMM script instance   <code>previous</code> Imports the last strategy used   <code>rate</code> Show rate of a given trading pair   <code>order_book</code> Displays the top 5 bid/ask prices and volume   <code>tab_example</code> Display hello world","title":"Hummingbot commands"},{"location":"v2/config/basic/commands/#gateway-commands","text":"Command Function     <code>config</code> View or update gateway configuration   <code>connect</code> Start the current bot   <code>connector-tokens</code> Report token balances for gateway connectors   <code>generate-certs</code> Create ssl certificate for gateway   <code>list</code> Shows a list of all available gateway connectors and their tiers   <code>status</code> Check status of gateway docker instance   <code>test-connection</code> Ping gateway api server    <p>Users can also use <code>gateway -h</code> this will print out the different commands you can use with gateway.</p> <pre><code>&gt;&gt;&gt; gateway -h\nusage: gateway [-h] {config,connect,connector-tokens,generate-certs,status,test-connection} ...\n\npositional arguments: {config,connect,connector-tokens,generate-certs,status,test-connection}\n\nconfig              View or update gateway configuration\nconnect             Create/view connection info on gateway connector\nconnector-tokens    Report token balances for gateway connectors\ngenerate-certs      Create ssl certificate for gateway\ntest-connection     Ping gateway api server\n\noptional arguments:\n-h, --help          show this help message and exit\n</code></pre> <p>Gateway help command can also be used this way <code>gateway [command]-h</code></p> <pre><code>&gt;&gt;&gt; gateway config -h\nusage: gateway config [-h]\n</code></pre> <p>It can also be used with a different command:</p> <pre><code>&gt;&gt;&gt; gateway connector-tokens -h\nusage: gateway connector-tokens [-h] [connector_chain_network] [new_tokens]\n\npositional arguements:\nconnector_chain_network  Name of connector you want to edit reported tokens for\nnew_tokens             Report balance of these tokens\n</code></pre>","title":"Gateway commands"},{"location":"v2/config/basic/commands/#docker-commands","text":"<p>These are the commonly used docker commands when using Hummingbot.</p>    Command Function     <code>docker ps -a</code> List containers   <code>docker rm [container name]</code> Remove one or more containers   <code>docker rmi [image name]</code> Remove one or more images   <code>docker rm $(docker ps -a q)</code> Remove all containers    <p>To view more docker commands, go to Docker Command Line Reference.</p>","title":"Docker commands"},{"location":"v2/config/basic/commands/#linux-commands","text":"<p>These are the basic commands used to navigate Linux commonly used with Hummingbot.</p>    Command Function     <code>ls</code> Lists all files and folders in the current directory   <code>cd</code> Change directory / move to another folder location   <code>mv</code> Moves or renames a file or directory   <code>cp</code> To copy files or group of files or directory   <code>rm</code> Remove / delete files and folders   <code>top</code> Details on all active processes   <code>htop</code> Monitor the system processes in real time    <p>For more information about basic Linux commands, check out The Linux command line for beginners.</p>","title":"Linux commands"},{"location":"v2/config/basic/commands/#keyboard-shortcuts","text":"Keyboard Combo Command Description     Double Ctrl + C Exit Press <code>CTRL + C</code> twice to exit the bot   Ctrl + S Status Show bot status   Ctrl + F Search /  Hide Search Toggle search in log pane   Ctrl + X Exit Config Exit from the current configuration question   Ctrl + A Select All * Select all text   Ctrl + Z Undo * Undo action   Single Ctrl + C Copy * Copy text   Ctrl + V Paste * Paste text   Ctrl + T Toggle Logs Hide / Show logs pane    <p>* Used for text edit in input pane only.</p> <p>Note about search:</p> <ol> <li>Press Ctrl + F to trigger display the search field</li> <li>Enter your search keyword (not case sensitive)</li> <li>Hit <code>Enter</code> to jump to the next matching keyword (incremental search)</li> <li>When you are done, press Ctrl + F again to go back to reset</li> </ol> <p>Linux</p>    Keyboard Combo Command     Ctrl + C Copy   SHIFT + RMB (right-mouse button) Paste    <p>To highlight, hold SHIFT + LMB (left mouse button) and drag across the text you want to select.</p> <p>Mac</p>    Keyboard Combo Command     \u2318 + C Copy   \u2318 + V Paste     <p>Note</p> <p>To select text on macOS, you may need to enable the Allow Mouse Reporting option by pressing \u2318 + R or selecting View &gt; Allow Mouse Reporting in the menu bar.</p>  <p></p> <p>Then you should be able to select text by holding <code>LMB</code> (left mouse button) and drag. You can also hold down <code>\u2325 + shift</code> to select specific lines like the image below.</p> <p></p> <p>When accessing Hummingbot on a Linux cloud server through <code>ssh</code> using a macOS terminal, hold down the <code>Option \u2325</code> key or <code>\u2325 + \u2318</code> to highlight text.</p> <p>Windows</p>    Keyboard Combo Command     CTRL + SHIFT + C Copy   CTRL + SHIFT + V Paste    <p>To use this shortcut, check this box by doing a right-click on the title bar at the top of the Hummingbot window, then select Properties.</p> <p></p>","title":"Keyboard shortcuts"},{"location":"v2/config/basic/commands/#adding-new-commands","text":"<p>Currently, Hummingbot supports the following commands:</p> <p></p> <p>Depending on the usage of the hummingbot client, you may need to add new commands to the client. This is done by adding a new command class to the <code>hummingbot/client/command</code> directory.</p> <p>The new command class should be called <code>&lt;command_name&gt;_command.py</code></p> <p>The new class should be called <code>&lt;CommandName&gt;Command</code> and adhere to the CamelCase naming convention.</p> <p>The new class should have a function called <code>command_name</code> which will be ran when the command is called in the Hummingbot client.</p> <p>Add the new class to the <code>__init__.py</code> file in the <code>hummingbot/client/command</code> directory and add any necessary imports to the <code>__init__.py</code> file.</p> <p></p> <p>The last step is to add any other functions that the new command class may need.</p> <p>Please note: check the <code>hummingbot/client/command</code> directory for any existing commands that may be similar to the new command you are adding.</p>","title":"Adding New Commands"},{"location":"v2/config/basic/launch-exit/","text":"<p>This page contains information on launching and exiting the application, assuming Hummingbot is installed already on your machine.</p>","title":"Launch and Exit Hummingbot"},{"location":"v2/config/basic/launch-exit/#launch-via-docker","text":"Using Helper ScriptsUsing Docker Compose fileManual Docker commands   <p>Download the <code>start.sh</code> helper script</p> <p><pre><code>wget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/start.sh\n</code></pre> Change permissions</p> <p><pre><code>chmod a+x start.sh\n</code></pre> Run the script</p> <pre><code>./start.sh\n</code></pre>   <p>Placeholder text</p>   <p>List all docker containers</p> <pre><code>docker ps -a\n</code></pre> <p>Start the docker container</p> <pre><code>docker start [container_name]\n</code></pre> <p>Connect to the container</p> <pre><code>docker attach [container_name]\n</code></pre>","title":"Launch via Docker"},{"location":"v2/config/basic/launch-exit/#launch-from-source","text":"<p>Make sure the hummingbot conda environment is enabled.</p> <pre><code>conda activate hummingbot\n</code></pre> <p>In the <code>hummingbot</code> parent directory, run this command to launch the application:</p> <pre><code>bin/hummingbot.py\n</code></pre> <p></p>","title":"Launch from source"},{"location":"v2/config/basic/launch-exit/#exit-hummingbot","text":"<p>Running the <code>exit</code> command cancels all outstanding orders and exit the Hummingbot interface. In case of errors, the command <code>exit -f</code> will force the application to close.</p>  <p>Tip</p> <p>You can also press the keyboard shortcut Ctrl + C twice to exit.</p>","title":"Exit Hummingbot"},{"location":"v2/config/basic/launch-exit/#working-with-passwords","text":"","title":"Working with Passwords"},{"location":"v2/config/basic/launch-exit/#create-and-delete-password","text":"<p>The password in Hummingbot encrypts sensitive data such as API keys, secret keys, and wallet private keys. For security reasons, the password is only stored locally in encrypted form, and we do not have access to it.</p>","title":"Create and Delete Password"},{"location":"v2/config/basic/launch-exit/#creating-a-password","text":"<p>If you are using Hummingbot for the first time, the system will prompt you to create a password. There are no character requirements, although we recommend using a strong password for additional security.</p> <p>You can click the OK button on the welcome screen or you can press TAB to navigate the selection and ENTER to confirm.</p> <p>Passwords are stored locally in your computer. No passwords are uploaded to any server.</p> <p></p>","title":"Creating a password"},{"location":"v2/config/basic/launch-exit/#deleting-a-password","text":"<p>The password is stored as an encrypted <code>.password_verification</code> file in <code>hummingbot_conf</code> (via Docker and binary) or <code>/conf</code> directory (installed from source).</p> <p>Delete the <code>.password_verification</code> file under the <code>hummingbot_conf</code> folder to reset the password. Note that the .password_verification file is hidden so you won't be able to see it by default unless you set your system to show all hidden files. In the terminal use the <code>ls -a</code> command to list all files</p> <p></p>  <p>Warning</p> <p>This will disconnect your API keys from Hummingbot. You will have to re-connect your API keys.</p>","title":"Deleting a password"},{"location":"v2/config/basic/paper-trading/","text":"<p>This feature allows users to test Hummingbot and simulate trading strategies without risking any actual assets. Paper trading allows you to use most of the hummingbot strategies so you can have a better understanding of how each parameter works with another and expected behavior.</p> <p>While paper trading prepares you to your first Hummingbot journey, keep in mind that the results and data are not the same when doing live trading as you have to be aware of the risks specially you are using with real assets!</p>  <p>Note</p> <p>Exchange APIs are not required to run the bot on paper_trade for market making strategies like Pure market making, Cross-exchange market making and Avellaneda strategy</p>","title":"Paper Trading"},{"location":"v2/config/basic/paper-trading/#adding-exchanges","text":"<p>Users can now add paper exchanges by adding the exchange of choice in\u00a0<code>conf_client.yml</code>. Previously, it was only available for AscendEX, Binance, Gate io, and Kucoin. Users can find\u00a0<code>conf_client.yml</code>\u00a0in\u00a0<code>hummingbot/conf/conf_client.yml</code></p> <p>Add the paper trade exchange, for example <code>Kraken</code>, to <code>conf_client.yml</code></p> <pre><code>paper_trade:\n  paper_trade_exchange:\n    - binance\n    - kucoin\n    - ascend_ex\n    - gate_io\n    - kraken\n</code></pre> <p>In the Hummingbot client, <code>kraken_paper_trade</code> should now be available when you select an exchange:</p> <p><code>Enter your maker spot connector &gt;&gt;&gt; kraken_paper_trade</code></p>","title":"Adding exchanges"},{"location":"v2/config/basic/paper-trading/#enabling-and-disabling","text":"<p>Paper trading can be enabled when creating a strategy and choosing an exchange when prompted\u00a0<code>Enter your maker spot connector</code>\u00a0during the creation of the strategy.</p> <p></p> <p>Alternatively, you can enable paper trading by inputting\u00a0<code>config exchange</code>\u00a0then choose the exchange that supports paper trade.</p> <p></p> <p>To choose a different connector and go live, simply choose the exchange name without the\u00a0<code>paper_trade</code>\u00a0suffix then do the command\u00a0<code>stop</code>\u00a0and\u00a0<code>start</code>\u00a0so the changes will reflect on your configuration.</p> <p></p>","title":"Enabling and Disabling"},{"location":"v2/config/basic/paper-trading/#adding-paper-trade-balance","text":"<p>By default, the paper trade account has the following tokens and balances which you can see when you run the\u00a0<code>balance paper</code>\u00a0command.</p> <pre><code>&gt;&gt;&gt;  balance paper\nPaper account balances:\n    Asset    Balance\n      DAI  1000.0000\n      ETH    10.0000\n      ONE  1000.0000\n     TUSD  1000.0000\n     USDC  1000.0000\n     USDQ  1000.0000\n     USDT  1000.0000\n     WETH    10.0000\n      ZRX  1000.0000\n</code></pre> <p>When adding balances, specify the asset and balance you want by running this command\u00a0<code>balance paper [asset] [amount]</code>.</p> <p>For example, we want to add 0.5 BTC and check our paper account balance to confirm.</p> <pre><code>&gt;&gt;&gt;  balance paper BTC 0.5\nPaper balance for BTC token set to 0.5\n\n&gt;&gt;&gt;  balance paper\nPaper account balances:\n    Asset    Balance\n      BTC     0.5000\n      DAI  1000.0000\n      ETH    10.0000\n      ONE  1000.0000\n     TUSD  1000.0000\n     USDC  1000.0000\n     USDQ  1000.0000\n     USDT  1000.0000\n     WETH    10.0000\n      ZRX  1000.0000\n</code></pre>","title":"Adding Paper Trade Balance"},{"location":"v2/config/basic/paper-trading/#exchange-testnets","text":"<p>Some of our connectors also support testnet which can also be used experimentation without the risk of losing real funds. You may want to check the following connectors</p>    Connector Spot Perpetual     Binance  binance_perpetual_testnet   Bybit bybit_testnet bybit_perpetual_testnet   Ndax ndax_testnet        Chain Testnet     Ethereum Goerli   Avalanche Fuji   Binance Smart Chain BSC testnet   Polygon Mumbai","title":"Exchange testnets"},{"location":"v2/config/basic/user-interface/","text":"<p></p> <p>The CLI is divided into five panes:</p> <ul> <li>Input pane (lower left): Where users enter commands</li> </ul> <p></p> <ul> <li>Output pane (upper left): Prints the output of the user's commands</li> </ul> <p></p> <ul> <li>Log pane (right): Log messages</li> </ul> <p></p> <ul> <li> <p>Top navigation bar: Displays the status/information of the following items</p> <ul> <li> <p>Version:</p> <ul> <li>Reference of Version Release (Currently at 1.13.0)</li> </ul> </li> <li> <p>Strategy:</p> <ul> <li>Hummingbot has different strategy configurations that can be used for trading or liquidity mining. Currently we are moving away from strategy based config in favor of scripts. See the quick start guide for scripts here</li> </ul> </li> <li> <p>Strategy_file:</p> <ul> <li>Displays the current in use <code>strategy</code> or <code>script</code> file</li> </ul> </li> </ul> </li> </ul> <p></p> <ul> <li> <p>Bottom navigation bar: Displays the information of the following items</p> <ul> <li>Trades<ul> <li>Number of trades done by the bot</li> <li>Total P&amp;L</li> <li>Total profit &amp; loss</li> <li>Return%</li> <li>Return percentage of assets</li> </ul> </li> <li>CPU<ul> <li>CPU usage of the computer</li> </ul> </li> <li> <p>Mem</p> <ul> <li>Memory usage of the computer</li> </ul> </li> <li> <p>Threads</p> </li> <li>Duration<ul> <li>Duration of the trading session</li> </ul> </li> </ul> </li> </ul> <p></p>","title":"User Interface Guide"},{"location":"v2/config/basic/user-interface/#show-and-hide-log-pane","text":"<p>The log pane on the right can be shown or hidden in two ways:</p> <ol> <li>Click the <code>log pane</code> button in the upper right hand corner</li> <li>Press CTRL + T shortcut on your keyboard</li> </ol> <p></p>","title":"Show and hide log pane"},{"location":"v2/config/basic/user-interface/#tabs","text":"<p>Users can now open another tab in the left pane of Hummingbot where the log pane is supposed to be upon entering a command associated with the Tabs feature. Users can now switch between the <code>log pane</code> and the new tab they have opened simulateneously.</p>  <p>Note</p> <p>Currently, the feature only works with the <code>order_book</code> parameter.</p>","title":"Tabs"},{"location":"v2/config/basic/user-interface/#opening-and-closing","text":"","title":"Opening and Closing"},{"location":"v2/config/basic/user-interface/#opening-a-tab","text":"<p>Use the tabs by simply inputting a command associated with the tabs feature.</p> <p>Upon using the <code>order_book</code> command and any suffix it will open a tab automatically.</p> <p></p> <p></p>","title":"Opening a tab"},{"location":"v2/config/basic/user-interface/#closing-a-tab","text":"<p>Simply click on the <code>x</code> at the top right corner or inputting <code>parameter_name --close</code></p> <p>One option to close the tab is by clicking on the <code>x</code> next to <code>order_book</code></p> <p></p> <p>Alternatively, you can remove the new tab by inputting the <code>order_book --close</code> command to close the tab</p> <p></p> <p></p>","title":"Closing a tab"},{"location":"v2/config/basic/user-interface/#keyboard-shortcuts","text":"Keyboard Combo Command Description     Double CTRL + C Exit Press <code>CTRL + C</code> twice to exit the bot   CTRL + S/kbd&gt; Status Show bot status   CTRL + F Search /  Hide Search Toggle search in log pane   CTRL + X Exit Config Exit from the current configuration question   CTRL + A Select All * Select all text   CTRL + Z Undo * Undo action   Single CTRL + C Copy * Copy text   CTRL + V Paste * Paste text   CTRL + R Reset Style Set default color style   CTRL + T Toggle logs Hide / show the logs pane    <p>* Used for text edit in input pane only.</p> <p>Note about search:</p> <ol> <li> <p>Press CTRL + F to trigger display the search field</p> </li> <li> <p>Enter your search keyword (not case sensitive)</p> </li> <li> <p>Hit Enter to jump to the next matching keyword (incremental search)</p> </li> <li> <p>When you are done, press CTRL + F again to go back to reset</p> </li> </ol>","title":"Keyboard shortcuts"},{"location":"v2/config/basic/user-interface/#linux","text":"Keyboard Combo Command     CTRL + C Copy   SHIFT + RMB (right-mouse button) Paste    <p>To highlight, hold SHIFT + LMB (left mouse button) and drag across the text you want to select.</p>","title":"Linux"},{"location":"v2/config/basic/user-interface/#macos","text":"Keyboard Combo Command     \u2318 + C Copy   \u2318 + V Paste     <p>Note</p> <p>To select text on macOS, you may need to enable the Allow Mouse Reporting option by pressing \u2318 + R or selecting View &gt; Allow Mouse Reporting in the menu bar.</p>  <p></p> <p>Then you should be able to select text by holding <code>LMB</code> (left mouse button) and drag. You can also hold down \u2325 + shift to select specific lines like the image below.</p> <p></p> <p>When accessing Hummingbot on a Linux cloud server through <code>ssh</code> using a macOS terminal, hold down the Option \u2325 key or \u2325 + \u2318 to highlight text.</p>","title":"macOS"},{"location":"v2/config/basic/user-interface/#windows","text":"Keyboard Combo Command     CTRL + C Copy   CTRL + V Paste    <p>To use this shortcut, check this box by doing a right-click on the title bar at the top of the Hummingbot window, then select Properties.</p> <p></p>","title":"Windows"},{"location":"v2/config/basic/user-interface/#color-settings","text":"<p>Starting with version 0.45, we added new global configuration parameters that allows users to customize the client's background colors.</p> <p></p> <ol> <li><code>top-pane</code></li> <li><code>output-pane</code></li> <li><code>input-pane</code></li> <li><code>bottom-pane</code> </li> <li><code>log-pane</code></li> <li><code>terminal-primary</code></li> </ol>","title":"Color Settings"},{"location":"v2/config/basic/user-interface/#changing-the-panel-colors","text":"<p>To make changes to the panel colors, run <code>config [parameter_name]</code> inside the Hummingbot client. For example, the command for changing the log pane color is <code>config log-pane</code> and enter the hex code of the desired color.</p>  <p>Tip</p> <p>You can use a hexadecimal color picker like the one here to choose colors: https://www.w3schools.com/colors/colors_picker.asp</p>  <p>Alternatively, you can edit these values in the <code>conf_client.yml</code> file located under the <code>hummingbot_conf</code> folder using a text editor.</p>  <p>Note</p> <p>In past versions of Hummingbot (1.5.0 and below), the <code>conf_client.yml</code> file is named <code>conf_global.yml</code></p>","title":"Changing the panel colors"},{"location":"v2/config/basic/user-interface/#reset-colors-to-default","text":"<p>Press <code>CTRL + R</code> while inside Hummingbot to reset the style to use its default colors.</p> <pre><code># Background color of the top pane\ntop-pane: '#000000'\n\n# Background color of the bottom pane\nbottom-pane: '#000000'\n\n# Background color of the output pane\noutput-pane: '#282C2F'\n\n# Background color of the input pane\ninput-pane: '#151819'\n\n# Background color of the logs pane\nlogs-pane: '#151819'\n\n# Terminal primary color (text)\nterminal-primary: '#00FFE5'\n</code></pre>","title":"Reset colors to default"},{"location":"v2/gateway/","text":"","title":"Hummingbot Gateway"},{"location":"v2/gateway/#what-is-gateway","text":"<p>Hummingbot Gateway, sometimes called Gateway-V2, is standalone API middleware that helps Hummingbot and other trading clients to connect to decentralized exchanges (DEX) on various blockchain networks. </p> <p>Gateway manages interfacing with DEX connectors and exposes standard REST API endpoints for trading and liquidity-related functionality on these DEXs.</p> <p>Essentially, Gateway is a light web server that enables Hummingbot to send and receive data from different blockchain protocols and provides an easier entry point for external devs to build connectors to other protocols.</p>","title":"What is Gateway?"},{"location":"v2/gateway/#how-to-use-gateway","text":"<p>Following the guides below to install, configure and use Gateway:</p> <ul> <li>Installation: How to install Gateway from source or via Docker</li> <li>Testing with Postman: How to test Gateway API endpoints on a standalone basis using Postman and other tools</li> <li>Using Gateway with Hummingbot : How to send commands to Gateway from Hummingbot</li> <li>Working with Tokens: Adding tokens, approving tokens and getting testnet tokens</li> <li>Running DEX Bots: How to run the <code>amm-arb</code> strategy and scripts that use Gateway DEX connectors</li> <li>Adding Connectors: Developer guide for contributing new DEX connectors into the open source Gateway codebase</li> <li>API Reference: List of the API endpoints that each DEX type exposes</li> </ul>","title":"How to use Gateway"},{"location":"v2/gateway/#supported-dexs","text":"<p>See Exchanges for the DEXs that Gateway currently supports. All DEXs with either the AMM and AMM-RANGE labels are Gateway connectors, along with certain CLOB DEX connectors.</p>","title":"Supported DEXs"},{"location":"v2/gateway/#supported-chains","text":"<p>See Chains for a list of blockchains and their networks that Gateway currently supports.</p>","title":"Supported Chains"},{"location":"v2/gateway/#history","text":"<p>See the following blog posts from CoinAlpha CTO Martin Kou for more information about Gateway's history, background, and intended developer experience:</p> <ul> <li>Hummingbot Gateway V2 Architecture - Part 1</li> <li>Hummingbot Gateway V2 Architecture - Part 2</li> </ul>  <p>Note</p> <p>Gateway-V1 is a deprecated version of Gateway compatible with pre-1.0 Hummingbot releases that is no longer supported.</p>","title":"History"},{"location":"v2/gateway/adding-dex-connectors/","text":"<p>This page shows you how to add a decentralized exchange (DEX) connector to Hummingbot's Gateway module and configure which chains and networks it supports.</p> <p>We'll use the Uniswap and Pangolin connectors as examples to help guide you through the development process. Please note that there might be changes that you have to implement depending on the needs of your DEX.</p>","title":"Adding DEX Connectors"},{"location":"v2/gateway/adding-dex-connectors/#requirements","text":"<p>Introducing a connector into the Hummingbot codebase requires a mutual commitment from both the contributing developer as wel the Hummingbot Foundation team to maintain a high standard of code quality and software reliability.</p> <p>We encourage and welcome contributions from the community, subject to the guidelines and expectations outlined below:</p> <ol> <li>Connector folder: A complete set of connector files based on the available examples.</li> <li>Unit tests: Tests that cover at least 80% of the new code. Check coverage using <code>yarn test:cov</code>.</li> <li>Inline code comments: Highly recommended, particularly for any code that is materially different from the templates</li> <li>Documentation: Documentation that contains useful information about the exchange for bot runners</li> </ol> <p>First, install and run Gateway by following the developer setup guide.</p> <p>Afterwards, follow the steps below to develop a Gateway connector:</p>","title":"Requirements"},{"location":"v2/gateway/adding-dex-connectors/#1-create-configuration-template","text":"<p>\ud83d\udcc1 Folder <code>gateway/src/templates</code></p> <p>Create a template in the templates folder and name it <code>&lt;exchange_name&gt;.yml</code>. This file will include the configurations needed for connecting to the exchange.</p> <p>Below are example configurations from Uniswap (Ethereum) and Pangolin (Avalanche). Configurations for other EVM-compatible exchanges should be similar.</p>","title":"1. Create configuration template"},{"location":"v2/gateway/adding-dex-connectors/#uniswap","text":"<pre><code>versions:\n  v2:\n    # allowedSlippage: how much the execution price is allowed to move unfavorably from the trade\n    # execution price. It uses a rational number for precision.\n    allowedSlippage: '2/100'\n    # ttl: how long a trade is valid in seconds. After this time passes uniswap will not\n    # perform the trade, but the gas will still be sent.\n    ttl: 600\n  v3:\n    allowedSlippage: '2/100'\n    ttl: 600\ncontractAddresses:\n  # constant used for each supported network\n  mainnet: \n    uniswapV2RouterAddress: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\n    uniswapV3RouterAddress: '0xE592427A0AEce92De3Edee1F18E0157C05861564'\n    uniswapV3NftManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n  kovan: \n    uniswapV2RouterAddress: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\n    uniswapV3RouterAddress: '0xE592427A0AEce92De3Edee1F18E0157C05861564'\n    uniswapV3NftManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n  ropsten: \n    uniswapV2RouterAddress: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\n    uniswapV3RouterAddress: '0xE592427A0AEce92De3Edee1F18E0157C05861564'\n    uniswapV3NftManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n</code></pre>","title":"Uniswap"},{"location":"v2/gateway/adding-dex-connectors/#pangolin","text":"<pre><code># allowedSlippage: how much the execution price is allowed to move unfavorably from the trade\n# execution price. It uses a rational number for precision.\nallowedSlippage: '1/100'\n# ttl: how long a trade is valid in seconds. After this time passes pangolin will not\n# perform the trade, but the gas will still be sent.\nttl: 300\ncontractAddresses:\n  fuji:\n      routerAddress: '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106'\n  avalanche:\n      routerAddress: '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106'\n</code></pre> <p>This template will then be checked against the schema, in the next step, to generate the configuration under the <code>gateway/conf</code> directory.</p>","title":"Pangolin"},{"location":"v2/gateway/adding-dex-connectors/#2-create-configuration-schema","text":"<p>\ud83d\udcc1 Folder <code>gateway/src/services/schema</code></p> <p>Create a schema in the directory above for the configuration that you set up. This tells Gateway how to validate and type the entries in the configuration template that you created earlier. The schema should be named <code>&lt;exchange_name&gt;-schema.json</code>.</p> <p>Below is an example of the schema file for Pangolin:</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"allowedSlippage\": { \"type\": \"string\" },\n    \"ttl\": { \"type\": \"integer\" },\n    \"contractAddresses\": {\n      \"type\": \"object\",\n      \"patternProperties\": {\n        \"^\\\\w+$\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"routerAddress\": { \"type\": \"string\" }\n          },\n          \"required\": [\"routerAddress\"],\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false,\n  \"required\": [\"allowedSlippage\", \"ttl\", \"contractAddresses\"]\n}\n</code></pre>","title":"2. Create configuration schema"},{"location":"v2/gateway/adding-dex-connectors/#3-create-connector","text":"<p>\ud83d\udcc1 Folder <code>gateway/src/connectors</code></p> <p>Now, you can start creating the connector. Following the steps below:</p> <ul> <li>Create a new directory inside the <code>connectors</code> directory and name it <code>&lt;exchange_name&gt;</code>.</li> <li>Inside this new directory, create the following two files:</li> <li><code>&lt;exchange_name&gt;.config.ts</code>: This file contains the connector configuration.</li> <li><code>&lt;exchange_name&gt;.ts</code>: This file contains functions that interact with the DEX, such as fetching price and pair data, executing trades, and adding/removing liquidity.</li> <li>Add the DEX ABI (interface for the smart contract functions and variables) as a json file in the same folder, i.e. <code>uniswap_v2_router_abi.json</code>.</li> <li>See pangolin.config.ts as an example for the <code>&lt;exchange_name&gt;.config.ts</code> file. Copy it and update the changes made in step 1 depending on the template configuration for your exchange.</li> <li>The <code>&lt;exchange_name&gt;.ts</code> file contains three main functions: <code>estimateSellTrade()</code>, <code>estimateBuyTrade()</code> and <code>executeTrade()</code>. The implementation of these functions depends on the exchange SDK. For EVM-compatible exchanges, the implementation should be similar to pangolin.ts.</li> <li>The other functions in the <code>&lt;exchange_name&gt;.ts</code> should follow the examples available and not require many changes.</li> <li>Keep in mind that this process is heavily dependent on the needs of your exchange and how the exchange SDK, if available, is implemented.</li> </ul>","title":"3. Create connector"},{"location":"v2/gateway/adding-dex-connectors/#4-add-connector-routes","text":"<p>\ud83d\udcc1 File <code>gateway/src/connectors/connectors.routes.ts</code></p> <p>Add your new connector to the list of connectors available in Gateway. The step should be similar to the examples available in the file, and the new entry should look like this:</p> <pre><code>{\n    name: '&lt;exchange_name&gt;',\n    trading_type: Exchange_nameConfig.config.tradingTypes,\n    available_networks:Exchange_nameConfig.config.availableNetworks,\n},\n</code></pre>","title":"4. Add connector routes"},{"location":"v2/gateway/adding-dex-connectors/#5-add-sdk-classes-to-uniswapish-interface","text":"<p>\ud83d\udcc1 File <code>gateway/src/services/common-interfaces.ts</code></p> <p>Under <code>gateway/src/services/common-interfaces.ts</code>, most of the EVM-compatible DEX connectors in the gateway v2 can make use of the Uniswapish interface.</p> <p>To use this interface, you will need to make additions to the <code>Tokenish</code> type, <code>UniswapishTrade</code> type, and  <code>Fractionish</code> type with the relevant classes from your exchange SDK. An example of the changes needed can be found in <code>common-interfaces.ts</code> above.</p>","title":"5. Add SDK classes to Uniswapish interface"},{"location":"v2/gateway/adding-dex-connectors/#6-add-connector-to-spender-list","text":"<p>\ud83d\udcc1 File (Ethereum) <code>`gateway/src/chains/ethereum/ethereum.ts</code></p> <p>Add your exchange to the spender list for the chain where your exchange is located. The changes needed should be similar to those in <code>ethereum.ts</code> if the exchange is on an EVM-compatible chain.</p> <p>Below is an example of the changes required:</p> <pre><code>getSpender(reqSpender: string): string {\n    let spender: string;\n    if (reqSpender === 'uniswap') {\n      spender = UniswapConfig.config.uniswapV2RouterAddress(this._chain);\n    } \n    else if (reqSpender === '&lt;exchange_name&gt;') {\n      spender = Exchange_nameConfig.config.routerAddress(this._chain);\n    }\n\n  else {\n      spender = reqSpender;\n    }\n    return spender;\n  }\n</code></pre>","title":"6. Add connector to spender list"},{"location":"v2/gateway/adding-dex-connectors/#7-add-connector-to-gateway-list","text":"<p>\ud83d\udcc1 File <code>gateway/src/app.ts</code></p> <p>Add your connector to the list of connectors to be accessible via Gateway. The changes needed for this step are simple and should be similar to the example below.</p> <pre><code>interface ConnectorsResponse {\n  uniswap: Array&lt;AvailableNetworks&gt;;\n  pangolin: Array&lt;AvailableNetworks&gt;;\n  traderjoe: Array&lt;AvailableNetworks&gt;;\n  &lt;exchange_name&gt;:Array&lt;AvailableNetworks&gt;; \n}\ngatewayApp.get(\n  '/connectors',\n  asyncHandler(async (_req, res: Response&lt;ConnectorsResponse, {}&gt;) =&gt; {\n    res.status(200).json({\n      uniswap: UniswapConfig.config.availableNetworks,\n      pangolin: PangolinConfig.config.availableNetworks,\n      traderjoe: TraderjoeConfig.config.availableNetworks,\n   &lt;exchange_name&gt;: Exchange_nameConfig.config.availableNetworks,\n    });\n  })\n);\n</code></pre>","title":"7. Add connector to Gateway list"},{"location":"v2/gateway/adding-dex-connectors/#8-add-connector-tests","text":"<p>\ud83d\udcc1 Folder <code>gateway/test/chains</code></p> <p>Under <code>gateway/test/chains/&lt;chain&gt;/&lt;exchange_name&gt;</code></p> <p>Automated test coverage is a crucial step for maintaining high-quality connectors. The Hummingbot Foundation QA team runs these tests when reviewing connectors on an ongoing basis.</p> <p>Follow the Pangolin tests to create tests for the routes and functions of your connector.</p> <p>Before submitting a pull request for your connector, you should have a minimum testing coverage of 80%. You can determine test coverage by running <code>yarn test:cov</code>.</p>","title":"8. Add connector tests"},{"location":"v2/gateway/adding-dex-connectors/#9-perform-manual-testing","text":"<p>Make sure to perform extensive manual testing of your connector to ensure that users can use it when running various Hummingbot strategies.</p> <p>Follow the guides below:</p> <ul> <li>Manual testing under Gateway V2</li> <li>Client testing and Postman: Gateway V2 connector testing guide</li> </ul>","title":"9. Perform manual testing"},{"location":"v2/gateway/adding-dex-connectors/#10-create-connector-documentation-page","text":"<p>\ud83d\udcc1 Folder <code>hummingbot-site: docs/gateway/exchanges</code></p> <p>As a last step, create a Markdown documentation page in the <code>hummingbot-site</code> Github repository that provides descriptive information about the new DEX connector for Hummingbot users.</p> <p>The format should be similar to those of other pages in the same directory, i.e. <code>uniswap.md</code> or <code>pangolin.md</code>.</p> <p>Feel free to add more sections as needed, such as guides or best practices that help users make use of your new connector.</p>","title":"10. Create connector documentation page"},{"location":"v2/gateway/adding-dex-connectors/#11-add-documentation-page-to-index","text":"<p>\ud83d\udcc1 File <code>hummingbot-site: mkdocs.yml</code></p> <p>Finally, modify <code>mkdocs.yml</code> in the root <code>hummingbot-site</code> directory to include the newly created page in the site index.</p> <p>In <code>mkdocs.yml</code>, add an entry for your connector to the following section:</p> <pre><code>- Gateway Connectors:\n      - Gateway Connectors: gateway/index.md\n      - DEXs:\n        - DEXs: gateway/exchanges/index.md\n        - Uniswap: gateway/exchanges/uniswap.md\n        - Pangolin: gateway/exchanges/pangolin.md\n</code></pre>","title":"11. Add documentation page to index"},{"location":"v2/gateway/api-reference/","text":"<p>This work-in-progress document defines the standardized API endpoints that each Gateway decentralized exchange (DEX) connector should implement. </p> <p>Each DEX should implement the NetworkBase interface, as well as its chain/network-specific interface:</p> <ul> <li>NetworkBase: General endpoints for all chains</li> <li>EVM: Endpoints for DEXs on EVM-specific chains (Mainnet, Avalanche, BNB Chain, Polygon, Harmony, etc)</li> </ul> <p>In addition, each DEX should implement the ConnectorBase interface, as well as the interface(s) for its exchange types:</p> <ul> <li>ConnectorBase: Endpoints for all DEXs</li> <li>AMM: Endpoints for AMM connectors needed to enable swapping assets</li> <li>AMM-RANGE: *Additional endpoints for spot AMM connectors that support concentrated liquidity ranges (example: <code>uniswap</code>)</li> <li>PERP AMM: Endpoints for perpetual futures AMMs (example: <code>perp</code>)</li> </ul>  <p>TypeScript interface naming conventions</p> <p>TypeScript interfaces for the requests and responses below should be named according to their corresponding URL endpoints. For example, a request and a response interface for <code>/evm/allowances</code> should be named <code>EVMAllowancesRequest</code> and <code>EVMAllowancesResponse</code>.</p>","title":"API Reference"},{"location":"v2/gateway/api-reference/#network","text":"<p>General endpoints for all chains.</p> <p>GET <code>/network/status</code></p> <ul> <li>Description: Get the current status of a chain/network</li> <li>Request params: <code>{chain?, network?}</code></li> <li>Response: array of <code>{ chain, network, rpcUrl, currentBlockNumber, currentBlockSeconds(seconds since block) }</code> for each chain/network combination</li> </ul> <p>GET <code>/network/chain_config</code></p> <ul> <li>Description: Display the configuration options for a chain</li> <li>Request params: <code>{chain}</code></li> <li>Response: chain config map (example)</li> </ul> <p>GET <code>/network/tokens</code></p> <ul> <li>Description: Get token list for a chain/network</li> <li>Request: <code>{chain, network, tokenSymbols?}</code></li> <li>Response: array of <code>{ chain, network, symbol, address, decimals }</code></li> </ul> <p>GET <code>/network/balances</code></p> <ul> <li>Description: Get balances for an address</li> <li>Request: <code>{chain, network, address, tokenSymbols}</code></li> <li>Response: <code>{ balances }</code></li> </ul> <p>GET <code>/network/poll</code></p> <ul> <li>Description: Fetch the current status for a transaction hash</li> <li>Request: <code>{chain, network, txHash}</code></li> <li>Response: <code>{ currentBlock, txHash, txStatus, txBlock, txData, txReceipt }</code></li> </ul>","title":"Network"},{"location":"v2/gateway/api-reference/#evm","text":"<p>Endpoints interacting with chains that use the Ethereum Virtual Machine.</p> <p>GET <code>/evm/allowances</code></p> <ul> <li>Description: Get allowances for a spender</li> <li>Request: <code>{chain, network, address, spender, tokenSymbols}</code></li> <li>Response: <code>{ spender, approvals }</code></li> </ul> <p>GET <code>/evm/nonce</code></p> <ul> <li>Description: Get nonce for an address</li> <li>Request: <code>{chain, network, address}</code></li> <li>Response: <code>{ nonce }</code></li> </ul> <p>POST <code>/evm/cancel</code></p> <ul> <li>Description: Cancel a transaction</li> <li>Request: <code>{ chain, network, address, nonce? }</code></li> <li>Response: <code>{ txHash }</code></li> </ul> <p>POST <code>/evm/approve</code></p> <ul> <li>Description: Approve a token to be spent by a spender</li> <li>Request: <code>{ chain, network, address, spender, token, amount?, nonce? }</code></li> <li>Response: <code>{ spender, tokenAddress, amount, nonce, txHash }</code></li> </ul>","title":"EVM"},{"location":"v2/gateway/api-reference/#spot-amm","text":"<p>Endpoints for spot AMM connectors needed to enable swapping assets.</p> <p>GET <code>/amm/price</code></p> <ul> <li>Description: Get price for a swap</li> <li>Request: <code>{chain, network, connector, quote, base, amount, side}</code></li> <li>Response: <code>{ base, quote, amount, expectedAmount, price, gasPrice, gasLimit, gasCost }</code></li> </ul> <p>POST <code>/amm/trade</code></p> <ul> <li>Description: Execute a swap</li> <li>Request: <code>{ chain, network, connector, address, quote, base, amount, side, limitPrice?, nonce?, maxFeePerGas?, maxPriorityFeePerGas? }</code></li> <li>Response: <code>{ base, quote, price, gasPrice, gasLimit, gasCost, nonce, txHash }</code></li> </ul>","title":"SPOT AMM"},{"location":"v2/gateway/api-reference/#spot-amm-range","text":"<p>Additional endpoints for AMM-RANGE connectors that support concentrated liquidity ranges</p> <p>POST <code>/amm/liquidity/add</code></p> <ul> <li>Description: add liquidity to a pool</li> <li>Request: <code>{ chain, network, connector, address, token0, token1, amount0, amount1, lowerPrice, upperPrice, nonce?, maxFeePerGas?, maxPriorityFeePerGas? }</code></li> <li>Response: <code>{ token0, token1, liquidity, nonce, txHash }</code></li> </ul> <p>POST <code>/amm/liquidity/remove</code></p> <ul> <li>Description: Remove liquidity from a pool</li> <li>Request: <code>{ chain, network, connector, address, tokenId, nonce?, maxFeePerGas?, maxPriorityFeePerGas? }</code></li> <li>Response: <code>{ nonce, txHash }</code></li> </ul> <p>POST <code>/amm/liquidity/collect_fees</code></p> <ul> <li>Description: Remove liquidity from a pool</li> <li>Request: <code>{ chain, network, connector, address, tokenId, nonce?, maxFeePerGas?, maxPriorityFeePerGas? }</code></li> <li>Response: <code>{ nonce, txHash }</code></li> </ul> <p>POST <code>/amm/liquidity/price</code></p> <ul> <li>Description: Returns the current pool price</li> <li>Request: <code>{ chain, network, connector, address, token0, token1, liquidity, fee, period, interval }</code></li> <li>Response: <code>{ token0, token1, fee, period, interval }</code></li> </ul> <p>POST <code>/amm/liquidity/position</code></p> <ul> <li>Description: Returns the current pool price</li> <li>Request: <code>{ chain, network, connector, tokenId }</code></li> <li>Response: <code>{ tokenId, token0, token1, fee, lowerPrice, upperPrice, amount0, amount1, unclaimedToken0, unclaimedToken1 }</code></li> </ul>","title":"SPOT AMM-RANGE"},{"location":"v2/gateway/api-reference/#perp-amm","text":"<p>Endpoints for perpetual futures AMM DEXs.</p> <p>GET <code>/perp/position</code></p> <ul> <li>Description: Get info on a position</li> <li>Request: <code>{chain, network, connector, wallet_address, quote, base}</code></li> <li>Response: <code>{ position }</code></li> </ul> <p>POST <code>/perp/open</code></p> <ul> <li>Description: Open a position</li> <li>Request: <code>{ chain, network, connector, address, quote, base, amount, side, margin, leverage, limitPrice?, nonce?, maxFeePerGas?, maxPriorityFeePerGas? }</code></li> <li>Response: <code>{ position, price, gasPrice, gasLimit, gasCost, nonce, txHash }</code></li> </ul> <p>POST <code>/perp/close</code></p> <ul> <li>Description: Close a position</li> <li>Request: <code>{ chain, network, connector, address, quote, base, limitPrice?, nonce?, maxFeePerGas?, maxPriorityFeePerGas? }</code></li> <li>Response: <code>{ gasPrice, gasLimit, gasCost, nonce, txHash }</code></li> </ul> <p>GET <code>/perp/market-prices</code></p> <p>GET <code>/perp/market-status</code></p> <p>GET <code>/perp/pairs</code></p> <p>GET <code>/perp/balance</code></p> <p>POST <code>/perp/estimateGas</code></p>","title":"PERP AMM"},{"location":"v2/gateway/installation/","text":"<p>The official Github repository for Gateway is https://github.com/hummingbot/gateway. Gateway is released monthly  with the same cadence as the Hummingbot client, and it follows the same conventions for releases, contributions, etc.</p>","title":"Installation"},{"location":"v2/gateway/installation/#prerequisites","text":"<p>These instructions assumes that you have already installed Hummingbot on the machine where you are installing Gateway, either from source or via Docker. See Installation for more information.</p>","title":"Prerequisites"},{"location":"v2/gateway/installation/#generate-certs","text":"<p>The first step is to generate self-signed certificates from the Hummingbot client. These certificates let your bots securely communicate with Gateway.</p> <p>Start Hummingbot. After entering your password, run <code>gateway generate-certs</code>:</p> <p></p> <p>Enter a secure passphrase, and then Hummingbot will generate self-signed certificates that a server can use to authenticate its connection with this client.</p> <p>Take note of the path where they are stored. This is also stored as <code>certs_path</code> in the Hummingbot's <code>conf_client.yml</code>, the global configuration file in the <code>/conf/</code> directory.</p> <p></p>  <p>Tip</p> <p>Make sure to save both passphrase and certs_path since you\u2019ll need them later.</p>","title":"Generate certs"},{"location":"v2/gateway/installation/#install-gateway","text":"<p>Select only one of the methods below, since multiple Gateways on the same machine may result in conflicts.</p>","title":"Install Gateway"},{"location":"v2/gateway/installation/#from-source","text":"<p>Install the following dependencies:</p> <ul> <li>NodeJS (use 16.0.0 or higher)</li> <li>Yarn: run <code>npm install -g yarn</code> after installing NodeJS</li> </ul> <p>Then, follow the instructions below:</p> <pre><code># Clone repo and enter the created directory\n$ git clone https://github.com/hummingbot/gateway.git\n$ cd gateway\n\n# Install dependencies\n$ yarn\n\n# Complile Typescript into Javascript\n$ yarn build\n\n# Run Gateway setup script, which helps you set configs and certificates\n$ chmod a+x gateway-setup.sh\n$ ./gateway-setup.sh\n</code></pre> <p>The <code>gateway-setup</code> script configures Gateway by:</p> <ul> <li>Copying the default configuration files from <code>/src/templates</code> to <code>/conf/</code> folder</li> <li>Copying the Hummingbot self-signed certificates into the <code>/certs/</code> folder. Enter certs_path when prompted.</li> </ul>  <p>Alternative to copying certs files</p> <p>The <code>gateway-setup.sh</code> script creates a copy of the Hummingbot certificates in the Gateway folder. Alternatively, you can override the certs_path parameter in <code>conf/server.yml</code> and enter the path to the Hummingbot certificates.</p>  <p>Afterwards, start Gateway using passphrase:</p> <pre><code>yarn start --passphrase=&lt;passphrase&gt;\n</code></pre>","title":"From source"},{"location":"v2/gateway/installation/#using-docker","text":"<p>See the Deploy Examples repo for example for deploying various configurations of Hummingbot and Gateway using Docker. The <code>/bash_scripts</code> folder and the README file in that repo contains scripts that help you install the Docker version of Gateway.</p> <p>Note that you will be prompted to enter passphrase and certs_path during the installation process.</p>","title":"Using Docker"},{"location":"v2/gateway/installation/#running-gateway","text":"<p>After a successful installation using via either method, you should see Gateway running on the default port 15888:</p> <pre><code>2023-02-09 12:56:50 | info |  \u26a1\ufe0f Starting Gateway API on port 15888...\n2023-02-09 12:56:50 | info |  The gateway server is secured behind HTTPS.\n2023-02-09 12:56:50 | info |  \u26a1\ufe0f Swagger listening on port 8080. Read the Gateway API documentation at 127.0.0.1:8080\n</code></pre> <p>Go back to your Hummingbot client or restart it if you have exited. In the upper right corner, you should see GATEWAY: ONLINE if your Hummingbot client is connected to Gateway.</p> <p></p> <p>After Gateway is running, see Testing to understand how to test the endpoints on a standalone basis before using it with Hummingbot.</p>","title":"Running Gateway"},{"location":"v2/gateway/running-dex-bots/","text":"<p>Now that you have properly installed, tested, and configured Gateway, it's time to run a bot that calls the Gateway DEX endpoints.</p> <p>You can either run the AMM-Arbitrage Strategy, or the sample Scripts that utilize Gateway if you want more fine-grained control.</p>  <p>Approval needed!</p> <p>Currently, if any tokens do not have sufficient allowance, both strategies and scripts will not start and the logs will show messages like <code>[connector] is not ready. Please wait...</code> continually. See Approving tokens for information on how to approve tokens.</p>","title":"Running DEX Bots"},{"location":"v2/gateway/running-dex-bots/#amm-arbitrage-strategy","text":"<p>A good way to safely test Gateway is to run the AMM-Arbitrage strategy between a testnet DEX connector and a CEX connector in paper trading mode.</p> <p>The guide below shows you how to run this strategy using the <code>uniswap-ethereum-goerli</code> connector versus the <code>binance-paper-trade</code> connector.</p>","title":"AMM-Arbitrage Strategy"},{"location":"v2/gateway/running-dex-bots/#setup","text":"<ol> <li> <p>Connect a wallet to Uniswap Goerli with <code>gateway connect uniswap</code>. Afterwards, you should be able to see <code>uniswap_ethereum_goerli</code> when you run <code>balance.</code></p> </li> <li> <p>Convert some test ETH into WETH and DAI on Uniswap.</p> </li> <li> <p>Approve both WETH and DAI - see Working with Tokens for more details.</p> </li> <li> <p>Make sure that your wallet still have a balance of at least 0.2 test ETH for gas costs.</p> </li> <li> <p>Check your paper trading balances with <code>balance paper</code> and add balances for ETH and USDT if needed.</p> </li> </ol>","title":"Setup"},{"location":"v2/gateway/running-dex-bots/#create-strategy","text":"<p>Use <code>create</code> command to set up an <code>amm_arb</code> strategy. Answer the question prompts presented so that you to generate the following configuration:</p> <pre><code>template_version: 5\nstrategy: amm_arb\nconnector_1: uniswap_ethereum_goerli\nmarket_1: WETH-DAI\nconnector_2: binance_paper_trade\nmarket_2: ETH-USDT\nmin_profitability: 1.0\nmarket_1_slippage_buffer: 1.0\nmarket_2_slippage_buffer: 0.0\nconcurrent_orders_submission: false\ndebug_price_shim: false\ngateway_transaction_cancel_interval: 600\n</code></pre> <p>Alternatively, you can copy the section above into a <code>*.yml</code> file and use the <code>import</code> command to import it as a strategy.</p>","title":"Create strategy"},{"location":"v2/gateway/running-dex-bots/#run-strategy","text":"<p>Use the <code>start</code> command, and then answer <code>Yes</code> when asked to confirm the strategy settings.</p> <p>After starting the <code>amm_arb</code> strategy, you\u2019ll see the apparent prices on the AMM market will track the prices on the CEX exchange, and if there is none, the strategy will report no arbitrage opportunities. </p> <p>When it detects an arbitrage opportunity where the total cost to execute the transactions (including gas and fees) still results in a profit higher than (<code>min_profitability</code>), then the bot will automatically execute the two transactions.</p> <p>If <code>concurrent_orders_submission</code> is false, then the bot will try to execute and confirm the transaction on <code>connector_1</code> before executing the transaction on <code>connector_2</code>.</p>","title":"Run strategy"},{"location":"v2/gateway/running-dex-bots/#triggering-arbitrage-with-debug_price_shim","text":"<p>On testnets like Goerli, prices are typically out of line with CEXs, so getting transactions executed is trivial. However, when testing on mainnets, triggering an arbitrage transaction may be trickier.</p> <p>One option is to set the <code>min_profitability</code> to be negative, but that may result in losses when testing on mainnet. Therefore, we have added a <code>debug_price_shim</code> feature that lets you modify the apparent prices on the AMM market in the Debug Console and trigger mock arbitrage transactions.</p> <p>To use this feature, set <code>debug_price_shim</code> to True in your <code>amm-arb</code> configuration, either by modifying the config file or running the <code>config</code> command:</p> <pre><code>&gt;&gt;&gt; config debug_price_shim True\n</code></pre> <p>Let\u2019s say you want to raise the WETH prices on the AMM connector by 40 USDT, in order to trigger a sell on the AMM connector and a buy on the CEX connector. </p> <p>The code snippet below will cause <code>amm_arb</code> to send sell transactions to Uniswap Goerli and simulated buys on Binance paper trade market. The price delta will persist in the AMM market for 1 minute. Afterwards, it\u2019ll return back to tracking the CEX paper trade market.</p> <pre><code>from hummingbot.connector.gateway_price_shim import GatewayPriceShim\nfrom decimal import Decimal\nGatewayPriceShim.get_instance().apply_price_delta(\"uniswap\", \"ethereum\", \"goerli\", \"WETH-DAI\", Decimal(40))\n</code></pre> <p>Conversely, if you want to trigger buys on the AMM side and sells on the CEX paper trade side, you can give negative delta prices to make WETH-DAI on the AMM side cheaper.</p> <pre><code>GatewayPriceShim.get_instance().apply_price_delta(\"uniswap\", \"ethereum\", \"goerli\", \"WETH-DAI\", Decimal(-40))\n</code></pre> <p>Again, the negative delta price will persist on the AMM market for 1 minute.</p> <p>If the price delta isn\u2019t enough to trigger an arb opportunity due to high gas fees, feel free to use large delta values, e.g. <code>Decimal(200)</code> or even <code>Decimal(500)</code>. While the price deltas needed seem unrealistically large - this is reflective of real trading constraints because a small order size would need a large price delta to cover the gas fees.</p>","title":"Triggering arbitrage with <code>debug_price_shim</code>"},{"location":"v2/gateway/running-dex-bots/#sample-gateway-scripts","text":"<p>You can also run the following sample Gateway scripts in the <code>/scripts/</code> folder of the Hummingbot repo:</p> <ul> <li> <p><code>amm_price_example.py</code>: Fetches and prints the price from an AMM connector</p> </li> <li> <p><code>amm_trade_example.py</code>: Fetches the price from an AMM connector and executes a trade using that price</p> </li> </ul>","title":"Sample Gateway scripts"},{"location":"v2/gateway/setup/","text":"<p>After you have installed Gateway, you should be ready to interact with it. This page shows you various commands that help you configure Gateway from inside the Hummingbot client.</p>","title":"Using Gateway with Hummingbot"},{"location":"v2/gateway/setup/#checking-gateway-status","text":"<p>Once you see <code>GATEWAY: ONLINE</code> in the top status bar in the Hummingbot client, your Gateway is ready to use with Hummingbot.</p> <p></p> <p>You can also run the <code>gateway status</code> command, which prints a list of the connected chains/networks and their current block number.</p> <pre><code>&gt;&gt;&gt; gateway status\n\n    network     chainID     rpcURL                          currentBlockNumber  nativeCurrency\n    mainnet     1           https://rpc.ankr.com/eth        16699791            ETH\n    goerli      5           https://rpc.ankr.com/eth_goerli 8549282             ETH\n</code></pre>","title":"Checking Gateway status"},{"location":"v2/gateway/setup/#listing-gateway-commands","text":"<p>Run the command <code>gateway -h</code> to print out the different commands you can use with gateway.</p> <pre><code>&gt;&gt;&gt; gateway -h\n\nusage: gateway [-h] {create,config,connect,connector-tokens,generate-certs,start,status,stop,test-connection} ...\n\npositional arguments: {create,config,connect,connector-tokens,generate-certs,start,status,stop,test-connection}\nconfig              View or update gateway configuration\nconnect             Create/view connection info on gateway connector\nconnector-tokens    Report token balances for gateway connectors\ngenerate-certs      Create ssl certificate for gateway\ntest-connection     Ping gateway api server\n\noptional arguments:\n-h, --help          show this help message and exit\n</code></pre>","title":"Listing Gateway commands"},{"location":"v2/gateway/setup/#getting-help","text":"<p>To get help before running a command, run <code>gateway [command] -h</code>.</p> <pre><code>&gt;&gt;&gt; gateway config -h\nusage: gateway config [-h] [key] [value]\n\npositional arguments:\n    key     Name of the parameter you want to change\n    value   New value for the parameter\n\noptional arguments:\n    -h, --help show this help message and exit\n</code></pre>","title":"Getting help"},{"location":"v2/gateway/setup/#listing-dex-connectors","text":"<p>Running the <code>gateway list</code> command will list all available Gateway DEX connectors, the blockchains where they are supported, and their Connector Tier, which determines the level of maintenance effort allocated to the connector.</p> <pre><code>&gt;&gt;&gt; gateway list\n    +----------+------------------------+---------+\n    | Exchange | Chains                 | Tier    |\n    |----------|------------------------|---------|\n    | uniswap  | ethereum, polygon      | GOLD    |\n</code></pre>","title":"Listing DEX connectors"},{"location":"v2/gateway/setup/#connecting-to-a-dex","text":"<p>Use <code>gateway connect [exchange]</code> to add connections to DEXs. See Exchanges for all available connectors.</p> <p>You will then be asked about which instance of Uniswap you want to connect. You'll be asked to specify <code>chain</code> (a Layer 1 blockchain architecture like <code>ethereum</code> or <code>polygon</code>), <code>network</code> (mainnet or testnet networks available for the chain like <code>mainnet</code>, <code>arbitrum_one</code>, <code>optimism</code>), and the private key of your wallet.</p> <pre><code>&gt;&gt;&gt; gateway connect uniswap\n\nWhich chain do you want uniswap to connect to? (ethereum, polygon)\n&gt;&gt;&gt; ethereum\n\nWhich network do you want uniswap to connect to? (mainnet, goerli, arbitrum_one, optimism)?\n&gt;&gt;&gt; mainnet\n\nDo you want to continue to use node url 'https://rpc.ankr.com/eth' for ethereum-mainnet? (Yes/No)\n&gt;&gt;&gt; Yes\n\nEnter your ethereum-mainnet wallet private key\n&gt;&gt;&gt; *****************************************\n\nThe uniswap connector now uses wallet [public address] on ethereum-mainnet.\n</code></pre>","title":"Connecting to a DEX"},{"location":"v2/gateway/setup/#fetching-wallet-balances","text":"<p>Once your wallet has been connected to a Gateway DEX, you can the test the connection by running the <code>balance</code> command.</p> <p>You should see your wallet balance on the native blockchain asset (i.e. ETH for Uniswap/Ethereum, BNB for PancakeSwap/BSC) for each connection.</p> <pre><code>&gt;&gt;&gt; balance\n\nuniswap_ethereum_mainnet:\n    Asset   Total   Total($)    Allocated\n    ETH     0.0000         0\n\nuniswap_ethereum_goerli:\n    Asset   Total   Total($)    Allocated\n    ETH     0.0000         0\n</code></pre>","title":"Fetching wallet balances"},{"location":"v2/gateway/setup/#adding-new-symbols-to-balance","text":"<p>Use the <code>gateway connector-tokens</code> command to display additional tokens in the <code>balance</code> command.</p> <pre><code>&gt;&gt;&gt; gateway connector-tokens uniswap_ethereum_mainnet WETH,DAI\n\nThe 'balance' command will now report token balances WETH,DAI for 'uniswap_ethereum_mainnet'.\n\n&gt;&gt;&gt; balance\n\nuniswap_ethereum_mainnet:\n    Asset   Total   Total($)    Allocated\n    ETH     0.0000         0\n    WETH    0.0000         0\n    DAI     0.0000         0\n</code></pre>","title":"Adding new symbols to <code>balance</code>"},{"location":"v2/gateway/setup/#updating-config-parameters","text":"<p>Gateway supports a robust configuration management system for each supported chain, network and exchange. You can see all the current configuration by running <code>gateway config</code></p> <pre><code>&gt;&gt;&gt; gateway config\n\nGateway Configurations (localhost:15888):\nserver:\n    certificatePath: ./certs/\n    logPath: ./logs\n    ...\n</code></pre> <p>You can filter and see a specific configuration parameter with <code>gateway config &lt;param&gt;</code>:</p> <pre><code>&gt;&gt;&gt; gateway config ethereum.gasLimitTransaction\n\nGateway Configurations (localhost:15888):\nethereum:\n    gasLimitTransaction: 3000000\n</code></pre> <p>To change it, simply add an updated value after it: <code>gateway config &lt;param&gt; &lt;new-value&gt;</code>:</p> <pre><code>&gt;&gt;&gt; gateway config ethereum.gasLimitTransaction 1000000\n\nThe config has been updated.\n</code></pre> <p>Gateway will automatically restart to incorporate the new settings.</p> <p>Alternatively, you may find it easier to edit the configuration files for each chain and connector directly. These are located in the <code>/conf</code> directory in your Gateway files. Make sure to stop and start the Gateway server after each change.</p>","title":"Updating config parameters"},{"location":"v2/gateway/setup/#configuring-node-providers","text":"<p>The node provider that you use to communicate with a blockchain network is critically important. The speed/latency of your node connection and its ability to read/write to the network may fluctuate greatly, especially in congested, volatile markets.</p> <p>Whether you use a cloud node service like Alchemy or run your own node client, you will connect to the node via the RPC URL, defined for each chain/network combination. This is set by the <code>nodeURL</code> configuration parameter for each chain/network, defined in the configuration file for each chain.</p> <p>To help new users use Gateway, Hummingbot assumes a default <code>nodeURL</code> for each supported chain/network and automatically connects to it when users connect to a DEX.</p> <p>Currently, the default <code>nodeURL</code> for each chain/network uses Ankr RPC endpoints where available, since they do not require users to sign up for an account.</p> <p>For certain testnet or other networks that Ankr doesn't support, the default <code>nodeURL</code> may be an alternate public endpoint, or in certain cases, an Infura endpoint, which users need to configure with their Infura key to use.</p> <p>Here are the current default <code>nodeURL</code> settings for Ethereum mainnet and testnet networks, which are defined in the default config file:</p> <pre><code>mainnet:\n    nodeURL: https://rpc.ankr.com/eth\ngoerli:\n    nodeURL: https://rpc.ankr.com/eth_goerli\n</code></pre> <p>Here's how to change this setting from inside the Hummingbot client:</p> <pre><code>&gt;&gt;&gt; gateway config ethereum.networks.mainnet.nodeURL\n\nGateway Configurations (localhost:15888):\nethereum:\n    mainnet:\n        nodeURL: https://rpc.ankr.com/eth\n\n&gt;&gt;&gt; gateway config ethereum.networks.mainnet.nodeURL https://eth-mainnet.g.alchemy.com/v2/ALCHEMY-KEY\n\nThe config has been updated.\n</code></pre>","title":"Configuring node providers"},{"location":"v2/gateway/setup/#working-with-tokens","text":"<p>Since token symbols are not unique and may have duplicates on each network, it's very important to understand how symbols map to addresses for each chain/network. Also, you may also need to approve tokens before you can trade them.</p> <p>See Working with Tokens for more details.</p>","title":"Working with tokens"},{"location":"v2/gateway/testing/","text":"<p>After the Gateway server is running, we recommend testing out the endpoints using the supplied Postman collection and environment.</p> <p>In addition, you can also run unit tests and manual test scripts if you have installed Gateway from source.</p> <p>These methods allows you to test out the endpoints and understand how Gateway works, before interacting with it through the Hummingbot client. This is an important step because you will likely need to configure your node provider, gas settings, wallet, and other dependencies in order to run DEX trading bots successfully, and understanding Gateway's behavior on a standalone basis helps tremendously.</p>","title":"Testing Gateway"},{"location":"v2/gateway/testing/#testing-with-postman","text":"<p>Postman is an app that helps you interact with API endpoints.</p> <p>The official Hummingbot Postman workspace is: https://www.postman.com/hummingbot. Here, you can download collections and environments for use with Hummingbot.</p> <p>Postman is the easiest way to test Gateway on a standalone basis. In the future, we should encourage community maintainers to upload DEX and chain-specific collections to the Hummingbot workspace.</p>","title":"Testing with Postman"},{"location":"v2/gateway/testing/#adding-certificates","text":"<p>Download and install the desktop version of Postman on your machine. You first have to establish a secure connection with your Gateway instance using certificates in the settings section, so the web version won\u2019t work.</p> <p>First, go to Settings &gt;&gt; Certificates in Postman:</p> <p></p> <p>In this view, eable the CA Certificates toggle, Then go to the certs_path folder location from Installation - Generating Certs. Add the <code>ca_cert.pem</code> from this folder to PEM file in Postman.</p> <p></p> <p>In the Client Certificates section, set the following:</p> <ul> <li>Host: localhost:15888 (or the port where you are running Gateway)</li> <li>CRT file: path to the <code>client_cert.pem</code> file in your certs_path</li> <li>KEY file: path to the <code>client_key.pem</code> file in your certs_path</li> <li>Passphrase: the passphrase you defined from Installation - Generating Certs</li> </ul>","title":"Adding certificates"},{"location":"v2/gateway/testing/#importing-collectionenvironment","text":"<p>You can also find Postman collections and environments from the /postman folder in the Gateway repo.</p> <p>Import the GatewayAPI collection and the acccompanying Gateway environment into your Postman app in order to test the Gateway endpoints.</p>","title":"Importing collection/environment"},{"location":"v2/gateway/testing/#running-tests","text":"<p>After you have imported the collection and environment, test the various endpoints and change the request parameters to understand the their behavior. This will help you understand the speed/latency of each endpoint and configure important setting, especially your node provider, to match your trading style.</p> <p>By convention, the POST requests have sample request payloads in the Body field, which allows you to run the same</p> <p></p>","title":"Running tests"},{"location":"v2/gateway/testing/#testing-with-curl-scripts","text":"<p>If you have installed Gateway from source, you can also run the <code>curl</code> test scripts, defined in the /test-helpers/curl/curl.sh file.</p>","title":"Testing with <code>curl</code> scripts"},{"location":"v2/gateway/testing/#setup","text":"<p>To run the scripts, ensure that you have curl and envsubst installed in your system first.</p> <p>On Linux and Windows/WSL systems, you can install these with <code>sudo apt install curl</code> and <code>sudo apt install envsubst</code> On MacOS, you can run <code>brew install curl</code> and <code>brew install envsubst</code> if you have Homebrew.</p> <p>Next, go into the /test-helpers/curl/ directory in your machine, since the curl commands reference request payload JSON files stored in the /test-helpers/curl/requests/ folder.</p> <p>Finally, define the <code>GATEWAY_CERT</code> and <code>GATEWAY_KEY</code> environment variables. These are the paths to <code>client_cert.pem</code> and <code>client_key.pem</code> in your certs_path, respectively.</p> <p>Here's an example:</p> <pre><code>export GATEWAY_CERT=\"/Users/feng/hummingbot/certs/client_cert.pem\"\nexport GATEWAY_KEY=\"/Users/feng/hummingbot/certs/client_cert.key\"\nexport ETH_ADDRESS='&lt;publicAddress&gt;\n</code></pre>","title":"Setup"},{"location":"v2/gateway/testing/#running-tests_1","text":"<p>Now, you an copy and paste individual commands into Bash/Terminal to execute the tests accordingly.</p>  <p>Tip</p> <p>When using curl any of the tests that can be run using <code>uniswap</code> can be run on <code>sushiswap</code> connector or any future compatible connector that is similar to Uniswap by simply replacing the connector value in the JSON file.</p>  <p>Here are a few examples:</p>","title":"Running tests"},{"location":"v2/gateway/testing/#get","text":"<pre><code>$ curl -s -X GET -k --key $GATEWAY_KEY --cert $GATEWAY_CERT https://localhost:15888/ | jq\n\n{\n  \"status\": \"ok\"\n}\n</code></pre>","title":"GET /"},{"location":"v2/gateway/testing/#get-connectors","text":"<pre><code>$ curl -s -X GET -k --key $GATEWAY_KEY --cert $GATEWAY_CERT https://localhost:15888/connectors | jq\n\n{\n    \"connectors\": [\n   ......,\n        {\n            \"name\": \"sushiswap\",\n            \"trading_type\": [\n                \"EVM_AMM\"\n            ],\n            \"available_networks\": [\n                {\n                    \"chain\": \"ethereum\",\n                    \"networks\": [\n                        \"mainnet\",\n                        \"kovan\",\n                        \"ropsten\"\n                    ]\n                }\n            ]\n        }\n    ]\n}\n</code></pre>","title":"GET /connectors"},{"location":"v2/gateway/testing/#unit-tests","text":"<p>To maintain a high quality bar, connector developers must add unit tests when contributing connectors.</p> <p>If you have installed Gateway from source, you can run these unit tests locally from the root directory:</p> <pre><code># run all unit tests\n$ yarn test:unit \n\n# run all unit tests for a single connector\n$ yarn jest test/connector/uniswap\n\n# run all unit tests for a single chain\n$ yarn jest test/chain/ethereum\n\n# run a single unit test\n$ yarn jest test/chains/ethereum/ethereum.controller.test.ts\n</code></pre>  <p>Writing unit tests</p> <p>If you are looking to add a connector to Gateway, read this document for more details about how to write unit tests:\u00a0Writing unit tests for gateway.</p>","title":"Unit tests"},{"location":"v2/gateway/tokens/","text":"","title":"Working with Tokens"},{"location":"v2/gateway/tokens/#what-are-token-lists","text":"<p>When trading on DEXs, you should understand how symbols map to addresses for each chain/network. Token symbols are not unique and may have duplicates or scammy clones on each network, so it's very important to be aware of which token address you are actually trading.</p> <p>Hummingbot uses the Token Lists standard to define a token dictionary for each network. For example, here are the DAI and HBOT entries from the default Token List for Ethereum Mainnet:</p> <pre><code>{\n    \"chainId\": 1,\n    \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n    \"name\": \"Dai\",\n    \"symbol\": \"DAI\",\n    \"decimals\": 18,\n    \"logoURI\": \"https://assets.coingecko.com/coins/images/9956/thumb/4943.png?1636636734\"\n},\n{\n    \"chainId\": 1,\n    \"address\": \"0xe5097d9baeafb89f9bcb78c9290d545db5f9e9cb\",\n    \"name\": \"Hummingbot\",\n    \"symbol\": \"HBOT\",\n    \"decimals\": 18,\n    \"logoURI\": \"https://assets.coingecko.com/coins/images/21717/thumb/PDPuf0tJ_400x400.jpg?1639863782\"\n},\n</code></pre> <p>When you reference the symbols DAI and HBOT in a strategy, transactions on the <code>ethereum_mainnet</code> chain/network will use its Token List to identify the corresponding address.</p>","title":"What are Token Lists?"},{"location":"v2/gateway/tokens/#default-lists","text":"<p>In Gateway, each blockchain's config file defines a <code>tokenListType</code> (<code>FILE</code> or <code>URL</code>) and <code>tokenListSource</code> (path to the designated file or URL) for each network.</p> <p>Starting with the v1.11.0 release the <code>tokenlistType</code> by default is <code>FILE</code>, and there is a JSON file that contains the dictionary for each network - see ethereum.yml as an example.</p> <p>This reduces latency compared to accessing the Token List via URL, but users are free to change this setting by configuring the <code>tokenListType</code> and <code>tokenListSource</code> parameters for each network - see Updating config parameters</p>","title":"Default lists"},{"location":"v2/gateway/tokens/#adding-tokens-to-a-list","text":"<p>Go to Token Lists and look for a list that contains the tokens you wish to trade. You can download the list change <code>tokenListType</code> and <code>tokenListSource</code> to refer to it, or copy the token entries that you need into the default Token List.</p>","title":"Adding tokens to a list"},{"location":"v2/gateway/tokens/#approving-tokens","text":"<p>On Ethereum and EVM-compatible chains, wallets need to approve other addresses (such as DEXs) before transferring tokens to them. You can inspect the allowance for a spender address to see how much of a specific token you can tranfer to it.</p> <p>When you <code>start</code> a strategy or script, Gateway automatically checks whether both base and quote tokens are approved for the DEX that you are using. If they are not approved or if allowance is insufficient, you will see an log message like \"Waiting for allowances..\" and the strategy will not start.</p> <p>Here is how you can approve tokens:</p>","title":"Approving tokens"},{"location":"v2/gateway/tokens/#use-approve-token-command","text":"<p>Hummingbot has a command that allows you to approve tokens for spending on Gateway one token at a time.</p> <p>Here is an example of the approve-tokens command:</p> <pre><code>&gt;&gt;&gt; gateway approve-tokens uniswap_ethereum_goerli WETH\n</code></pre> <p></p>","title":"Use <code>approve-token</code> command"},{"location":"v2/gateway/tokens/#use-evmapprove-in-postman","text":"<p>Alternatively, you can call the <code>/evm/approve</code> endpoint directly from Postman. Afterwards, you can paste the <code>hash</code> value in the response in the <code>txHash</code> parameter in <code>network/poll</code> endpoint to check when the transaction is confirmed.</p> <p></p> <p>After it's confirmed, you can use the <code>/evm/allowances</code> endpoint to check whether the approval was successful:</p> <p></p>","title":"Use <code>/evm/approve</code> in Postman"},{"location":"v2/gateway/tokens/#testnet-faucets","text":"<p>An testnet faucet is a tool that allows developers and users to obtain testnet ETH or other test assets for free. Testnet ETH is a cryptocurrency that is used exclusively for testing purposes on the Ethereum network and has no real-world value.</p> <p>Using an Ethereum testnet faucet is a simple process that involves the following steps:</p> <ol> <li> <p>Visit a faucet website for your chain. For example, see Ethereum for a list of testnet faucets.</p> </li> <li> <p>Enter your testnet wallet address where indicaated.</p> </li> <li> <p>Complete any additional verification steps: Depending on the testnet faucet you are using, you may be required to complete additional verification steps, such as solving a captcha or proving that you are not a robot.</p> </li> <li> <p>Receive your testnet ETH: After you have completed the verification steps, the testnet ETH will be sent to your Ethereum testnet address. You can then use this ETH to experiment with the Ethereum testnet network.</p> </li> </ol>","title":"Testnet faucets"},{"location":"v2/gateway/tokens/#wrapped-tokens","text":"<p>DEXs like Uniswap and TraderJoe automatically wrap native tokens that are not ERC-20, so that users can trade native tokens such as <code>ETH</code> and <code>AVAX</code> through the interface. Behind the scenes, these exchanges automatically wrap these tokens into ERC-20 compliant <code>WETH</code> and <code>WAVAX</code> tokens.</p> <p>Gateway does not auto-wrap tokens by default,</p> <p>so users need to wrap native tokens into ERC-20 tokens before using them with Gateway. As of the <code>v1.4.0</code> release, there is no error message that lets you know if the token can't be used when it's not wrapped and instead will just display <code>\"Markets are not ready\"</code> but we are working on adding more informative messages within the next few releases.</p>","title":"Wrapped tokens"},{"location":"v2/install/","text":"<p>Hummingbot is a local software client that helps you run trading strategies that automate the execution of orders and trades on various cryptocurrency exchanges and protocols.</p>","title":"Installation"},{"location":"v2/install/#releases","text":"<p>Hummingbot's code is publicly hosted at Github, and the <code>development</code> branch is continually updated.</p> <p>Approximately once a month, we publish an official release of Hummingbot onto the <code>master</code> branch. See Releases.</p>","title":"Releases"},{"location":"v2/install/#installation-options","text":"","title":"Installation options"},{"location":"v2/install/#test-drive","text":"<p>Try out Hummingbot in your web browser without installing anything! Visit the Test Drive page on our website.</p>","title":"\ud83c\udf0e Test Drive"},{"location":"v2/install/#docker","text":"<p>Our DockerHub publishes Docker images for the <code>master</code> (latest) and <code>development</code> builds of Hummingbot starting with version 1.5.0. For previous versions you may download the docker images from CoinAlpha's Dockerhub</p> <p>We recommend this path for users who run Hummingbot on Linux, in the cloud, and/or multiple bots.</p> <p>Read the Docker installation guide: Linux, Mac, Windows</p>","title":"\ud83d\udc33 Docker"},{"location":"v2/install/#source","text":"<p>Install Hummingbot from source, including all dependencies.</p> <p>We recommend this path for developers who want to customize Hummingbot's behavior or to build new connectors and strategies.</p> <p>Read the source installation guide: Linux, Mac, Windows</p>","title":"\ud83d\udee0\ufe0f Source"},{"location":"v2/install/#raspberry-pi","text":"<p>Hummingbot doesn't require much power, so some users have run successfully run multiple instances on a single Raspberry Pi. We maintain an experimental build that shows users how to do this.</p> <p>Install on Raspberry Pi</p>","title":"\ud83c\udf53 Raspberry Pi"},{"location":"v2/install/#system-requirements","text":"<p>Hummingbot has been successfully tested with the following specifications:</p>    Resource Requirement     Operating System Linux: Ubuntu 18.04 or later (recommended) *Other Linux installations: Debian GNU/Linux 9, CentOS 7, Amazon Linux 2 AMI    MacOS: macOS 10.12.6 (Sierra) or later    Windows: Windows 10 or later   Memory/RAM 4 GB or higher   Storage Install using Docker: 5 GB per instance    Install from source: 3 GB per instance   Network A reliable internet connection is critical to keeping Hummingbot connected to exchanges.","title":"System requirements"},{"location":"v2/install/#videos-and-guides","text":"<p> Test Drive walkthrough</p> <p> Installation Guides playlist</p>","title":"\ud83d\udcfa Videos and Guides"},{"location":"v2/install/desktop-windows/","text":"","title":"Docker Desktop Windows"},{"location":"v2/install/docker-linux/","text":"<p>Supported versions: Ubuntu 18.04 / Ubuntu 20.04 (recommended), Debian 10 / 11</p>","title":"Hummingbot via Docker on Linux"},{"location":"v2/install/docker-linux/#install-docker","text":"<p>In the Ubuntu terminal, enter the commands below one by one</p>  <p>Tip</p> <p>Click the \"Copy to clipboard\" icon at the end of the code blocks to easily copy the commands</p>  <p></p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade -y\n</code></pre> <pre><code>sudo apt-get install apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release\n</code></pre> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n</code></pre> <pre><code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable\"\n</code></pre> <pre><code>sudo apt update &amp;&amp; sudo apt-get install docker-ce\n</code></pre> <pre><code>sudo service docker start \n</code></pre> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <pre><code>exit\n</code></pre>","title":"Install Docker"},{"location":"v2/install/docker-linux/#install-hummingbot","text":"","title":"Install Hummingbot"},{"location":"v2/install/docker-linux/#using-helper-scripts","text":"<p>Download Helper Scripts here</p> Create ScriptStart ScriptUpdate Script   <pre><code>wget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/create.sh\n</code></pre>   <pre><code>wget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/start.sh\n</code></pre>   <pre><code>wget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/update.sh\n</code></pre>     <p>Enable script permissions</p> <pre><code>chmod a+x *.sh\n</code></pre> <p>Run the <code>create</code> script to launch a Hummingbot instance</p> <pre><code>./create.sh\n</code></pre>","title":"Using Helper Scripts"},{"location":"v2/install/docker-linux/#manual-method","text":"<p>Create folder for your new instance</p> <pre><code>mkdir hummingbot_files\n</code></pre> <p>Create folders for logs, config files and database file</p> <pre><code>mkdir hummingbot_files/hummingbot_conf\nmkdir hummingbot_files/hummingbot_conf/connectors\nmkdir hummingbot_files/hummingbot_conf/strategies\nmkdir hummingbot_files/hummingbot_certs\nmkdir hummingbot_files/hummingbot_logs\nmkdir hummingbot_files/hummingbot_data\nmkdir hummingbot_files/hummingbot_scripts\nmkdir hummingbot_files/hummingbot_pmm_scripts\nmkdir hummingbot_files/gateway_conf\nmkdir hummingbot_files/gateway_logs\n</code></pre> <p>Launch a new instance of hummingbot</p> <pre><code>docker run -it \\\n--network host \\\n--name hummingbot-instance \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_conf,destination=/conf/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_logs,destination=/logs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_data,destination=/data/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_pmm_scripts,destination=/pmm_scripts/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_scripts,destination=/scripts/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_certs,destination=/home/hummingbot/.hummingbot-gateway/certs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/gateway_conf,destination=/gateway-conf/\" \\\nhummingbot/hummingbot:latest\n</code></pre>","title":"Manual Method"},{"location":"v2/install/docker-linux/#additional-resources","text":"<p>The Hummingbot DockerHub publishes Docker images for the <code>master</code> (latest) and <code>development</code> builds of Hummingbot starting with version 1.5.0. For previous versions you may download the docker images from CoinAlpha's Dockerhub</p> <p> Using Docker Compose to launch multiple Hummingbots</p>","title":"Additional Resources"},{"location":"v2/install/docker-mac/","text":"","title":"Hummingbot via Docker on Mac"},{"location":"v2/install/docker-mac/#install-docker-desktop-for-mac","text":"<p>Download the Docker installer from the official Docker page</p> <p>Once Docker is installed reboot your computer first before proceeding to the next steps.</p> <p>This step is important!</p>","title":"Install Docker Desktop for Mac"},{"location":"v2/install/docker-mac/#install-hummingbot","text":"<p>Note</p> <p>If you are using a Mac with Apple Silicon (M1 / M2) chip, after running the <code>create.sh</code> script and you get prompted for the version (development / latest) you'll need to specify a specific docker image for ARM devices in this format - <code>version-x.xx-arm_beta</code> See this list for available ARM versions.</p>   <p>Tip</p> <p>Click the \"Copy to clipboard\" icon at the end of the code blocks to easily copy the commands</p>","title":"Install Hummingbot"},{"location":"v2/install/docker-mac/#using-helper-scripts","text":"<p>Download Helper Scripts here</p> Create ScriptStart ScriptUpdate Script   <pre><code>wget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/create.sh\n</code></pre>   <pre><code>wget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/start.sh\n</code></pre>   <pre><code>wget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/update.sh\n</code></pre>     <p>Enable script permissions</p> <pre><code>chmod a+x *.sh\n</code></pre> <p>Run the <code>create</code> script to launch a Hummingbot instance</p> <pre><code>./create.sh\n</code></pre>","title":"Using Helper Scripts"},{"location":"v2/install/docker-mac/#manual-method","text":"<p>Create folder for your new instance</p> <pre><code>mkdir hummingbot_files\n</code></pre> <p>Create folders for logs, config files and database file</p> <pre><code>mkdir hummingbot_files/hummingbot_conf\nmkdir hummingbot_files/hummingbot_conf/connectors\nmkdir hummingbot_files/hummingbot_conf/strategies\nmkdir hummingbot_files/hummingbot_certs\nmkdir hummingbot_files/hummingbot_logs\nmkdir hummingbot_files/hummingbot_data\nmkdir hummingbot_files/hummingbot_scripts\nmkdir hummingbot_files/hummingbot_pmm_scripts\nmkdir hummingbot_files/gateway_conf\nmkdir hummingbot_files/gateway_logs\n</code></pre> <p>Launch a new instance of hummingbot</p> <pre><code>docker run -it \\\n--network host \\\n--name hummingbot-instance \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_conf,destination=/conf/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_logs,destination=/logs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_data,destination=/data/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_pmm_scripts,destination=/pmm_scripts/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_scripts,destination=/scripts/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_certs,destination=/home/hummingbot/.hummingbot-gateway/certs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/gateway_conf,destination=/gateway-conf/\" \\\nhummingbot/hummingbot:latest\n</code></pre>","title":"Manual Method"},{"location":"v2/install/docker-mac/#additional-resources","text":"<p>The Hummingbot DockerHub publishes Docker images for the <code>master</code> (latest) and <code>development</code> builds of Hummingbot starting with version 1.5.0. For previous versions you may download the docker images from CoinAlpha's Dockerhub</p> <p> Using Docker Compose to launch multiple Hummingbots</p>","title":"Additional Resources"},{"location":"v2/install/docker-windows/","text":"","title":"Docker on Windows via WSL"},{"location":"v2/install/docker-windows/#prerequisites","text":"<p>The Hummingbot codebase is designed and optimized for UNIX-based systems such as macOS and Linux. For Windows users, we recommend running Hummingbot in Windows Subsystem for Linux (WSL).</p> <ul> <li> <p>You must be running Windows 10 version 2004 and higher (Build 19041 and higher) or Windows 11</p> </li> <li> <p>Virtualization needs to be enabled under your BIOS setting.</p> </li> </ul> <p>For troubleshooting WSL see this link</p>  <p>Tip</p> <p>Click the \"Copy to clipboard\" icon at the end of the code blocks to easily copy the commands</p>","title":"Prerequisites"},{"location":"v2/install/docker-windows/#1-install-wsl","text":"<p>Open a Powershell or Windows command prompt as administrator and run the command below to install WSL with Ubuntu 20.04</p> <pre><code>wsl --install --distribution Ubuntu-20.04\n</code></pre> <p></p> <p>Restart your computer to finish the WSL installation</p> <p></p> <p>Open the Start Menu and look for `Ubuntu 20.04\" and launch it to open a WSL terminal</p> <p></p> <p>WSL should finish installing then it will prompt you to enter a username / password</p> <p>After adding a username / password, WSL should be completely installed. Continue on to the next steps to install Docker</p>","title":"1. Install WSL"},{"location":"v2/install/docker-windows/#2-install-docker","text":"<p>In the Ubuntu terminal, enter the commands below one by one</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade -y\n</code></pre> <pre><code>sudo apt-get install apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release\n</code></pre> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n</code></pre> <pre><code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable\"\n</code></pre> <pre><code>sudo apt update &amp;&amp; sudo apt-get install docker-ce\n</code></pre> <pre><code>sudo service docker start \n</code></pre> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <pre><code>exit\n</code></pre>","title":"2. Install Docker"},{"location":"v2/install/docker-windows/#3-install-hummingbot","text":"","title":"3. Install Hummingbot"},{"location":"v2/install/docker-windows/#using-helper-scripts","text":"<p>Download Helper Scripts here</p> Create ScriptStart ScriptUpdate Script   <pre><code>wget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/create.sh\n</code></pre>   <pre><code>wget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/start.sh\n</code></pre>   <pre><code>wget https://raw.githubusercontent.com/hummingbot/hummingbot/master/installation/docker-commands/update.sh\n</code></pre>     <p>Enable script permissions</p> <pre><code>chmod a+x *.sh\n</code></pre> <p>Run the <code>create</code> script to launch a Hummingbot instance</p> <pre><code>./create.sh\n</code></pre>","title":"Using Helper Scripts"},{"location":"v2/install/docker-windows/#manual-method","text":"<p>Create folder for your new instance</p> <pre><code>mkdir hummingbot_files\n</code></pre> <p>Create folders for logs, config files and database file</p> <pre><code>mkdir hummingbot_files/hummingbot_conf\nmkdir hummingbot_files/hummingbot_conf/connectors\nmkdir hummingbot_files/hummingbot_conf/strategies\nmkdir hummingbot_files/hummingbot_certs\nmkdir hummingbot_files/hummingbot_logs\nmkdir hummingbot_files/hummingbot_data\nmkdir hummingbot_files/hummingbot_scripts\nmkdir hummingbot_files/hummingbot_pmm_scripts\nmkdir hummingbot_files/gateway_conf\nmkdir hummingbot_files/gateway_logs\n</code></pre> <p>Launch a new instance of hummingbot</p> <pre><code>docker run -it \\\n--network host \\\n--name hummingbot-instance \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_conf,destination=/conf/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_logs,destination=/logs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_data,destination=/data/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_pmm_scripts,destination=/pmm_scripts/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_scripts,destination=/scripts/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_certs,destination=/home/hummingbot/.hummingbot-gateway/certs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/gateway_conf,destination=/gateway-conf/\" \\\nhummingbot/hummingbot:latest\n</code></pre>","title":"Manual Method"},{"location":"v2/install/docker-windows/#additional-resources","text":"<p>The Hummingbot DockerHub publishes Docker images for the <code>master</code> (latest) and <code>development</code> builds of Hummingbot starting with version 1.5.0. For previous versions you may download the docker images from CoinAlpha's Dockerhub</p> <p> Using Docker Compose to launch multiple Hummingbots</p>","title":"Additional Resources"},{"location":"v2/install/gitbash/","text":"","title":"Windows Gitbash"},{"location":"v2/install/raspberry-pi/","text":"<p>The following steps are for the Raspberry Pi but it should also work with any other device that uses the same ARM architecture.</p> <p>Running Hummingbot on a Raspberry Pi or similar device has the same main benefit of running it on a cloud server: having a dedicated machine for Hummingbot. Raspberry Pi\u2019s are relatively low cost, easy to set up, and, of course, don\u2019t have the monthly charges associated with a cloud provider.</p>","title":"Raspberry Pi / ARM64"},{"location":"v2/install/raspberry-pi/#prerequisites","text":"","title":"Prerequisites"},{"location":"v2/install/raspberry-pi/#download-64-bit-os","text":"<p>To run Hummingbot on a Raspberry Pi, a 64-bit OS is required as it won't work with 32-bit. You can download the 64-bit OS from the Raspberry Pi website or from the Ubuntu website.</p> <p>You can also choose between CLI (command line) and Desktop GUI versions but you'll get more performance with just using the CLI version.</p>","title":"Download 64-bit OS"},{"location":"v2/install/raspberry-pi/#load-the-image-file-to-your-raspberry-pis-sd-card","text":"<p>The Raspberry Pi has an easy to follow guide with alternatives on how to load the SD card with a Raspberry Pi OS from different operating systems.</p> <p>Once the OS is installed and booted then you can follow the steps below to install Hummingbot using either Docker or Source</p>","title":"Load the image file to your Raspberry Pi\u2019s SD card"},{"location":"v2/install/raspberry-pi/#install-via-docker","text":"<p>Copy and paste each line of code one by one into the terminal</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\nsudo usermod -a -G docker $USER\nsudo systemctl start docker &amp;&amp; sudo systemctl enable docker\n</code></pre>  <p>Warning</p> <p>This step is important \u2014 make sure to close and restart your terminal window to enable the correct permissions for <code>docker</code> command before proceeding.</p>  <pre><code>exit\n</code></pre> <p>Once Docker is installed you can then launch a Hummingbot instance with either of the following options:</p> <ul> <li>Scripts: download and use automated Docker scripts</li> <li>Manual: run install commands manually</li> </ul>  <p>Note</p> <p>The Raspberry Pi uses a different processor architecture (ARM) which means you'll need to use a specific Docker image that was built for the ARM architecture. When running the <code>./create.sh</code> command or creating the Docker instance manually you'll have to specify the image to use which is usually in this format - <code>version-[version_number]-arm_beta</code> The latest ARM versions can be found here (filter list by \"arm\") - Hummingbot DockerHub</p>  ScriptsManual   <pre><code># 1) Download Hummingbot install, start, and update script\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/development/installation/docker-commands/create.sh\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/development/installation/docker-commands/start.sh\nwget https://raw.githubusercontent.com/hummingbot/hummingbot/development/installation/docker-commands/update.sh\n\n# 2) Enable script permissions\nchmod a+x *.sh\n\n# 3) Create a hummingbot instance\n./create.sh\n\n# 4) Pull Hummingbot ARM image when asked what version to use\nEnter Hummingbot version: [ latest/development ] ( default = 'latest' )\n&gt;&gt; version-1.13.0-arm_beta\n</code></pre>   <pre><code># 1) Create folder for your new instance\nmkdir hummingbot_files\n\n# 2) Create folders for logs, config files and database file\nmkdir hummingbot_files/hummingbot_conf\nmkdir hummingbot_files/hummingbot_logs\nmkdir hummingbot_files/hummingbot_data\nmkdir hummingbot_files/hummingbot_scripts\n\n# 3) Launch a new instance of hummingbot\ndocker run -it \\\n--network host \\\n--name hummingbot-instance \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_conf,destination=/conf/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_logs,destination=/logs/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_data,destination=/data/\" \\\n--mount \"type=bind,source=$(pwd)/hummingbot_files/hummingbot_scripts,destination=/scripts/\" \\\nhummingbot/hummingbot:version-1.13.0-arm_beta\n</code></pre>","title":"Install via Docker"},{"location":"v2/install/raspberry-pi/#install-via-source","text":"<p>Open a terminal (GUI) or SSH into the Raspberry Pi and copy / paste the following code line by line into the terminal</p> <p>Update the repository and install important dependencies</p> <pre><code>sudo apt update\nsudo apt upgrade -y\nsudo apt-get install build-essential libssl-dev libffi-dev gcc python3-dev python-dev python3.7 -y\n</code></pre> <p>Install Miniforge</p> <pre><code>wget https://github.com/conda-forge/miniforge/releases/download/4.11.0-4/Miniforge3-4.11.0-4-Linux-aarch64.sh\nsh Miniforge3-4.11.0-4-Linux-aarch64.sh\n</code></pre> <p>Restart the terminal</p> <pre><code>exec bash\n</code></pre> <p>Install <code>conda-build</code></p> <pre><code>conda install conda-build\n</code></pre> <p>Clone the Hummingbot repository</p> <pre><code>git clone https://github.com/hummingbot/hummingbot.git\n</code></pre>  <p>Note</p> <p>If you need to switch branches (ie. <code>development</code> branch) then after cloning the repository use the command <code>git checkout [branch_name]</code> to switch branches. For example, to switch to the development branch use <code>git checkout development</code></p>  <p>Change directory into the Hummingbot folder</p> <pre><code>cd hummingbot\n</code></pre>  <p>Note</p> <p>If you are using Ubuntu 22.04 you'll need to go into the <code>./setup</code> folder first and edit the <code>environment-linux-aarch64.yml</code> file and change \"cryptography==2.8\" to \"cryptography==3.1.1\" before running the <code>./install</code> command otherwise you'll get an error \"could not build wheels for cryptography\"</p>  <p>Run the <code>install</code> command</p> <pre><code>./install\n</code></pre> <p>Activate the <code>conda</code> environment</p> <pre><code>conda activate hummingbot\n</code></pre> <p>Clean your Hummingbot directory and then compile</p> <pre><code>./clean &amp;&amp; ./compile\n</code></pre> <p>Launch Hummingbot</p> <pre><code>bin/hummingbot.py\n</code></pre>","title":"Install via Source"},{"location":"v2/install/raspberry-pi/#additional-resources","text":"","title":"Additional Resources"},{"location":"v2/install/source-linux/","text":"","title":"Installing Hummingbot on Linux via Source"},{"location":"v2/install/source-linux/#install-prerequisites","text":"<p>Tip</p> <p>Click the \"Copy to clipboard\" icon at the end of the code blocks to easily copy the commands</p>  <pre><code>sudo apt-get update\n</code></pre> <pre><code>sudo apt-get install -y build-essential\n</code></pre> <pre><code>wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n</code></pre> <pre><code>sh Miniconda3-latest-Linux-x86_64.sh\n</code></pre> <pre><code>exec bash\n</code></pre> <pre><code>git clone https://github.com/hummingbot/hummingbot.git\n</code></pre> <pre><code>cd hummingbot &amp;&amp; ./clean &amp;&amp; ./install\n</code></pre> <pre><code>conda activate hummingbot &amp;&amp; ./compile\n</code></pre> <pre><code>bin/hummingbot.py\n</code></pre>","title":"Install Prerequisites"},{"location":"v2/install/source-linux/#launch-hummingbot","text":"<p>In the terminal make sure you are within the Hummingbot folder then run the following commands below to launch Hummingbot</p> <pre><code>conda activate hummingbot\n</code></pre> <pre><code>bin/hummingbot.py\n</code></pre>","title":"Launch Hummingbot"},{"location":"v2/install/source-linux/#additional-resources","text":"","title":"Additional Resources"},{"location":"v2/install/source-mac/","text":"","title":"Hummingbot via Source on Mac"},{"location":"v2/install/source-mac/#install-prerequisites","text":"","title":"Install Prerequisites"},{"location":"v2/install/source-mac/#xcode","text":"<p>Running Hummingbot on\u00a0macOS\u00a0requires\u00a0Xcode\u00a0and Xcode command line tools.</p>  <p>Tip</p> <p>Click the \"Copy to clipboard\" icon at the end of the code blocks to easily copy the commands</p>  <pre><code>xcode-select --install\n</code></pre>","title":"Xcode"},{"location":"v2/install/source-mac/#anaconda","text":"<p>Hummingbot requires Python 3 and other Python libraries. To manage these dependencies, Hummingbot uses Anaconda, an open-source environment, and package manager for Python that is the current industry standard for data scientists and data engineers.</p> <p>To install Anaconda, go to the Anaconda site and download and install the latest Python installer applicable for your architecture (M1 / x86-64). Both the graphical installer (.pkg) and the command line installer (.sh) will work.</p>","title":"Anaconda"},{"location":"v2/install/source-mac/#edit-the-zshrc-file","text":"<p>Warning</p> <p>If you use ZSH or another Unix shell, copy the code snippet below to your <code>.zshrc</code> or similar file. By default, Anaconda only adds it to your <code>.bash_profile</code> file. This makes the <code>conda</code> command available in your root path.</p> <p>We also do NOT recommend installing <code>conda</code> through <code>Homebrew</code> as this will cause issues during installation. Downloading directly from the Anaconda website should be sufficient. </p>  <p>Open a terminal window and run <code>nano</code> to edit the <code>.zshrc</code> file</p> <pre><code>nano .zshrc\n</code></pre> <p>Copy and paste the following code below:</p> <pre><code>__conda_setup=\"$(CONDA_REPORT_ERRORS=false '/anaconda3/bin/conda' shell.bash hook 2&gt; /dev/null)\"\nif [ $? -eq 0 ]; then\n    \\eval \"$__conda_setup\"\nelse\n    if [ -f \"/anaconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/anaconda3/etc/profile.d/conda.sh\"\n        CONDA_CHANGEPS1=false conda activate base\n    else\n        \\export PATH=\"/anaconda3/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n</code></pre> <p>Exit out of <code>nano</code> and make sure to save the changes then close &amp; relaunch the terminal. Once you have the terminal up run the <code>conda init</code> command.</p> <pre><code>conda init zsh\n</code></pre> <p>Afterward, you can also try the <code>conda</code> command in a terminal to verify if conda was installed correctly. If the command is valid, then Anaconda has been successfully installed. Proceed to the next step to install Hummingbot</p>","title":"Edit the .zshrc file"},{"location":"v2/install/source-mac/#install-hummingbot","text":"<p>The following steps below will differ depending on whether you are using a Mac with an Intel Chip or Apple Silicon.</p> Mac with Intel ChipMac with Apple Silicon (M1 / M2 chip)   <p>Clone the Hummingbot repo</p> <p><pre><code>git clone https://github.com/hummingbot/hummingbot.git\n</code></pre> Navigate into the Hummingbot folder</p> <p><pre><code>cd hummingbot\n</code></pre> Run the install script</p> <p><pre><code>./install\n</code></pre> Activate the conda environment <pre><code>conda activate hummingbot\n</code></pre></p>   <p>Deactivate and remove the conda environment</p> <p><pre><code>conda deactivate\n</code></pre> <pre><code>conda env remove -n hummingbot\n</code></pre> Creates the hummingbot environment and enforces python 3.8.2 and initialize a environment variable used to determine the processor packages to use <pre><code>CONDA_SUBDIR=osx-64 conda create -n hummingbot python=3.8.2\n</code></pre></p> <p>Activate the environment <pre><code>conda activate hummingbot\n</code></pre></p> <p>Configures environment to use intel-based packages <pre><code>conda config --env --set subdir osx-64\n</code></pre></p> <p>Run install script <pre><code>./install\n</code></pre></p>","title":"Install Hummingbot"},{"location":"v2/install/source-mac/#compile","text":"<pre><code>./compile\n</code></pre>","title":"Compile"},{"location":"v2/install/source-mac/#run-hummingbot","text":"<pre><code>bin/hummingbot.py\n</code></pre>","title":"Run Hummingbot"},{"location":"v2/install/source-mac/#videos-and-guides","text":"<p> Install Hummingbot on source | MacOS</p>","title":"\ud83d\udcfa Videos and Guides"},{"location":"v2/install/source-windows/","text":"","title":"Source on Windows via WSL"},{"location":"v2/install/source-windows/#prerequisites","text":"<p>The Hummingbot codebase is designed and optimized for UNIX-based systems such as macOS and Linux. For Windows users, we recommend running Hummingbot in Windows Subsystem for Linux (WSL).</p> <ul> <li> <p>You must be running Windows 10 version 2004 and higher (Build 19041 and higher) or Windows 11</p> </li> <li> <p>Virtualization needs to be enabled under your BIOS setting.</p> </li> </ul> <p>For troubleshooting WSL see this link</p>  <p>Tip</p> <p>Click the \"Copy to clipboard\" icon at the end of the code blocks to easily copy the commands</p>","title":"Prerequisites"},{"location":"v2/install/source-windows/#1-install-wsl","text":"<p>Open a Powershell or Windows command prompt as administrator and run the command below to install WSL with Ubuntu 20.04</p> <pre><code>wsl --install --distribution Ubuntu-20.04\n</code></pre> <p></p> <p>Restart your computer to finish the WSL installation</p> <p></p> <p>Open the Start Menu and look for `Ubuntu 20.04\" and launch it to open a WSL terminal</p> <p></p> <p>WSL should finish installing then it will prompt you to enter a username / password</p> <p>After adding a username / password, WSL should be completely installed. Continue on to the next steps to install the Source version</p>","title":"1. Install WSL"},{"location":"v2/install/source-windows/#2-install-hummingbot-via-source","text":"<p>Launch the Ubuntu terminal and paste the following commands below one by one</p> <pre><code>sudo apt-get update\n</code></pre> <pre><code>sudo apt-get install -y build-essential\n</code></pre> <pre><code>wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n</code></pre> <pre><code>sh Miniconda3-latest-Linux-x86_64.sh\n</code></pre> <pre><code>exec bash\n</code></pre> <pre><code>git clone https://github.com/hummingbot/hummingbot.git\n</code></pre> <pre><code>cd hummingbot &amp;&amp; ./clean &amp;&amp; ./install\n</code></pre> <pre><code>conda activate hummingbot &amp;&amp; ./compile\n</code></pre> <pre><code>bin/hummingbot.py\n</code></pre>","title":"2. Install Hummingbot via Source"},{"location":"v2/install/source-windows/#3-launch-hummingbot","text":"<p>In the terminal make sure you are within the Hummingbot folder then run the following commands below to launch Hummingbot</p> <pre><code>conda activate hummingbot\n</code></pre> <pre><code>bin/hummingbot.py\n</code></pre>","title":"3. Launch Hummingbot"},{"location":"v2/install/source-windows/#additional-resources","text":"","title":"Additional Resources"},{"location":"v2/scripts/quick-start/","text":"<p>Scripts enable Hummingbot users to build customized strategies and access the full power of Hummingbot exchange connectors in a few lines of Python code.</p> <p>Introduced in version\u00a01.4.0,\u00a0Scripts\u00a0offer users an easier alternative to creating a full-blown strategy. They are light Python files, that can be run and modified without re-compilation, so users can\u00a0<code>stop</code>\u00a0a script, adjust the code, and\u00a0<code>start</code>\u00a0it without leaving the Hummingbot client interface.</p> <p>Unlike strategies, scripts can be created without configuration files, so only a single file is needed. However, scripts can access all the raw data, events, and methods in Hummingbot connectors, as well as other features such as the Rate Oracle.</p> <p>What we are going to learn?</p> <ul> <li>Log messages</li> <li>Get prices (best bid, best ask, mid-price, last traded price)</li> <li>Place orders</li> <li>Cancel orders</li> <li>Code a simple pure market-making strategy</li> <li>Add a fixed price ceiling/floor feature</li> <li>How to use Candles and add technical indicators</li> <li>Improve the price ceiling/floor feature by using the Bollinger Bands</li> </ul>","title":"Introduction"},{"location":"v2/scripts/quick-start/#lets-code","text":"<p>Important: Before you begin, ensure that you have installed Hummingbot. If you haven't, follow this guide to do so.</p>","title":"Let\u2019s code"},{"location":"v2/scripts/quick-start/#understanding-the-structure","text":"","title":"Understanding the structure"}]}